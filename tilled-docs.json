[
  {
    "url": "https://docs.tilled.com/",
    "title": "Tilled Docs",
    "content": "Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI ReferenceQuick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI ReferenceQuick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI ReferenceQuick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI ReferenceQuick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI ReferenceQuick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI ReferenceQuick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI Reference Integrate with TilledCreate an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI Reference Integrate with Tilled Integrate with Tilled Tilled Create an exceptional payments experience without the hassle of managing complex payment systems.Get StartedAPI Reference Create an exceptional payments experience without the hassle of managing complex payment systems. Get StartedAPI Reference [Get Started](https://docs.tilled.com/docs/quick-start) Get Started [API Reference](https://docs.tilled.com/api-reference) API Reference Quick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today >Compare Integration OptionsCompare integration options to fit your use case.Compare options >Explore the APIExplore and interact with the API to see everything you can do.Dive in > Quick StartCreate a sandbox account, get your API keys, and start collecting payments.Start today > Quick StartCreate a sandbox account, get your API keys, and start collecting payments. Quick Start Create a sandbox account, get your API keys, and start collecting payments. [Start today >](https://docs.tilled.com/docs/quick-start) Compare Integration OptionsCompare integration options to fit your use case.Compare options > Compare Integration OptionsCompare integration options to fit your use case. Compare Integration Options Compare integration options to fit your use case. [Compare options >](https://docs.tilled.com/docs/get-started/integration-options) Explore the APIExplore and interact with the API to see everything you can do.Dive in > Explore the APIExplore and interact with the API to see everything you can do. Explore the API Explore and interact with the API to see everything you can do. [Dive in >](https://docs.tilled.com/api-reference)",
    "sourceUrl": "start"
  },
  {
    "url": "https://docs.tilled.com/docs/quick-start",
    "title": "Tilled",
    "content": "Quick Start This guide outlines the necessary steps and resources needed to set up and manage your integration with Tilled. You’ll find instructions on how to create a sandbox account, generate API keys, and begin exploring the API. Resources Integration OptionsAPI ReferenceTilled.js Create sandbox accountThe first step is to create a sandbox account. Your sandbox account will grant you access to the sandbox Dashboard, which will be used to manage your integration.Generate API keysAPI keys are required to access Tilled's API. To generate API keys through the Dashboard: Navigate to Developers and click the Create API Key button Name the API key Select your API key type and scopes, if applicable Click the Create button API keys can also be generated using the API keysAPI endpoint.Explore Tilled's capabilitiesUse the API to: Create a Connected AccountAPI Create an Auth LinkAPI Create a Payment IntentAPI Use the Dashboard to: Customize your branding Set up merchant pricing Create a merchant application Test your integration: Simulate different payment scenarios Verify the bank account verification process Test webhooks Last updated on March 7, 2025Integration Options Quick Start This guide outlines the necessary steps and resources needed to set up and manage your integration with Tilled. You’ll find instructions on how to create a sandbox account, generate API keys, and begin exploring the API. Tilled Resources Resources Integration OptionsAPI ReferenceTilled.js [Integration Options](https://docs.tilled.com/docs/get-started/integration-options) Integration Options [API Reference](https://docs.tilled.com/api-reference) API Reference [Tilled.js](https://docs.tilled.com/docs/sdks-applications/tilledjs) Tilled.js Create sandbox accountThe first step is to create a sandbox account. Your sandbox account will grant you access to the sandbox Dashboard, which will be used to manage your integration.Generate API keysAPI keys are required to access Tilled's API. To generate API keys through the Dashboard: Navigate to Developers and click the Create API Key button Name the API key Select your API key type and scopes, if applicable Click the Create button API keys can also be generated using the API keysAPI endpoint.Explore Tilled's capabilitiesUse the API to: Create a Connected AccountAPI Create an Auth LinkAPI Create a Payment IntentAPI Use the Dashboard to: Customize your branding Set up merchant pricing Create a merchant application Test your integration: Simulate different payment scenarios Verify the bank account verification process Test webhooks Create sandbox account [https://docs.tilled.com/docs/quick-start#create-sandbox-account](https://docs.tilled.com/docs/quick-start#create-sandbox-account) The first step is to create a sandbox account. Your sandbox account will grant you access to the sandbox Dashboard, which will be used to manage your integration. [create a sandbox account](https://sandbox-app.tilled.com/auth/register) Generate API keys [https://docs.tilled.com/docs/quick-start#generate-api-keys](https://docs.tilled.com/docs/quick-start#generate-api-keys) API keys are required to access Tilled's API. To generate API keys through the Dashboard: Tilled's Navigate to Developers and click the Create API Key button Name the API key Select your API key type and scopes, if applicable Click the Create button Navigate to Developers and click the Create API Key button Developers Create API Key Name the API key Select your API key type and scopes, if applicable Click the Create button Create API keys can also be generated using the API keysAPI endpoint. [API keysAPI](https://docs.tilled.com/api-reference#tag/api-keys) API Explore Tilled's capabilities Tilled's [https://docs.tilled.com/docs/quick-start#explore--capabilities](https://docs.tilled.com/docs/quick-start#explore--capabilities) Use the API to: Create a Connected AccountAPI Create an Auth LinkAPI Create a Payment IntentAPI Create a Connected AccountAPI [Create a Connected AccountAPI](https://docs.tilled.com/api-reference#tag/accounts/post/v1/accounts/connected) API Create an Auth LinkAPI [Create an Auth LinkAPI](https://docs.tilled.com/api-reference#tag/auth-links/post/v1/auth-links) API Create a Payment IntentAPI [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API Use the Dashboard to: Customize your branding Set up merchant pricing Create a merchant application Customize your branding [Customize your branding](https://docs.tilled.com/docs/account-configuration/white-label) Set up merchant pricing [Set up merchant pricing](https://docs.tilled.com/docs/merchants/merchant-pricing) Create a merchant application [Create a merchant application](https://docs.tilled.com/docs/merchants/onboard-new-merchants) Test your integration: Simulate different payment scenarios Verify the bank account verification process Test webhooks Simulate different payment scenarios [different payment scenarios](https://docs.tilled.com/docs/resources/testing) Verify the bank account verification process [bank account verification](https://docs.tilled.com/docs/resources/testing#bank-account-verification) Test webhooks [webhooks](https://docs.tilled.com/docs/resources/testing#webhooks) Last updated on March 7, 2025 March 7, 2025 Integration Options [Integration Options](https://docs.tilled.com/docs/get-started/integration-options)",
    "sourceUrl": "https://docs.tilled.com/"
  },
  {
    "url": "https://docs.tilled.com/api-reference",
    "title": "Api Reference",
    "content": "",
    "sourceUrl": "https://docs.tilled.com/"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/integration-options",
    "title": "Tilled",
    "content": "Integration Options Various factors may influence how you choose to integrate, including: Customization needs: The extent to which your payment experience needs to be customized. Time-to-market goals: How quickly you want to start onboarding merchants and processing payments. Payment types processed: The types of payments processed on your platform. Development resource availability: The availability and expertise of your development team for integration and ongoing support. Best practice is to split your integration into multiple phases: onboarding, payments, and documents. OnboardingPaymentsDocumentsThe table below compares your integration options for onboarding new merchants.API-ONLYHOSTED APPLICATIONDescriptionBuild a custom onboarding flow using the OnboardingAPI.No-code option for software platforms to onboard a merchant.Integration effortHighest effortLowest effortContinuous optimizationRequires integration changesAutomaticCustomizationUI customizationCustomize and build your own UIWhite-labeledFlow logicExtensive controlLimited controlPre-fill merchant data✓✓Mobile supportDependent on implementationResponsive webFeaturesDocument uploadDependent on implementation✓Invite a collaboratorDependent on implementation✓Plaid for bank verification✗✓Email notifications✓✓Webhook events✓✓ No-Code Modules The table below outlines the key functionality available through Tilled's no-code modules, which enable you to manage operations and process payments without writing a single line of code. White-label settings apply to all modules. Refer to our Merchant Preferences guide to customize the Onboarding, Payments, and Notifications modules. MODULEDESCRIPTIONOnboardingThe merchant application must be completed before a merchant can process payments. The hosted application is continuously optimized to increase approval rates, achieving a 50% higher likelihood of instant approvals compared to direct API integrations.DashboardThe Dashboard is used to manage daily operations including payment management, reconciliation, dispute resolution, and more.PaymentsMerchants can collect payments using payment links and the virtual terminal.NotificationsAutomated email notifications are sent to your merchants related to their merchant application, information requests, and disputes.Last updated on February 4, 2025Quick StartLaunch Checklist Integration Options Various factors may influence how you choose to integrate, including: Customization needs: The extent to which your payment experience needs to be customized. Time-to-market goals: How quickly you want to start onboarding merchants and processing payments. Payment types processed: The types of payments processed on your platform. Development resource availability: The availability and expertise of your development team for integration and ongoing support. Customization needs: The extent to which your payment experience needs to be customized. Customization needs: Time-to-market goals: How quickly you want to start onboarding merchants and processing payments. Time-to-market goals: Payment types processed: The types of payments processed on your platform. Payment types processed: Development resource availability: The availability and expertise of your development team for integration and ongoing support. Development resource availability: Best practice is to split your integration into multiple phases: onboarding, payments, and documents. OnboardingPaymentsDocumentsThe table below compares your integration options for onboarding new merchants.API-ONLYHOSTED APPLICATIONDescriptionBuild a custom onboarding flow using the OnboardingAPI.No-code option for software platforms to onboard a merchant.Integration effortHighest effortLowest effortContinuous optimizationRequires integration changesAutomaticCustomizationUI customizationCustomize and build your own UIWhite-labeledFlow logicExtensive controlLimited controlPre-fill merchant data✓✓Mobile supportDependent on implementationResponsive webFeaturesDocument uploadDependent on implementation✓Invite a collaboratorDependent on implementation✓Plaid for bank verification✗✓Email notifications✓✓Webhook events✓✓ OnboardingPaymentsDocuments [Onboarding](https://docs.tilled.com/docs/get-started/integration-options#onboarding) [Payments](https://docs.tilled.com/docs/get-started/integration-options#payments) [Documents](https://docs.tilled.com/docs/get-started/integration-options#documents) The table below compares your integration options for onboarding new merchants.API-ONLYHOSTED APPLICATIONDescriptionBuild a custom onboarding flow using the OnboardingAPI.No-code option for software platforms to onboard a merchant.Integration effortHighest effortLowest effortContinuous optimizationRequires integration changesAutomaticCustomizationUI customizationCustomize and build your own UIWhite-labeledFlow logicExtensive controlLimited controlPre-fill merchant data✓✓Mobile supportDependent on implementationResponsive webFeaturesDocument uploadDependent on implementation✓Invite a collaboratorDependent on implementation✓Plaid for bank verification✗✓Email notifications✓✓Webhook events✓✓ The table below compares your integration options for onboarding new merchants. API-ONLYHOSTED APPLICATIONDescriptionBuild a custom onboarding flow using the OnboardingAPI.No-code option for software platforms to onboard a merchant.Integration effortHighest effortLowest effortContinuous optimizationRequires integration changesAutomaticCustomizationUI customizationCustomize and build your own UIWhite-labeledFlow logicExtensive controlLimited controlPre-fill merchant data✓✓Mobile supportDependent on implementationResponsive webFeaturesDocument uploadDependent on implementation✓Invite a collaboratorDependent on implementation✓Plaid for bank verification✗✓Email notifications✓✓Webhook events✓✓ API-ONLYHOSTED APPLICATION API-ONLYHOSTED APPLICATION API-ONLY API-ONLY HOSTED APPLICATION HOSTED APPLICATION DescriptionBuild a custom onboarding flow using the OnboardingAPI.No-code option for software platforms to onboard a merchant.Integration effortHighest effortLowest effortContinuous optimizationRequires integration changesAutomaticCustomizationUI customizationCustomize and build your own UIWhite-labeledFlow logicExtensive controlLimited controlPre-fill merchant data✓✓Mobile supportDependent on implementationResponsive webFeaturesDocument uploadDependent on implementation✓Invite a collaboratorDependent on implementation✓Plaid for bank verification✗✓Email notifications✓✓Webhook events✓✓ DescriptionBuild a custom onboarding flow using the OnboardingAPI.No-code option for software platforms to onboard a merchant. Description Build a custom onboarding flow using the OnboardingAPI. [OnboardingAPI](https://docs.tilled.com/api-reference#tag/onboarding) API No-code option for software platforms to onboard a merchant. Integration effortHighest effortLowest effort Integration effort Highest effort Highest effort Highest effort Lowest effort Lowest effort Lowest effort Continuous optimizationRequires integration changesAutomatic Continuous optimization Requires integration changes Automatic Customization Customization Customization UI customizationCustomize and build your own UIWhite-labeled UI customization Customize and build your own UI White-labeled Flow logicExtensive controlLimited control Flow logic Extensive control Limited control Pre-fill merchant data✓✓ Pre-fill merchant data ✓ ✓ Mobile supportDependent on implementationResponsive web Mobile support Dependent on implementation Responsive web Features Features Features Document uploadDependent on implementation✓ Document upload Dependent on implementation ✓ Invite a collaboratorDependent on implementation✓ Invite a collaborator Dependent on implementation ✓ Plaid for bank verification✗✓ Plaid for bank verification ✗ ✓ Email notifications✓✓ Email notifications ✓ ✓ Webhook events✓✓ Webhook events ✓ ✓ No-Code Modules [https://docs.tilled.com/docs/get-started/integration-options#no-code-modules](https://docs.tilled.com/docs/get-started/integration-options#no-code-modules) The table below outlines the key functionality available through Tilled's no-code modules, which enable you to manage operations and process payments without writing a single line of code. White-label settings apply to all modules. Tilled's Refer to our Merchant Preferences guide to customize the Onboarding, Payments, and Notifications modules. [Merchant Preferences guide](https://docs.tilled.com/docs/merchants/merchant-preferences) MODULEDESCRIPTIONOnboardingThe merchant application must be completed before a merchant can process payments. The hosted application is continuously optimized to increase approval rates, achieving a 50% higher likelihood of instant approvals compared to direct API integrations.DashboardThe Dashboard is used to manage daily operations including payment management, reconciliation, dispute resolution, and more.PaymentsMerchants can collect payments using payment links and the virtual terminal.NotificationsAutomated email notifications are sent to your merchants related to their merchant application, information requests, and disputes. MODULEDESCRIPTION MODULEDESCRIPTION MODULE MODULE DESCRIPTION DESCRIPTION OnboardingThe merchant application must be completed before a merchant can process payments. The hosted application is continuously optimized to increase approval rates, achieving a 50% higher likelihood of instant approvals compared to direct API integrations.DashboardThe Dashboard is used to manage daily operations including payment management, reconciliation, dispute resolution, and more.PaymentsMerchants can collect payments using payment links and the virtual terminal.NotificationsAutomated email notifications are sent to your merchants related to their merchant application, information requests, and disputes. OnboardingThe merchant application must be completed before a merchant can process payments. The hosted application is continuously optimized to increase approval rates, achieving a 50% higher likelihood of instant approvals compared to direct API integrations. Onboarding The merchant application must be completed before a merchant can process payments. The hosted application is continuously optimized to increase approval rates, achieving a 50% higher likelihood of instant approvals compared to direct API integrations. DashboardThe Dashboard is used to manage daily operations including payment management, reconciliation, dispute resolution, and more. Dashboard The Dashboard is used to manage daily operations including payment management, reconciliation, dispute resolution, and more. PaymentsMerchants can collect payments using payment links and the virtual terminal. Payments Merchants can collect payments using payment links and the virtual terminal. [payment links](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#collect-a-one-time-payment) NotificationsAutomated email notifications are sent to your merchants related to their merchant application, information requests, and disputes. Notifications Automated email notifications are sent to your merchants related to their merchant application, information requests, and disputes. Last updated on February 4, 2025 February 4, 2025 Quick StartLaunch Checklist [Quick Start](https://docs.tilled.com/docs/quick-start) [Launch Checklist](https://docs.tilled.com/docs/get-started/launch-checklist)",
    "sourceUrl": "https://docs.tilled.com/"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/launch-checklist",
    "title": "Tilled",
    "content": "Launch Checklist The launch checklist outlines the prerequisites to launching with Tilled, including operational and developer-specific tasks. Please note that this checklist can be updated at any time to reflect new requirements or processes. Operational Tasks The operational tasks below are required before launching with Tilled: Submit the Partner Application:The partner application provides Tilled with insight into your business and processing requirements.Sign the Partner Processing Agreement:Review and sign your agreement with Tilled, which includes your buy-rates and revenue share for commission purposes.Submit W9 and Voided Check:A W9 and Voided Check (or Bank Letter) are required before receiving your first commission payout. If providing a Bank Letter, it needs to be dated within the last 30 days.Set up merchant pricing:Align on your pricing strategy and configure your pricing templates.In addition, we recommend you complete the following:Invite team members:Invite additional team members configure your pricing templates to access the Dashboard.Configure white-label:Configure your white-label settings to maintain brand consistency across the merchant journey.Customize merchant preferences:Customize merchant preferences if leveraging Tilled's no-code modules.Request a SaaS account:A merchant account is required if you intend to process your platform’s SaaS fee payments through Tilled.Order terminals:Order developer terminals if planning to support in-person payments. Developer Tasks The developer tasks below are required to be completed in sandbox before launching with Tilled: Create API Keys:Create your secret and publishable API keys in order to access Tilled's API.Submit a merchant application:Submit a merchant application using the OnboardingAPI or through the Dashboard.Collect a payment:Collect a payment using the Payment IntentsAPI or or through the Dashboard.Initiate a refund:Refund a payment using the Create a RefundAPI endpoint or through the Dashboard.Build a checkout form:Build a custom checkout form using Tilled.jsJS.Configure webhooks:Configure webhooks to receive real-time notifications about events occurring on Tilled's platform.Share checkout flow:Provide a live demo of your final checkout flow to our Integrations team, or share access to your demo environment by emailing integrations@tilled.com. This ensures we can review network and console logs, which are not visible in video submissions, for compliance and functionality.Depending on your integration, you may also need to:Collect a platform fee:Include a platform_fee_amount when Creating a Payment IntentAPI.Collect a payment using a stored payment method:Attach a Payment Method to a CustomerAPI and Create a Payment IntentAPI using the stored payment method.Create a checkout session:Generate a checkout_session_url using the Create a Checkout SessionAPI endpoint.Set up a subscription:Set up a subscription to charge customers on a recurring basis.Simulate a dispute:Simulate a dispute and submit dispute evidence using the DisputesAPI or through the Dashboard.Create shared payment methods:To share payment methods across merchants, Create a Payment MethodAPI using the partner account_id.Last updated on February 3, 2025Integration OptionsData Migration Launch Checklist The launch checklist outlines the prerequisites to launching with Tilled, including operational and developer-specific tasks. Tilled Please note that this checklist can be updated at any time to reflect new requirements or processes. Operational Tasks [https://docs.tilled.com/docs/get-started/launch-checklist#operational-tasks](https://docs.tilled.com/docs/get-started/launch-checklist#operational-tasks) The operational tasks below are required before launching with Tilled: Tilled Submit the Partner Application:The partner application provides Tilled with insight into your business and processing requirements.Sign the Partner Processing Agreement:Review and sign your agreement with Tilled, which includes your buy-rates and revenue share for commission purposes.Submit W9 and Voided Check:A W9 and Voided Check (or Bank Letter) are required before receiving your first commission payout. If providing a Bank Letter, it needs to be dated within the last 30 days.Set up merchant pricing:Align on your pricing strategy and configure your pricing templates.In addition, we recommend you complete the following:Invite team members:Invite additional team members configure your pricing templates to access the Dashboard.Configure white-label:Configure your white-label settings to maintain brand consistency across the merchant journey.Customize merchant preferences:Customize merchant preferences if leveraging Tilled's no-code modules.Request a SaaS account:A merchant account is required if you intend to process your platform’s SaaS fee payments through Tilled.Order terminals:Order developer terminals if planning to support in-person payments. Submit the Partner Application:The partner application provides Tilled with insight into your business and processing requirements. Submit the Partner Application:The partner application provides Tilled with insight into your business and processing requirements. Submit the Partner Application: Tilled Sign the Partner Processing Agreement:Review and sign your agreement with Tilled, which includes your buy-rates and revenue share for commission purposes. Sign the Partner Processing Agreement:Review and sign your agreement with Tilled, which includes your buy-rates and revenue share for commission purposes. Sign the Partner Processing Agreement: Tilled [commission](https://docs.tilled.com/docs/commissions) Submit W9 and Voided Check:A W9 and Voided Check (or Bank Letter) are required before receiving your first commission payout. If providing a Bank Letter, it needs to be dated within the last 30 days. Submit W9 and Voided Check:A W9 and Voided Check (or Bank Letter) are required before receiving your first commission payout. If providing a Bank Letter, it needs to be dated within the last 30 days. Submit W9 and Voided Check: [commission payout](https://docs.tilled.com/docs/commissions#commission-payouts) Set up merchant pricing:Align on your pricing strategy and configure your pricing templates. Set up merchant pricing:Align on your pricing strategy and configure your pricing templates. Set up merchant pricing: [configure your pricing templates](https://docs.tilled.com/docs/merchants/merchant-pricing#configure-merchant-pricing) In addition, we recommend you complete the following: Invite team members:Invite additional team members configure your pricing templates to access the Dashboard. Invite team members:Invite additional team members configure your pricing templates to access the Dashboard. Invite team members: [Invite additional team members](https://docs.tilled.com/docs/account-configuration/users) [Dashboard](https://sandbox-app.tilled.com/account) Configure white-label:Configure your white-label settings to maintain brand consistency across the merchant journey. Configure white-label:Configure your white-label settings to maintain brand consistency across the merchant journey. Configure white-label: [white-label settings](https://docs.tilled.com/docs/account-configuration/white-label) Customize merchant preferences:Customize merchant preferences if leveraging Tilled's no-code modules. Customize merchant preferences:Customize merchant preferences if leveraging Tilled's no-code modules. Customize merchant preferences: [Customize merchant preferences](https://docs.tilled.com/docs/merchants/merchant-preferences) Tilled's Request a SaaS account:A merchant account is required if you intend to process your platform’s SaaS fee payments through Tilled. Request a SaaS account:A merchant account is required if you intend to process your platform’s SaaS fee payments through Tilled. Request a SaaS account: Tilled Order terminals:Order developer terminals if planning to support in-person payments. Order terminals:Order developer terminals if planning to support in-person payments. Order terminals: [in-person payments](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments) Developer Tasks [https://docs.tilled.com/docs/get-started/launch-checklist#developer-tasks](https://docs.tilled.com/docs/get-started/launch-checklist#developer-tasks) The developer tasks below are required to be completed in sandbox before launching with Tilled: [sandbox](https://sandbox-app.tilled.com/) Tilled Create API Keys:Create your secret and publishable API keys in order to access Tilled's API.Submit a merchant application:Submit a merchant application using the OnboardingAPI or through the Dashboard.Collect a payment:Collect a payment using the Payment IntentsAPI or or through the Dashboard.Initiate a refund:Refund a payment using the Create a RefundAPI endpoint or through the Dashboard.Build a checkout form:Build a custom checkout form using Tilled.jsJS.Configure webhooks:Configure webhooks to receive real-time notifications about events occurring on Tilled's platform.Share checkout flow:Provide a live demo of your final checkout flow to our Integrations team, or share access to your demo environment by emailing integrations@tilled.com. This ensures we can review network and console logs, which are not visible in video submissions, for compliance and functionality.Depending on your integration, you may also need to:Collect a platform fee:Include a platform_fee_amount when Creating a Payment IntentAPI.Collect a payment using a stored payment method:Attach a Payment Method to a CustomerAPI and Create a Payment IntentAPI using the stored payment method.Create a checkout session:Generate a checkout_session_url using the Create a Checkout SessionAPI endpoint.Set up a subscription:Set up a subscription to charge customers on a recurring basis.Simulate a dispute:Simulate a dispute and submit dispute evidence using the DisputesAPI or through the Dashboard.Create shared payment methods:To share payment methods across merchants, Create a Payment MethodAPI using the partner account_id. Create API Keys:Create your secret and publishable API keys in order to access Tilled's API. Create API Keys:Create your secret and publishable API keys in order to access Tilled's API. Create API Keys: Tilled's Submit a merchant application:Submit a merchant application using the OnboardingAPI or through the Dashboard. Submit a merchant application:Submit a merchant application using the OnboardingAPI or through the Dashboard. Submit a merchant application: [Submit a merchant application](https://docs.tilled.com/docs/merchants/onboard-new-merchants) [OnboardingAPI](https://docs.tilled.com/api-reference#tag/onboarding) API [Dashboard](https://sandbox-app.tilled.com/merchants) Collect a payment:Collect a payment using the Payment IntentsAPI or or through the Dashboard. Collect a payment:Collect a payment using the Payment IntentsAPI or or through the Dashboard. Collect a payment: [Collect a payment](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents) [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API [Dashboard](https://sandbox-app.tilled.com/payments) Initiate a refund:Refund a payment using the Create a RefundAPI endpoint or through the Dashboard. Initiate a refund:Refund a payment using the Create a RefundAPI endpoint or through the Dashboard. Initiate a refund: [Create a RefundAPI](https://docs.tilled.com/api-reference#tag/refunds/post/v1/refunds) API [Dashboard](https://sandbox-app.tilled.com/payments) Build a checkout form:Build a custom checkout form using Tilled.jsJS. Build a checkout form:Build a custom checkout form using Tilled.jsJS. Build a checkout form: [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Configure webhooks:Configure webhooks to receive real-time notifications about events occurring on Tilled's platform. Configure webhooks:Configure webhooks to receive real-time notifications about events occurring on Tilled's platform. Configure webhooks: [Configure webhooks](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks) Tilled's Share checkout flow:Provide a live demo of your final checkout flow to our Integrations team, or share access to your demo environment by emailing integrations@tilled.com. This ensures we can review network and console logs, which are not visible in video submissions, for compliance and functionality. Share checkout flow:Provide a live demo of your final checkout flow to our Integrations team, or share access to your demo environment by emailing integrations@tilled.com. This ensures we can review network and console logs, which are not visible in video submissions, for compliance and functionality. Share checkout flow: [integrations@tilled.com](mailto:integrations@tilled.com) Depending on your integration, you may also need to: Collect a platform fee:Include a platform_fee_amount when Creating a Payment IntentAPI. Collect a platform fee:Include a platform_fee_amount when Creating a Payment IntentAPI. Collect a platform fee: platform_fee_amount [Creating a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API Collect a payment using a stored payment method:Attach a Payment Method to a CustomerAPI and Create a Payment IntentAPI using the stored payment method. Collect a payment using a stored payment method:Attach a Payment Method to a CustomerAPI and Create a Payment IntentAPI using the stored payment method. Collect a payment using a stored payment method: [Attach a Payment Method to a CustomerAPI](https://docs.tilled.com/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) API [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API Create a checkout session:Generate a checkout_session_url using the Create a Checkout SessionAPI endpoint. Create a checkout session:Generate a checkout_session_url using the Create a Checkout SessionAPI endpoint. Create a checkout session: checkout_session_url [Create a Checkout SessionAPI](https://docs.tilled.com/api-reference#tag/checkout-sessions) API Set up a subscription:Set up a subscription to charge customers on a recurring basis. Set up a subscription:Set up a subscription to charge customers on a recurring basis. Set up a subscription: [Set up a subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions) Simulate a dispute:Simulate a dispute and submit dispute evidence using the DisputesAPI or through the Dashboard. Simulate a dispute:Simulate a dispute and submit dispute evidence using the DisputesAPI or through the Dashboard. Simulate a dispute: [Simulate a dispute](https://docs.tilled.com/docs/resources/testing#disputes) [DisputesAPI](https://docs.tilled.com/api-reference#tag/disputes) API [Dashboard](https://sandbox-app.tilled.com/disputes) Create shared payment methods:To share payment methods across merchants, Create a Payment MethodAPI using the partner account_id. Create shared payment methods:To share payment methods across merchants, Create a Payment MethodAPI using the partner account_id. Create shared payment methods: [Create a Payment MethodAPI](https://docs.tilled.com/api-reference#tag/payment-methods/post/v1/payment-methods) API account_id Last updated on February 3, 2025 February 3, 2025 Integration OptionsData Migration [Integration Options](https://docs.tilled.com/docs/get-started/integration-options) [Data Migration](https://docs.tilled.com/docs/get-started/data-migration)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/data-migration",
    "title": "Tilled",
    "content": "Data Migration Tilled migrates your existing customer data from your previous payment provider, such as Stripe, to your new Tilled account, ensuring your merchants can continue processing payments using previously saved payment methods. Data migration overview Seamless data transfer: Tilled works closely with your payment provider to securely transfer payment and customer data. No fees: Data migrations are done at no cost. Quick turnaround: Migrations are typically completed within 3-5 business days once all required information is received and reviewed. Pre-requisities A merchant must be approved with Tilled before initiating the migration process. Migration Process To initiate the process: Provide Tilled’s PCI Attestation of Compliance (AOC) to your payment provider. The current PCI AOC can be requested by emailing integrations@tilled.com. Obtain Tilled’s PGP public encryption key for secure data transmission. After your payment provider prepares your data, they’ll email you encrypted instructions that Tilled needs in order to download your data securely. Please forward this email to migrations@tilled.com for decryption and data retrieval by Tilled’s Migration team. During the migration: Payment provider creates an encrypted file containing card details, email addresses, and any associated metadata. Payment history, subscriptions, and CVVs are not included in the migration. Payment provider securely transfers the file to Tilled. Tilled imports the data, enabling your merchants to process using the stored payment data right away. FAQsAre subscriptions set up as part of the data migration?No, the import is limited to creating customers and payment methods.How are migration results communicated?A result file is generated and sent to the provided email address. Results will include:Account IDPayment Method IDCustomer IDCustomer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer recordBilling ID or Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer recordFirst NameLast NameEmailPayment Method TypeAccount Number Last Digits - last 2 for Debit, last 4 for CardWhy might a row from the imported CSV not be processed?A row from the imported CSV might not be processed if it contains issues such as:Missing required information, like a ZIP codeInvalid data, such as an expired cardCan a software platform provide a file to update records after an import?While our primary focus is on the creation of records rather than ongoing maintenance, the Tilled API does support updates to metadata, customer names, and similar fields. If you have a specific need for updating records via a file, reach out to integrations@tilled.com for assistance.Is there any additional information I should be aware of for migrations from Stripe?No, migrations from Stripe follow the process outlined above. You can learn more about Stripe’s data migration process here.Last updated on March 10, 2025Launch ChecklistProcessor Comparison Data Migration Tilled migrates your existing customer data from your previous payment provider, such as Stripe, to your new Tilled account, ensuring your merchants can continue processing payments using previously saved payment methods. Tilled Tilled Data migration overview Data migration overview Seamless data transfer: Tilled works closely with your payment provider to securely transfer payment and customer data. No fees: Data migrations are done at no cost. Quick turnaround: Migrations are typically completed within 3-5 business days once all required information is received and reviewed. Seamless data transfer: Tilled works closely with your payment provider to securely transfer payment and customer data. Seamless data transfer: Tilled No fees: Data migrations are done at no cost. No fees: Quick turnaround: Migrations are typically completed within 3-5 business days once all required information is received and reviewed. Quick turnaround: Pre-requisities Pre-requisities A merchant must be approved with Tilled before initiating the migration process. Tilled Migration Process [https://docs.tilled.com/docs/get-started/data-migration#migration-process](https://docs.tilled.com/docs/get-started/data-migration#migration-process) To initiate the process: To initiate the process: Provide Tilled’s PCI Attestation of Compliance (AOC) to your payment provider. The current PCI AOC can be requested by emailing integrations@tilled.com. Obtain Tilled’s PGP public encryption key for secure data transmission. After your payment provider prepares your data, they’ll email you encrypted instructions that Tilled needs in order to download your data securely. Please forward this email to migrations@tilled.com for decryption and data retrieval by Tilled’s Migration team. Provide Tilled’s PCI Attestation of Compliance (AOC) to your payment provider. The current PCI AOC can be requested by emailing integrations@tilled.com. [integrations@tilled.com](mailto:integrations@tilled.com) Obtain Tilled’s PGP public encryption key for secure data transmission. [PGP public encryption key](https://tilled-pgp-public.tilled.com/) After your payment provider prepares your data, they’ll email you encrypted instructions that Tilled needs in order to download your data securely. Please forward this email to migrations@tilled.com for decryption and data retrieval by Tilled’s Migration team. [migrations@tilled.com](mailto:migrations@tilled.com) During the migration: During the migration: Payment provider creates an encrypted file containing card details, email addresses, and any associated metadata. Payment history, subscriptions, and CVVs are not included in the migration. Payment provider securely transfers the file to Tilled. Tilled imports the data, enabling your merchants to process using the stored payment data right away. Payment provider creates an encrypted file containing card details, email addresses, and any associated metadata. Payment history, subscriptions, and CVVs are not included in the migration. Payment provider securely transfers the file to Tilled. Tilled imports the data, enabling your merchants to process using the stored payment data right away. FAQsAre subscriptions set up as part of the data migration?No, the import is limited to creating customers and payment methods.How are migration results communicated?A result file is generated and sent to the provided email address. Results will include:Account IDPayment Method IDCustomer IDCustomer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer recordBilling ID or Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer recordFirst NameLast NameEmailPayment Method TypeAccount Number Last Digits - last 2 for Debit, last 4 for CardWhy might a row from the imported CSV not be processed?A row from the imported CSV might not be processed if it contains issues such as:Missing required information, like a ZIP codeInvalid data, such as an expired cardCan a software platform provide a file to update records after an import?While our primary focus is on the creation of records rather than ongoing maintenance, the Tilled API does support updates to metadata, customer names, and similar fields. If you have a specific need for updating records via a file, reach out to integrations@tilled.com for assistance.Is there any additional information I should be aware of for migrations from Stripe?No, migrations from Stripe follow the process outlined above. You can learn more about Stripe’s data migration process here. FAQs Are subscriptions set up as part of the data migration?No, the import is limited to creating customers and payment methods. Are subscriptions set up as part of the data migration? Are subscriptions set up as part of the data migration? [https://docs.tilled.com/docs/get-started/data-migration#faq-are-subscriptions-set-up-as-part-of-the-data-migration](https://docs.tilled.com/docs/get-started/data-migration#faq-are-subscriptions-set-up-as-part-of-the-data-migration) No, the import is limited to creating customers and payment methods. How are migration results communicated?A result file is generated and sent to the provided email address. Results will include:Account IDPayment Method IDCustomer IDCustomer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer recordBilling ID or Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer recordFirst NameLast NameEmailPayment Method TypeAccount Number Last Digits - last 2 for Debit, last 4 for Card How are migration results communicated? How are migration results communicated? [https://docs.tilled.com/docs/get-started/data-migration#faq-how-are-migration-results-communicated](https://docs.tilled.com/docs/get-started/data-migration#faq-how-are-migration-results-communicated) A result file is generated and sent to the provided email address. Results will include:Account IDPayment Method IDCustomer IDCustomer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer recordBilling ID or Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer recordFirst NameLast NameEmailPayment Method TypeAccount Number Last Digits - last 2 for Debit, last 4 for Card A result file is generated and sent to the provided email address. Results will include: Account IDPayment Method IDCustomer IDCustomer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer recordBilling ID or Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer recordFirst NameLast NameEmailPayment Method TypeAccount Number Last Digits - last 2 for Debit, last 4 for Card Account ID Payment Method ID Customer ID Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer record - this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer record Billing ID or Customer Vault ID - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer record - this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer record First Name Last Name Email Payment Method Type Account Number Last Digits - last 2 for Debit, last 4 for Card - last 2 for Debit, last 4 for Card Why might a row from the imported CSV not be processed?A row from the imported CSV might not be processed if it contains issues such as:Missing required information, like a ZIP codeInvalid data, such as an expired card Why might a row from the imported CSV not be processed? Why might a row from the imported CSV not be processed? [https://docs.tilled.com/docs/get-started/data-migration#faq-why-might-a-row-from-the-imported-csv-not-be-processed](https://docs.tilled.com/docs/get-started/data-migration#faq-why-might-a-row-from-the-imported-csv-not-be-processed) A row from the imported CSV might not be processed if it contains issues such as:Missing required information, like a ZIP codeInvalid data, such as an expired card A row from the imported CSV might not be processed if it contains issues such as: Missing required information, like a ZIP codeInvalid data, such as an expired card Missing required information, like a ZIP code Invalid data, such as an expired card Can a software platform provide a file to update records after an import?While our primary focus is on the creation of records rather than ongoing maintenance, the Tilled API does support updates to metadata, customer names, and similar fields. If you have a specific need for updating records via a file, reach out to integrations@tilled.com for assistance. Can a software platform provide a file to update records after an import? Can a software platform provide a file to update records after an import? [https://docs.tilled.com/docs/get-started/data-migration#faq-can-a-software-platform-provide-a-file-to-update-records-after-an-import](https://docs.tilled.com/docs/get-started/data-migration#faq-can-a-software-platform-provide-a-file-to-update-records-after-an-import) While our primary focus is on the creation of records rather than ongoing maintenance, the Tilled API does support updates to metadata, customer names, and similar fields. If you have a specific need for updating records via a file, reach out to integrations@tilled.com for assistance. While our primary focus is on the creation of records rather than ongoing maintenance, the Tilled API does support updates to metadata, customer names, and similar fields. If you have a specific need for updating records via a file, reach out to integrations@tilled.com for assistance. Tilled [integrations@tilled.com](mailto:integrations@tilled.com) Is there any additional information I should be aware of for migrations from Stripe?No, migrations from Stripe follow the process outlined above. You can learn more about Stripe’s data migration process here. Is there any additional information I should be aware of for migrations from Stripe? Is there any additional information I should be aware of for migrations from Stripe? [https://docs.tilled.com/docs/get-started/data-migration#faq-is-there-any-additional-information-i-should-be-aware-of-for-migrations-from-stripe](https://docs.tilled.com/docs/get-started/data-migration#faq-is-there-any-additional-information-i-should-be-aware-of-for-migrations-from-stripe) No, migrations from Stripe follow the process outlined above. You can learn more about Stripe’s data migration process here. [here](https://docs.stripe.com/get-started/data-migrations/pan-export) Last updated on March 10, 2025 March 10, 2025 Launch ChecklistProcessor Comparison [Launch Checklist](https://docs.tilled.com/docs/get-started/launch-checklist) [Processor Comparison](https://docs.tilled.com/docs/get-started/processor-comparison)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/processor-comparison",
    "title": "Tilled",
    "content": "Processor Comparison When choosing a processor, consider your onboarding and reporting requirements, the desired merchant experience, and any other operational needs. If you have questions about processor capabilities, please reach out to support@tilled.com. TSYSPAYSAFE + FLEX BILLINGPAYSAFEProcessing CapabilitiesOnline payments✓✓✓In-person payments✓In betaBank-to-bank payments (ACH/EFT)✗✓✓CurrenciesUSD✓✓✓CAD✗✗✓CapabilitiesApple PayIn-person payments onlyOnline and in-person paymentsIn-person payments onlyPlatform fees✗Online payments onlyCard funding typeAvailable in Q1 '25Available in API responseMerchant PricingCustom pricing for Amex payments✗✓✓Custom pricing for in-person payments✗✓✗Pricing template processing timeInstantInstantUp to 7 business daysPricing change processing timeImplemented for the following month, if requested before the 12th of the monthInstantUp to 7 business daysBilling FrequencyDaily✗✓✓Weekly✗✓✗Monthly✓✓✓Settlement TimesNext-day funding (NDF)7:30pm EST4pm EST; payments are batched multiple times a dayStandard payout speed2:30am EST12am EST; payments are batched multiple times a dayPayout SpeedNext-day funding (NDF)DefaultIn beta, requires UW approvalRequires UW approvalT+0High-risk merchantsDefaultRequires UW approvalT+1High-risk merchantsHigh-risk merchantsDefaultPayout TypeGross payouts✓In beta✗Net payouts✗✓✓Payout FrequencyDaily✓✓✓Weekly✗✓✓Monthly✗✓✓ReportingTransaction-level fee details✗✓✓Interchange qualification data✓✓✓OnboardingMerchant onboarding via API✓✓Expected approval timesSame day, unless pended for additional information.Credit checksA soft credit check will be performed on the application signee.A soft credit check will be performed on the application signee.Agreements and digital signatureMerchants can agree and sign by completing an in-app Docusign flow.Merchants can agree and sign by clicking to agree in the application.DocumentsMerchants classified as Charities or Religious Organizations who indicate 501(c)(3) status must upload a 501(c)(3) determination letter to submit their application.Documents are not required to submit the application. However, additional documentation may be requested after submission.RiskFunding holdsMerchants will receive an email notification from Tilled and TSYS. Document requests can be managed through the Dashboard or API to resolve the funding hold.Merchants will receive an email notification from Tilled. Document requests can be managed through the Dashboard or API to resolve the funding hold.DisputesDisputes can be managed through the Dashboard or API.Merchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb_dispatcherlogin@transfirst.com.Disputes can be managed through the Dashboard or API.In-person paymentsSupported countriesUSUS, CADDevicesValor VL100, VL110PAX A920, A920 Pro, and A80Custom pricing for in-person payments✗✓✗Manual capture✓✗On-device tipping✓✓Printed receiptsManaged through the Dashboard or APIManaged directly on the terminal readerCard tokenization✓Available in Q1 '25Real-time terminal monitoring✓✓Terminal management✓✓Point-to-point encryption (P2PE)✓✓Last updated on February 6, 2025Data MigrationMerchant Preferences Processor Comparison When choosing a processor, consider your onboarding and reporting requirements, the desired merchant experience, and any other operational needs. If you have questions about processor capabilities, please reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) TSYSPAYSAFE + FLEX BILLINGPAYSAFEProcessing CapabilitiesOnline payments✓✓✓In-person payments✓In betaBank-to-bank payments (ACH/EFT)✗✓✓CurrenciesUSD✓✓✓CAD✗✗✓CapabilitiesApple PayIn-person payments onlyOnline and in-person paymentsIn-person payments onlyPlatform fees✗Online payments onlyCard funding typeAvailable in Q1 '25Available in API responseMerchant PricingCustom pricing for Amex payments✗✓✓Custom pricing for in-person payments✗✓✗Pricing template processing timeInstantInstantUp to 7 business daysPricing change processing timeImplemented for the following month, if requested before the 12th of the monthInstantUp to 7 business daysBilling FrequencyDaily✗✓✓Weekly✗✓✗Monthly✓✓✓Settlement TimesNext-day funding (NDF)7:30pm EST4pm EST; payments are batched multiple times a dayStandard payout speed2:30am EST12am EST; payments are batched multiple times a dayPayout SpeedNext-day funding (NDF)DefaultIn beta, requires UW approvalRequires UW approvalT+0High-risk merchantsDefaultRequires UW approvalT+1High-risk merchantsHigh-risk merchantsDefaultPayout TypeGross payouts✓In beta✗Net payouts✗✓✓Payout FrequencyDaily✓✓✓Weekly✗✓✓Monthly✗✓✓ReportingTransaction-level fee details✗✓✓Interchange qualification data✓✓✓OnboardingMerchant onboarding via API✓✓Expected approval timesSame day, unless pended for additional information.Credit checksA soft credit check will be performed on the application signee.A soft credit check will be performed on the application signee.Agreements and digital signatureMerchants can agree and sign by completing an in-app Docusign flow.Merchants can agree and sign by clicking to agree in the application.DocumentsMerchants classified as Charities or Religious Organizations who indicate 501(c)(3) status must upload a 501(c)(3) determination letter to submit their application.Documents are not required to submit the application. However, additional documentation may be requested after submission.RiskFunding holdsMerchants will receive an email notification from Tilled and TSYS. Document requests can be managed through the Dashboard or API to resolve the funding hold.Merchants will receive an email notification from Tilled. Document requests can be managed through the Dashboard or API to resolve the funding hold.DisputesDisputes can be managed through the Dashboard or API.Merchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb_dispatcherlogin@transfirst.com.Disputes can be managed through the Dashboard or API.In-person paymentsSupported countriesUSUS, CADDevicesValor VL100, VL110PAX A920, A920 Pro, and A80Custom pricing for in-person payments✗✓✗Manual capture✓✗On-device tipping✓✓Printed receiptsManaged through the Dashboard or APIManaged directly on the terminal readerCard tokenization✓Available in Q1 '25Real-time terminal monitoring✓✓Terminal management✓✓Point-to-point encryption (P2PE)✓✓ TSYSPAYSAFE + FLEX BILLINGPAYSAFE TSYSPAYSAFE + FLEX BILLINGPAYSAFE TSYS TSYS PAYSAFE + FLEX BILLING PAYSAFE + FLEX BILLING PAYSAFE PAYSAFE Processing CapabilitiesOnline payments✓✓✓In-person payments✓In betaBank-to-bank payments (ACH/EFT)✗✓✓CurrenciesUSD✓✓✓CAD✗✗✓CapabilitiesApple PayIn-person payments onlyOnline and in-person paymentsIn-person payments onlyPlatform fees✗Online payments onlyCard funding typeAvailable in Q1 '25Available in API responseMerchant PricingCustom pricing for Amex payments✗✓✓Custom pricing for in-person payments✗✓✗Pricing template processing timeInstantInstantUp to 7 business daysPricing change processing timeImplemented for the following month, if requested before the 12th of the monthInstantUp to 7 business daysBilling FrequencyDaily✗✓✓Weekly✗✓✗Monthly✓✓✓Settlement TimesNext-day funding (NDF)7:30pm EST4pm EST; payments are batched multiple times a dayStandard payout speed2:30am EST12am EST; payments are batched multiple times a dayPayout SpeedNext-day funding (NDF)DefaultIn beta, requires UW approvalRequires UW approvalT+0High-risk merchantsDefaultRequires UW approvalT+1High-risk merchantsHigh-risk merchantsDefaultPayout TypeGross payouts✓In beta✗Net payouts✗✓✓Payout FrequencyDaily✓✓✓Weekly✗✓✓Monthly✗✓✓ReportingTransaction-level fee details✗✓✓Interchange qualification data✓✓✓OnboardingMerchant onboarding via API✓✓Expected approval timesSame day, unless pended for additional information.Credit checksA soft credit check will be performed on the application signee.A soft credit check will be performed on the application signee.Agreements and digital signatureMerchants can agree and sign by completing an in-app Docusign flow.Merchants can agree and sign by clicking to agree in the application.DocumentsMerchants classified as Charities or Religious Organizations who indicate 501(c)(3) status must upload a 501(c)(3) determination letter to submit their application.Documents are not required to submit the application. However, additional documentation may be requested after submission.RiskFunding holdsMerchants will receive an email notification from Tilled and TSYS. Document requests can be managed through the Dashboard or API to resolve the funding hold.Merchants will receive an email notification from Tilled. Document requests can be managed through the Dashboard or API to resolve the funding hold.DisputesDisputes can be managed through the Dashboard or API.Merchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb_dispatcherlogin@transfirst.com.Disputes can be managed through the Dashboard or API.In-person paymentsSupported countriesUSUS, CADDevicesValor VL100, VL110PAX A920, A920 Pro, and A80Custom pricing for in-person payments✗✓✗Manual capture✓✗On-device tipping✓✓Printed receiptsManaged through the Dashboard or APIManaged directly on the terminal readerCard tokenization✓Available in Q1 '25Real-time terminal monitoring✓✓Terminal management✓✓Point-to-point encryption (P2PE)✓✓ Processing Capabilities Processing Capabilities Processing Capabilities Online payments✓✓✓ Online payments [Online payments](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents) ✓ ✓ ✓ In-person payments✓In beta In-person payments [In-person payments](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments) ✓ In beta In beta Bank-to-bank payments (ACH/EFT)✗✓✓ Bank-to-bank payments (ACH/EFT) [Bank-to-bank payments (ACH/EFT)](https://docs.tilled.com/docs/payments/bank-to-bank/overview) ✗ ✓ ✓ Currencies Currencies Currencies USD✓✓✓ USD ✓ ✓ ✓ CAD✗✗✓ CAD ✗ ✗ ✓ Capabilities Capabilities Capabilities Apple PayIn-person payments onlyOnline and in-person paymentsIn-person payments only Apple Pay [Apple Pay](https://docs.tilled.com/docs/payments/card/applepay) In-person payments only Online and in-person payments In-person payments only Platform fees✗Online payments only Platform fees ✗ Online payments only Card funding typeAvailable in Q1 '25Available in API response Card funding type Available in Q1 '25 Available in API response Merchant Pricing Merchant Pricing [Merchant Pricing](https://docs.tilled.com/docs/merchants/merchant-pricing) Merchant Pricing Custom pricing for Amex payments✗✓✓ Custom pricing for Amex payments ✗ ✓ ✓ Custom pricing for in-person payments✗✓✗ Custom pricing for in-person payments ✗ ✓ ✗ Pricing template processing timeInstantInstantUp to 7 business days Pricing template processing time Instant Instant Up to 7 business days Pricing change processing timeImplemented for the following month, if requested before the 12th of the monthInstantUp to 7 business days Pricing change processing time Implemented for the following month, if requested before the 12th of the month Instant Up to 7 business days Billing Frequency Billing Frequency Billing Frequency Daily✗✓✓ Daily ✗ ✓ ✓ Weekly✗✓✗ Weekly ✗ ✓ ✗ Monthly✓✓✓ Monthly ✓ ✓ ✓ Settlement Times Settlement Times Settlement Times Next-day funding (NDF)7:30pm EST4pm EST; payments are batched multiple times a day Next-day funding (NDF) 7:30pm EST 4pm EST; payments are batched multiple times a day Standard payout speed2:30am EST12am EST; payments are batched multiple times a day Standard payout speed 2:30am EST 12am EST; payments are batched multiple times a day Payout Speed Payout Speed [Payout Speed](https://docs.tilled.com/docs/payouts#payout-speed) Payout Speed Next-day funding (NDF)DefaultIn beta, requires UW approvalRequires UW approval Next-day funding (NDF) Default In beta, requires UW approval In beta, requires UW approval Requires UW approval T+0High-risk merchantsDefaultRequires UW approval T+0 High-risk merchants Default Requires UW approval T+1High-risk merchantsHigh-risk merchantsDefault T+1 High-risk merchants High-risk merchants Default Payout Type Payout Type [Payout Type](https://docs.tilled.com/docs/payouts#payout-type) Payout Type Gross payouts✓In beta✗ Gross payouts ✓ In beta In beta ✗ Net payouts✗✓✓ Net payouts ✗ ✓ ✓ Payout Frequency Payout Frequency [Payout Frequency](https://docs.tilled.com/docs/payouts#payout-frequency) Payout Frequency Daily✓✓✓ Daily ✓ ✓ ✓ Weekly✗✓✓ Weekly ✗ ✓ ✓ Monthly✗✓✓ Monthly ✗ ✓ ✓ Reporting Reporting Reporting Transaction-level fee details✗✓✓ Transaction-level fee details ✗ ✓ ✓ Interchange qualification data✓✓✓ Interchange qualification data ✓ ✓ ✓ Onboarding Onboarding Onboarding Merchant onboarding via API✓✓ Merchant onboarding via API [Merchant onboarding via API](https://docs.tilled.com/docs/merchants/onboard-new-merchants) Merchant onboarding via API ✓ ✓ Expected approval timesSame day, unless pended for additional information. Expected approval times Same day, unless pended for additional information. Credit checksA soft credit check will be performed on the application signee.A soft credit check will be performed on the application signee. Credit checks A soft credit check will be performed on the application signee. A soft credit check will be performed on the application signee. Agreements and digital signatureMerchants can agree and sign by completing an in-app Docusign flow.Merchants can agree and sign by clicking to agree in the application. Agreements and digital signature Merchants can agree and sign by completing an in-app Docusign flow. Merchants can agree and sign by clicking to agree in the application. DocumentsMerchants classified as Charities or Religious Organizations who indicate 501(c)(3) status must upload a 501(c)(3) determination letter to submit their application.Documents are not required to submit the application. However, additional documentation may be requested after submission. Documents Merchants classified as Charities or Religious Organizations who indicate 501(c)(3) status must upload a 501(c)(3) determination letter to submit their application. Documents are not required to submit the application. However, additional documentation may be requested after submission. Risk Risk Risk Funding holdsMerchants will receive an email notification from Tilled and TSYS. Document requests can be managed through the Dashboard or API to resolve the funding hold.Merchants will receive an email notification from Tilled. Document requests can be managed through the Dashboard or API to resolve the funding hold. Funding holds Merchants will receive an email notification from Tilled and TSYS. Document requests can be managed through the Dashboard or API to resolve the funding hold. Tilled Document requests can be managed through the Dashboard or API to resolve the funding hold. Merchants will receive an email notification from Tilled. Document requests can be managed through the Dashboard or API to resolve the funding hold. Tilled Document requests can be managed through the Dashboard or API to resolve the funding hold. DisputesDisputes can be managed through the Dashboard or API.Merchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb_dispatcherlogin@transfirst.com.Disputes can be managed through the Dashboard or API. Disputes [Disputes](https://docs.tilled.com/docs/disputes) Disputes Disputes can be managed through the Dashboard or API.Merchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb_dispatcherlogin@transfirst.com. Merchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb_dispatcherlogin@transfirst.com. Tilled Disputes can be managed through the Dashboard or API. In-person payments In-person payments In-person payments Supported countriesUSUS, CAD Supported countries US US, CAD DevicesValor VL100, VL110PAX A920, A920 Pro, and A80 Devices Valor VL100, VL110 PAX A920, A920 Pro, and A80 Custom pricing for in-person payments✗✓✗ Custom pricing for in-person payments ✗ ✓ ✗ Manual capture✓✗ Manual capture [Manual capture](https://docs.tilled.com/docs/payments/card/manual-capture) Manual capture ✓ ✗ On-device tipping✓✓ On-device tipping [On-device tipping](https://docs.tilled.com/docs/payments/card/on-device-tipping) On-device tipping ✓ ✓ Printed receiptsManaged through the Dashboard or APIManaged directly on the terminal reader Printed receipts [Printed receipts](https://docs.tilled.com/docs/payments/card/receipts) Printed receipts Managed through the Dashboard or API Managed directly on the terminal reader Card tokenization✓Available in Q1 '25 Card tokenization ✓ Available in Q1 '25 Real-time terminal monitoring✓✓ Real-time terminal monitoring ✓ ✓ Terminal management✓✓ Terminal management ✓ ✓ Point-to-point encryption (P2PE)✓✓ Point-to-point encryption (P2PE) ✓ ✓ Last updated on February 6, 2025 February 6, 2025 Data MigrationMerchant Preferences [Data Migration](https://docs.tilled.com/docs/get-started/data-migration) [Merchant Preferences](https://docs.tilled.com/docs/merchants/merchant-preferences)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-preferences",
    "title": "Tilled",
    "content": "Merchant Preferences Customize merchant preferences within Tilled's various no-code modules: Onboarding: Tailor the hosted application to your software’s vertical. Payments: Restrict merchants from collecting new payments through Tilled's Merchant Dashboard. Notifications: Configure your merchants’ default email settings. Edit capabilities are only available to software platform owner and admin users. Customize Merchant Preferences OnboardingPaymentsNotificationsTailor the hosted merchant application to your software's vertical by customizing key fields, helping merchants complete their applications more quickly and accurately.The table below outlines all customizable fields in the hosted merchant application.APPLICATION FIELDCUSTOMIZATIONIndustrySelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.Business typeSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.Description of products and servicesEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.Processing volumesEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application.Configure hosted application preferencesTo configure the hosted merchant application:Navigate to AccountsLocate the Merchant Application Preferences card and click the Edit iconConfigure your preferences, including the industry, business type, and processing volumesClick the Save Application Preferences buttonLast updated on February 10, 2025Processor ComparisonMerchant Pricing Merchant Preferences Customize merchant preferences within Tilled's various no-code modules: Tilled's [no-code modules](https://docs.tilled.com/docs/get-started/integration-options#no-code-modules) Onboarding: Tailor the hosted application to your software’s vertical. Payments: Restrict merchants from collecting new payments through Tilled's Merchant Dashboard. Notifications: Configure your merchants’ default email settings. Onboarding: Tailor the hosted application to your software’s vertical. Onboarding: Payments: Restrict merchants from collecting new payments through Tilled's Merchant Dashboard. Payments: Tilled's Notifications: Configure your merchants’ default email settings. Notifications: Edit capabilities are only available to software platform owner and admin users. Customize Merchant Preferences [https://docs.tilled.com/docs/merchants/merchant-preferences#customize-merchant-preferences](https://docs.tilled.com/docs/merchants/merchant-preferences#customize-merchant-preferences) OnboardingPaymentsNotificationsTailor the hosted merchant application to your software's vertical by customizing key fields, helping merchants complete their applications more quickly and accurately.The table below outlines all customizable fields in the hosted merchant application.APPLICATION FIELDCUSTOMIZATIONIndustrySelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.Business typeSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.Description of products and servicesEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.Processing volumesEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application.Configure hosted application preferencesTo configure the hosted merchant application:Navigate to AccountsLocate the Merchant Application Preferences card and click the Edit iconConfigure your preferences, including the industry, business type, and processing volumesClick the Save Application Preferences button OnboardingPaymentsNotifications [Onboarding](https://docs.tilled.com/docs/merchants/merchant-preferences#onboarding) [Payments](https://docs.tilled.com/docs/merchants/merchant-preferences#payments) [Notifications](https://docs.tilled.com/docs/merchants/merchant-preferences#notifications) Tailor the hosted merchant application to your software's vertical by customizing key fields, helping merchants complete their applications more quickly and accurately.The table below outlines all customizable fields in the hosted merchant application.APPLICATION FIELDCUSTOMIZATIONIndustrySelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.Business typeSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.Description of products and servicesEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.Processing volumesEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application.Configure hosted application preferencesTo configure the hosted merchant application:Navigate to AccountsLocate the Merchant Application Preferences card and click the Edit iconConfigure your preferences, including the industry, business type, and processing volumesClick the Save Application Preferences button Tailor the hosted merchant application to your software's vertical by customizing key fields, helping merchants complete their applications more quickly and accurately. The table below outlines all customizable fields in the hosted merchant application. APPLICATION FIELDCUSTOMIZATIONIndustrySelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.Business typeSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.Description of products and servicesEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.Processing volumesEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application. APPLICATION FIELDCUSTOMIZATION APPLICATION FIELDCUSTOMIZATION APPLICATION FIELD APPLICATION FIELD CUSTOMIZATION CUSTOMIZATION IndustrySelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.Business typeSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.Description of products and servicesEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.Processing volumesEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application. IndustrySelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant. Industry Select all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant. Business typeSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant. Business type Select all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant. Description of products and servicesEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text. Description of products and services Enter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text. Processing volumesEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application. Processing volumes Enter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application. Configure hosted application preferences To configure the hosted merchant application: Navigate to AccountsLocate the Merchant Application Preferences card and click the Edit iconConfigure your preferences, including the industry, business type, and processing volumesClick the Save Application Preferences button Navigate to Accounts Accounts Locate the Merchant Application Preferences card and click the Edit icon Merchant Application Preferences Edit Configure your preferences, including the industry, business type, and processing volumes Click the Save Application Preferences button Save Application Preferences Last updated on February 10, 2025 February 10, 2025 Processor ComparisonMerchant Pricing [Processor Comparison](https://docs.tilled.com/docs/get-started/processor-comparison) [Merchant Pricing](https://docs.tilled.com/docs/merchants/merchant-pricing)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-pricing",
    "title": "Tilled",
    "content": "Merchant Pricing Merchant pricing is managed using pricing templates, which serve as a repository of pricing information for a specific payment method. Configure Merchant Pricing Create pricing templateSoftware platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com.To create a new pricing template: Navigate to Pricing Templates Click the Create Template button Select the payment method type Click the Enter Pricing Template Details button Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button After reviewing, click the Submit button Once the pricing template is created and the status is active, it can be applied to new or existing merchants.Apply pricing template to merchantNew merchantsThe pricing template will need to be supplied before the merchant application is signed and submitted. If the application is created through the Dashboard, the pricing template will need to be selected at application creation. Refer to our Onboarding guide for more details on the merchant onboarding process.Existing merchantsTo update an existing merchant’s pricing, email support@tilled.com with the desired pricing template to be applied. Fees for Card Payments Merchants processing card payments can be set up on a flat-rate or interchange++ model. Flat-rate model The flat-rate pricing model involves a fixed discount rate and transaction fee that merchants pay on every transaction. Interchange++ model The interchange++ model includes three main components: Interchange fees: These are the fees charged by the card-issuing banks and are paid to the card issuers. The rates vary depending on the type and brand of card used (e.g., Visa, MasterCard, etc.), the category of the merchant, and the specifics of the transaction (e.g., in-person, online). Pass-through fees: These are fees charged by the card networks (e.g., Visa, MasterCard, etc.). Like interchange fees, they vary by the network. Markup: This is the only component of the interchange++ model that is customizable and commissionable. When creating a pricing template, the markup is split out as the discount rate and transaction fee. Customizable fees The table below details all fees that can be customized for merchants processing card payments. Depending on the processor and payment method selected when creating a pricing template (card-not-present vs card-present), some fee options may be unavailable. ℹ️For TSYS merchants, unique pricing for Amex payments is not currently available. FEE TYPEDESCRIPTIONBILLING TRIGGERProcessing FeesDiscount rateIncurred every time a charge is processed, unless voided.Payment settlesTransaction feeIncurred every time a charge or refund is initiated.Payment initiatedDispute FeesRetrieval feeIncurred when a customer's bank requests additional information in order to verify a transaction.Dispute status = warning_needs_responseChargeback feeIncurred when a transaction is formally disputed by the customer.Dispute status = needs_responseReversal feeIncurred when a dispute is reversed and funds are returned to the merchant.Dispute status = wonAccount FeesMonthly account feeMonthly fee for maintaining a merchant card account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in card fees.If total monthly fees are below the set minimumBank account change feeIncurred when a merchant updates their bank account information.Bank account information is updatedOther FeesCard Account Updater feeIncurred when card information is successfully updated using the Card Account Updater service.Card information is updated successfullyMonthly terminal feeMonthly fee for maintaining a terminal reader. This fee is specific to card-present pricing templates.Last day of the month Fees for Bank-to-Bank PaymentsMerchants processing bank-to-bank payments are set up on a flat-fee model, where a fixed transaction fee is applied to each payment.Customizable feesThe table below details all fees that can be customized for merchants processing bank-to-bank payments.FEE TYPEDESCRIPTIONBILLING TRIGGERTransaction feeIncurred each time a bank-to-bank payment is initiated.Payment initiatedReturn feeIncurred when a bank-to-bank payment is rejected.ACH status = returnedAccount FeesMonthly account feeMonthly fee for maintaining a merchant ACH/EFT account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees.If total monthly fees are below the set minimum Manage Merchant Pricing Create pricing template Software platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com. To create a new pricing template: Navigate to Pricing Templates Click the Create Template button Select the payment method type Click the Enter Pricing Template Details button Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button After reviewing, click the Submit button Edit pricing template Only the nickname of a pricing template can be edited. To edit the nickname: Navigate to Pricing Templates Select the pricing template you wish to edit Click on the Edit icon next to the pricing template nickname Update the nickname Click on the Checkmark icon to save the new nickname Archive pricing template A pricing template can only be archived if it is not actively associated with any merchants. To archive a pricing template: Navigate to Pricing Template Select the pricing template you wish to archive Click the Archive Pricing Template button View merchant pricing To view an existing merchant’s pricing: Navigate to Merchants Select the respective merchant Click on the Processing Details tab Refer to the Pricing card Update merchant pricing To update an existing merchant’s pricing, email support@tilled.com with the desired pricing template to be applied. Pricing States Pricing templates STATUSDESCRIPTIONpendingThe pricing template is being processed. It cannot yet be used to onboard new merchants.activeThe pricing template can be used to onboard new merchants and update pricing for existing merchants.archivedThe pricing template cannot be used to onboard new merchants or update pricing for existing merchants. Merchant pricing STATUSDESCRIPTIONpendingThe merchant's pricing is in the process of being updated. The merchant is not yet being billed according to the shown pricing.activeThe merchant is actively being billed according to the shown pricing. FAQsIs zero-cost processing available to merchants?Zero-cost processing is only available to software platforms with a 100% revenue share. If you're offering zero-cost processing, keep in mind these key differences between billing owners:Flex Billing: You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0.Processor Billing: Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0.To set up a merchant on zero-cost processing, simply set the applicable fees to $0 when creating a pricing template.Last updated on March 10, 2025Merchant PreferencesOnboard Merchants Merchant Pricing Merchant pricing is managed using pricing templates, which serve as a repository of pricing information for a specific payment method. Configure Merchant Pricing [https://docs.tilled.com/docs/merchants/merchant-pricing#configure-merchant-pricing](https://docs.tilled.com/docs/merchants/merchant-pricing#configure-merchant-pricing) Create pricing templateSoftware platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com.To create a new pricing template: Navigate to Pricing Templates Click the Create Template button Select the payment method type Click the Enter Pricing Template Details button Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button After reviewing, click the Submit button Once the pricing template is created and the status is active, it can be applied to new or existing merchants.Apply pricing template to merchantNew merchantsThe pricing template will need to be supplied before the merchant application is signed and submitted. If the application is created through the Dashboard, the pricing template will need to be selected at application creation. Refer to our Onboarding guide for more details on the merchant onboarding process.Existing merchantsTo update an existing merchant’s pricing, email support@tilled.com with the desired pricing template to be applied. Create pricing template [https://docs.tilled.com/docs/merchants/merchant-pricing#create-pricing-template](https://docs.tilled.com/docs/merchants/merchant-pricing#create-pricing-template) Software platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com. Software platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com. [support@tilled.com](mailto:support@tilled.com) To create a new pricing template: Navigate to Pricing Templates Click the Create Template button Select the payment method type Click the Enter Pricing Template Details button Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button After reviewing, click the Submit button Navigate to Pricing Templates Pricing Templates Click the Create Template button Create Template Select the payment method type Click the Enter Pricing Template Details button Enter Pricing Template Details Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button Review Pricing Template After reviewing, click the Submit button Submit Once the pricing template is created and the status is active, it can be applied to new or existing merchants. active Apply pricing template to merchant [https://docs.tilled.com/docs/merchants/merchant-pricing#apply-pricing-template-to-merchant](https://docs.tilled.com/docs/merchants/merchant-pricing#apply-pricing-template-to-merchant) New merchants New merchants The pricing template will need to be supplied before the merchant application is signed and submitted. If the application is created through the Dashboard, the pricing template will need to be selected at application creation. Refer to our Onboarding guide for more details on the merchant onboarding process. [Onboarding guide](https://docs.tilled.com/docs/merchants/onboard-new-merchants) Existing merchants Existing merchants To update an existing merchant’s pricing, email support@tilled.com with the desired pricing template to be applied. [support@tilled.com](mailto:support@tilled.com) Fees for Card Payments [https://docs.tilled.com/docs/merchants/merchant-pricing#fees-for-card-payments](https://docs.tilled.com/docs/merchants/merchant-pricing#fees-for-card-payments) Merchants processing card payments can be set up on a flat-rate or interchange++ model. Flat-rate model [https://docs.tilled.com/docs/merchants/merchant-pricing#flat-rate-model](https://docs.tilled.com/docs/merchants/merchant-pricing#flat-rate-model) The flat-rate pricing model involves a fixed discount rate and transaction fee that merchants pay on every transaction. Interchange++ model [https://docs.tilled.com/docs/merchants/merchant-pricing#interchange-model](https://docs.tilled.com/docs/merchants/merchant-pricing#interchange-model) The interchange++ model includes three main components: Interchange fees: These are the fees charged by the card-issuing banks and are paid to the card issuers. The rates vary depending on the type and brand of card used (e.g., Visa, MasterCard, etc.), the category of the merchant, and the specifics of the transaction (e.g., in-person, online). Pass-through fees: These are fees charged by the card networks (e.g., Visa, MasterCard, etc.). Like interchange fees, they vary by the network. Markup: This is the only component of the interchange++ model that is customizable and commissionable. When creating a pricing template, the markup is split out as the discount rate and transaction fee. Interchange fees: These are the fees charged by the card-issuing banks and are paid to the card issuers. The rates vary depending on the type and brand of card used (e.g., Visa, MasterCard, etc.), the category of the merchant, and the specifics of the transaction (e.g., in-person, online). Interchange fees: Pass-through fees: These are fees charged by the card networks (e.g., Visa, MasterCard, etc.). Like interchange fees, they vary by the network. Pass-through fees: Markup: This is the only component of the interchange++ model that is customizable and commissionable. When creating a pricing template, the markup is split out as the discount rate and transaction fee. Markup: discount rate transaction fee Customizable fees [https://docs.tilled.com/docs/merchants/merchant-pricing#customizable-fees](https://docs.tilled.com/docs/merchants/merchant-pricing#customizable-fees) The table below details all fees that can be customized for merchants processing card payments. Depending on the processor and payment method selected when creating a pricing template (card-not-present vs card-present), some fee options may be unavailable. ℹ️For TSYS merchants, unique pricing for Amex payments is not currently available. ℹ️ For TSYS merchants, unique pricing for Amex payments is not currently available. For TSYS merchants, unique pricing for Amex payments is not currently available. For TSYS merchants, unique pricing for Amex payments is not currently available. [TSYS merchants](https://docs.tilled.com/docs/get-started/processor-comparison) FEE TYPEDESCRIPTIONBILLING TRIGGERProcessing FeesDiscount rateIncurred every time a charge is processed, unless voided.Payment settlesTransaction feeIncurred every time a charge or refund is initiated.Payment initiatedDispute FeesRetrieval feeIncurred when a customer's bank requests additional information in order to verify a transaction.Dispute status = warning_needs_responseChargeback feeIncurred when a transaction is formally disputed by the customer.Dispute status = needs_responseReversal feeIncurred when a dispute is reversed and funds are returned to the merchant.Dispute status = wonAccount FeesMonthly account feeMonthly fee for maintaining a merchant card account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in card fees.If total monthly fees are below the set minimumBank account change feeIncurred when a merchant updates their bank account information.Bank account information is updatedOther FeesCard Account Updater feeIncurred when card information is successfully updated using the Card Account Updater service.Card information is updated successfullyMonthly terminal feeMonthly fee for maintaining a terminal reader. This fee is specific to card-present pricing templates.Last day of the month FEE TYPEDESCRIPTIONBILLING TRIGGER FEE TYPEDESCRIPTIONBILLING TRIGGER FEE TYPE FEE TYPE DESCRIPTION DESCRIPTION BILLING TRIGGER BILLING TRIGGER Processing FeesDiscount rateIncurred every time a charge is processed, unless voided.Payment settlesTransaction feeIncurred every time a charge or refund is initiated.Payment initiatedDispute FeesRetrieval feeIncurred when a customer's bank requests additional information in order to verify a transaction.Dispute status = warning_needs_responseChargeback feeIncurred when a transaction is formally disputed by the customer.Dispute status = needs_responseReversal feeIncurred when a dispute is reversed and funds are returned to the merchant.Dispute status = wonAccount FeesMonthly account feeMonthly fee for maintaining a merchant card account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in card fees.If total monthly fees are below the set minimumBank account change feeIncurred when a merchant updates their bank account information.Bank account information is updatedOther FeesCard Account Updater feeIncurred when card information is successfully updated using the Card Account Updater service.Card information is updated successfullyMonthly terminal feeMonthly fee for maintaining a terminal reader. This fee is specific to card-present pricing templates.Last day of the month Processing Fees Processing Fees Processing Fees Discount rateIncurred every time a charge is processed, unless voided.Payment settles Discount rate Incurred every time a charge is processed, unless voided. Payment settles Transaction feeIncurred every time a charge or refund is initiated.Payment initiated Transaction fee Incurred every time a charge or refund is initiated. Payment initiated Dispute Fees Dispute Fees Dispute Fees Retrieval feeIncurred when a customer's bank requests additional information in order to verify a transaction.Dispute status = warning_needs_response Retrieval fee Incurred when a customer's bank requests additional information in order to verify a transaction. Dispute status = warning_needs_response warning_needs_response Chargeback feeIncurred when a transaction is formally disputed by the customer.Dispute status = needs_response Chargeback fee Incurred when a transaction is formally disputed by the customer. Dispute status = needs_response needs_response Reversal feeIncurred when a dispute is reversed and funds are returned to the merchant.Dispute status = won Reversal fee Incurred when a dispute is reversed and funds are returned to the merchant. Dispute status = won won Account Fees Account Fees Account Fees Monthly account feeMonthly fee for maintaining a merchant card account.Last day of the month Monthly account fee Monthly fee for maintaining a merchant card account. Last day of the month Monthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in card fees.If total monthly fees are below the set minimum Monthly minimum fee Fee reflecting the minimum monthly charge a merchant must meet in card fees. If total monthly fees are below the set minimum Bank account change feeIncurred when a merchant updates their bank account information.Bank account information is updated Bank account change fee Incurred when a merchant updates their bank account information. Bank account information is updated Other Fees Other Fees Other Fees Card Account Updater feeIncurred when card information is successfully updated using the Card Account Updater service.Card information is updated successfully Card Account Updater fee Incurred when card information is successfully updated using the Card Account Updater service. Card information is updated successfully Monthly terminal feeMonthly fee for maintaining a terminal reader. This fee is specific to card-present pricing templates.Last day of the month Monthly terminal fee Monthly fee for maintaining a terminal reader. This fee is specific to card-present pricing templates. Last day of the month Fees for Bank-to-Bank PaymentsMerchants processing bank-to-bank payments are set up on a flat-fee model, where a fixed transaction fee is applied to each payment.Customizable feesThe table below details all fees that can be customized for merchants processing bank-to-bank payments.FEE TYPEDESCRIPTIONBILLING TRIGGERTransaction feeIncurred each time a bank-to-bank payment is initiated.Payment initiatedReturn feeIncurred when a bank-to-bank payment is rejected.ACH status = returnedAccount FeesMonthly account feeMonthly fee for maintaining a merchant ACH/EFT account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees.If total monthly fees are below the set minimum Fees for Bank-to-Bank Payments [https://docs.tilled.com/docs/merchants/merchant-pricing#fees-for-bank-to-bank-payments](https://docs.tilled.com/docs/merchants/merchant-pricing#fees-for-bank-to-bank-payments) Merchants processing bank-to-bank payments are set up on a flat-fee model, where a fixed transaction fee is applied to each payment. Customizable fees [https://docs.tilled.com/docs/merchants/merchant-pricing#customizable-fees-1](https://docs.tilled.com/docs/merchants/merchant-pricing#customizable-fees-1) The table below details all fees that can be customized for merchants processing bank-to-bank payments. FEE TYPEDESCRIPTIONBILLING TRIGGERTransaction feeIncurred each time a bank-to-bank payment is initiated.Payment initiatedReturn feeIncurred when a bank-to-bank payment is rejected.ACH status = returnedAccount FeesMonthly account feeMonthly fee for maintaining a merchant ACH/EFT account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees.If total monthly fees are below the set minimum FEE TYPEDESCRIPTIONBILLING TRIGGER FEE TYPEDESCRIPTIONBILLING TRIGGER FEE TYPE FEE TYPE DESCRIPTION DESCRIPTION BILLING TRIGGER BILLING TRIGGER Transaction feeIncurred each time a bank-to-bank payment is initiated.Payment initiatedReturn feeIncurred when a bank-to-bank payment is rejected.ACH status = returnedAccount FeesMonthly account feeMonthly fee for maintaining a merchant ACH/EFT account.Last day of the monthMonthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees.If total monthly fees are below the set minimum Transaction feeIncurred each time a bank-to-bank payment is initiated.Payment initiated Transaction fee Incurred each time a bank-to-bank payment is initiated. Payment initiated Return feeIncurred when a bank-to-bank payment is rejected.ACH status = returned Return fee Incurred when a bank-to-bank payment is rejected. ACH status = returned returned Account Fees Account Fees Account Fees Monthly account feeMonthly fee for maintaining a merchant ACH/EFT account.Last day of the month Monthly account fee Monthly fee for maintaining a merchant ACH/EFT account. Last day of the month Monthly minimum feeFee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees.If total monthly fees are below the set minimum Monthly minimum fee Fee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees. If total monthly fees are below the set minimum Manage Merchant Pricing [https://docs.tilled.com/docs/merchants/merchant-pricing#manage-merchant-pricing](https://docs.tilled.com/docs/merchants/merchant-pricing#manage-merchant-pricing) Create pricing template [https://docs.tilled.com/docs/merchants/merchant-pricing#create-pricing-template-1](https://docs.tilled.com/docs/merchants/merchant-pricing#create-pricing-template-1) Software platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com. Software platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com. Software platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email support@tilled.com. [support@tilled.com](mailto:support@tilled.com) To create a new pricing template: Navigate to Pricing Templates Click the Create Template button Select the payment method type Click the Enter Pricing Template Details button Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button After reviewing, click the Submit button Navigate to Pricing Templates Pricing Templates Click the Create Template button Create Template Select the payment method type Click the Enter Pricing Template Details button Enter Pricing Template Details Enter the template nickname, fee type, currency, and fee details Click the Review Pricing Template button Review Pricing Template After reviewing, click the Submit button Submit Edit pricing template [https://docs.tilled.com/docs/merchants/merchant-pricing#edit-pricing-template](https://docs.tilled.com/docs/merchants/merchant-pricing#edit-pricing-template) Only the nickname of a pricing template can be edited. To edit the nickname: Navigate to Pricing Templates Select the pricing template you wish to edit Click on the Edit icon next to the pricing template nickname Update the nickname Click on the Checkmark icon to save the new nickname Navigate to Pricing Templates Pricing Templates Select the pricing template you wish to edit Click on the Edit icon next to the pricing template nickname Edit Update the nickname Click on the Checkmark icon to save the new nickname Checkmark Archive pricing template [https://docs.tilled.com/docs/merchants/merchant-pricing#archive-pricing-template](https://docs.tilled.com/docs/merchants/merchant-pricing#archive-pricing-template) A pricing template can only be archived if it is not actively associated with any merchants. To archive a pricing template: Navigate to Pricing Template Select the pricing template you wish to archive Click the Archive Pricing Template button Navigate to Pricing Template Pricing Template Select the pricing template you wish to archive Click the Archive Pricing Template button Archive Pricing Template View merchant pricing [https://docs.tilled.com/docs/merchants/merchant-pricing#view-merchant-pricing](https://docs.tilled.com/docs/merchants/merchant-pricing#view-merchant-pricing) To view an existing merchant’s pricing: Navigate to Merchants Select the respective merchant Click on the Processing Details tab Refer to the Pricing card Navigate to Merchants Merchants Select the respective merchant Click on the Processing Details tab Processing Details Refer to the Pricing card Pricing Update merchant pricing [https://docs.tilled.com/docs/merchants/merchant-pricing#update-merchant-pricing](https://docs.tilled.com/docs/merchants/merchant-pricing#update-merchant-pricing) To update an existing merchant’s pricing, email support@tilled.com with the desired pricing template to be applied. [support@tilled.com](mailto:support@tilled.com) Pricing States [https://docs.tilled.com/docs/merchants/merchant-pricing#pricing-states](https://docs.tilled.com/docs/merchants/merchant-pricing#pricing-states) Pricing templates [https://docs.tilled.com/docs/merchants/merchant-pricing#pricing-templates](https://docs.tilled.com/docs/merchants/merchant-pricing#pricing-templates) STATUSDESCRIPTIONpendingThe pricing template is being processed. It cannot yet be used to onboard new merchants.activeThe pricing template can be used to onboard new merchants and update pricing for existing merchants.archivedThe pricing template cannot be used to onboard new merchants or update pricing for existing merchants. STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION pendingThe pricing template is being processed. It cannot yet be used to onboard new merchants.activeThe pricing template can be used to onboard new merchants and update pricing for existing merchants.archivedThe pricing template cannot be used to onboard new merchants or update pricing for existing merchants. pendingThe pricing template is being processed. It cannot yet be used to onboard new merchants. pending pending The pricing template is being processed. It cannot yet be used to onboard new merchants. activeThe pricing template can be used to onboard new merchants and update pricing for existing merchants. active active The pricing template can be used to onboard new merchants and update pricing for existing merchants. archivedThe pricing template cannot be used to onboard new merchants or update pricing for existing merchants. archived archived The pricing template cannot be used to onboard new merchants or update pricing for existing merchants. Merchant pricing [https://docs.tilled.com/docs/merchants/merchant-pricing#merchant-pricing](https://docs.tilled.com/docs/merchants/merchant-pricing#merchant-pricing) STATUSDESCRIPTIONpendingThe merchant's pricing is in the process of being updated. The merchant is not yet being billed according to the shown pricing.activeThe merchant is actively being billed according to the shown pricing. STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION pendingThe merchant's pricing is in the process of being updated. The merchant is not yet being billed according to the shown pricing.activeThe merchant is actively being billed according to the shown pricing. pendingThe merchant's pricing is in the process of being updated. The merchant is not yet being billed according to the shown pricing. pending pending The merchant's pricing is in the process of being updated. The merchant is not yet being billed according to the shown pricing. activeThe merchant is actively being billed according to the shown pricing. active active The merchant is actively being billed according to the shown pricing. FAQsIs zero-cost processing available to merchants?Zero-cost processing is only available to software platforms with a 100% revenue share. If you're offering zero-cost processing, keep in mind these key differences between billing owners:Flex Billing: You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0.Processor Billing: Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0.To set up a merchant on zero-cost processing, simply set the applicable fees to $0 when creating a pricing template. FAQs Is zero-cost processing available to merchants?Zero-cost processing is only available to software platforms with a 100% revenue share. If you're offering zero-cost processing, keep in mind these key differences between billing owners:Flex Billing: You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0.Processor Billing: Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0.To set up a merchant on zero-cost processing, simply set the applicable fees to $0 when creating a pricing template. Is zero-cost processing available to merchants? Is zero-cost processing available to merchants? [https://docs.tilled.com/docs/merchants/merchant-pricing#faq-is-zero-cost-processing-available-to-merchants](https://docs.tilled.com/docs/merchants/merchant-pricing#faq-is-zero-cost-processing-available-to-merchants) Zero-cost processing is only available to software platforms with a 100% revenue share. If you're offering zero-cost processing, keep in mind these key differences between billing owners:Flex Billing: You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0.Processor Billing: Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0.To set up a merchant on zero-cost processing, simply set the applicable fees to $0 when creating a pricing template. Flex Billing: You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0.Processor Billing: Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0. Flex Billing: You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0. Flex Billing: Processor Billing: Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0. Processor Billing: Last updated on March 10, 2025 March 10, 2025 Merchant PreferencesOnboard Merchants [Merchant Preferences](https://docs.tilled.com/docs/merchants/merchant-preferences) [Onboard Merchants](https://docs.tilled.com/docs/merchants/onboard-new-merchants)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/onboard-new-merchants",
    "title": "Tilled",
    "content": "Merchant Onboarding Onboard new merchants through Tilled's hosted application or build a custom onboarding experience using the OnboardingAPI. To determine which option is best for you, review our onboarding integration options. Onboard New Merchant DashboardAPIThe merchant onboarding process can be fully managed through the Partner Dashboard.Create merchant applicationApplications created through the Dashboard utilize the Tilled-hosted merchant application. To create a merchant application:Navigate to Merchants and click the Add Merchant buttonEnter the business name and business owner’s emailSelect the region, payment methods, and merchant pricingClick the Add Merchant buttonPre-fill merchant application (optional)Merchant applications with the created or started status can be pre-filled and edited on behalf of the merchant. To edit the merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab and click the Edit buttonEdit the respective fields and click the Save and Continue buttonClick Done EditingShare merchant applicationTo share the merchant application with a business representative:Navigate to Merchants, locate the merchant, and click the Share iconEnter the business representative’s email addressClick the Copy URL or Share Via Email buttonOnce shared, the merchant will be navigated to the Tilled-hosted application.Complete merchant applicationThe business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation.To monitor the progress of a merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab Onboarding Application States STATUSDESCRIPTIONcreatedOnboarding application has been createdstartedMerchant has begun filling out the applicationsubmittedOnboarding application has been submitted and is awaiting evaluation from UnderwritingactiveMerchant has been approved to process paymentsdisabledMerchant account has been disabled due to suspension or terminationin_reviewOnboarding application is under review; additional documentation may be requestedrejectedOnboarding application has been rejected by UnderwritingwithdrawnOnboarding application has been withdrawn Manage Merchant Applications View application To view a merchant application in the Dashboard: Navigate to Merchants Select the desired merchant Click the Merchant App tab Delete application Merchant applications can only be deleted if the application has not yet been submitted. To delete a merchant application via the Dashboard: Navigate to Merchants Select the desired merchant Click the Trash icon Select the Delete Application button FAQsDoes Tilled support multi-location merchants?Yes, merchant users can manage multiple accounts with a single login. To grant a user access to multiple accounts, simply use the same email address when inviting them to each account. Once the user logs in, they will be able to seamlessly toggle between accounts.Last updated on March 10, 2025Merchant PricingAccount Requirements Merchant Onboarding Onboard new merchants through Tilled's hosted application or build a custom onboarding experience using the OnboardingAPI. To determine which option is best for you, review our onboarding integration options. Tilled's [OnboardingAPI](https://docs.tilled.com/api-reference#tag/onboarding) API [onboarding integration options](https://docs.tilled.com/docs/get-started/integration-options) Onboard New Merchant [https://docs.tilled.com/docs/merchants/onboard-new-merchants#onboard-new-merchant](https://docs.tilled.com/docs/merchants/onboard-new-merchants#onboard-new-merchant) DashboardAPIThe merchant onboarding process can be fully managed through the Partner Dashboard.Create merchant applicationApplications created through the Dashboard utilize the Tilled-hosted merchant application. To create a merchant application:Navigate to Merchants and click the Add Merchant buttonEnter the business name and business owner’s emailSelect the region, payment methods, and merchant pricingClick the Add Merchant buttonPre-fill merchant application (optional)Merchant applications with the created or started status can be pre-filled and edited on behalf of the merchant. To edit the merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab and click the Edit buttonEdit the respective fields and click the Save and Continue buttonClick Done EditingShare merchant applicationTo share the merchant application with a business representative:Navigate to Merchants, locate the merchant, and click the Share iconEnter the business representative’s email addressClick the Copy URL or Share Via Email buttonOnce shared, the merchant will be navigated to the Tilled-hosted application.Complete merchant applicationThe business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation.To monitor the progress of a merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab DashboardAPI [Dashboard](https://docs.tilled.com/docs/merchants/onboard-new-merchants#dashboard) [API](https://docs.tilled.com/docs/merchants/onboard-new-merchants#api) The merchant onboarding process can be fully managed through the Partner Dashboard.Create merchant applicationApplications created through the Dashboard utilize the Tilled-hosted merchant application. To create a merchant application:Navigate to Merchants and click the Add Merchant buttonEnter the business name and business owner’s emailSelect the region, payment methods, and merchant pricingClick the Add Merchant buttonPre-fill merchant application (optional)Merchant applications with the created or started status can be pre-filled and edited on behalf of the merchant. To edit the merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab and click the Edit buttonEdit the respective fields and click the Save and Continue buttonClick Done EditingShare merchant applicationTo share the merchant application with a business representative:Navigate to Merchants, locate the merchant, and click the Share iconEnter the business representative’s email addressClick the Copy URL or Share Via Email buttonOnce shared, the merchant will be navigated to the Tilled-hosted application.Complete merchant applicationThe business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation.To monitor the progress of a merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab The merchant onboarding process can be fully managed through the Partner Dashboard. Create merchant applicationApplications created through the Dashboard utilize the Tilled-hosted merchant application. To create a merchant application:Navigate to Merchants and click the Add Merchant buttonEnter the business name and business owner’s emailSelect the region, payment methods, and merchant pricingClick the Add Merchant buttonPre-fill merchant application (optional)Merchant applications with the created or started status can be pre-filled and edited on behalf of the merchant. To edit the merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab and click the Edit buttonEdit the respective fields and click the Save and Continue buttonClick Done EditingShare merchant applicationTo share the merchant application with a business representative:Navigate to Merchants, locate the merchant, and click the Share iconEnter the business representative’s email addressClick the Copy URL or Share Via Email buttonOnce shared, the merchant will be navigated to the Tilled-hosted application.Complete merchant applicationThe business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation.To monitor the progress of a merchant application:Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab Create merchant application Applications created through the Dashboard utilize the Tilled-hosted merchant application. To create a merchant application: Tilled Navigate to Merchants and click the Add Merchant buttonEnter the business name and business owner’s emailSelect the region, payment methods, and merchant pricingClick the Add Merchant button Navigate to Merchants and click the Add Merchant button Merchants Add Merchant Enter the business name and business owner’s email Select the region, payment methods, and merchant pricing Click the Add Merchant button Add Merchant Pre-fill merchant application (optional) Merchant applications with the created or started status can be pre-filled and edited on behalf of the merchant. To edit the merchant application: created started Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab and click the Edit buttonEdit the respective fields and click the Save and Continue buttonClick Done Editing Navigate to Merchants and select the desired merchant Merchants Navigate to the Merchant App tab and click the Edit button Merchant App Edit Edit the respective fields and click the Save and Continue button Save and Continue Click Done Editing Done Editing Share merchant application To share the merchant application with a business representative: Navigate to Merchants, locate the merchant, and click the Share iconEnter the business representative’s email addressClick the Copy URL or Share Via Email button Navigate to Merchants, locate the merchant, and click the Share icon Merchants Share Enter the business representative’s email address Click the Copy URL or Share Via Email button Copy URL Share Via Email Once shared, the merchant will be navigated to the Tilled-hosted application. Tilled Complete merchant application The business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation. To monitor the progress of a merchant application: Navigate to Merchants and select the desired merchantNavigate to the Merchant App tab Navigate to Merchants and select the desired merchant Merchants Navigate to the Merchant App tab Merchant App Onboarding Application States [https://docs.tilled.com/docs/merchants/onboard-new-merchants#onboarding-application-states](https://docs.tilled.com/docs/merchants/onboard-new-merchants#onboarding-application-states) STATUSDESCRIPTIONcreatedOnboarding application has been createdstartedMerchant has begun filling out the applicationsubmittedOnboarding application has been submitted and is awaiting evaluation from UnderwritingactiveMerchant has been approved to process paymentsdisabledMerchant account has been disabled due to suspension or terminationin_reviewOnboarding application is under review; additional documentation may be requestedrejectedOnboarding application has been rejected by UnderwritingwithdrawnOnboarding application has been withdrawn STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION createdOnboarding application has been createdstartedMerchant has begun filling out the applicationsubmittedOnboarding application has been submitted and is awaiting evaluation from UnderwritingactiveMerchant has been approved to process paymentsdisabledMerchant account has been disabled due to suspension or terminationin_reviewOnboarding application is under review; additional documentation may be requestedrejectedOnboarding application has been rejected by UnderwritingwithdrawnOnboarding application has been withdrawn createdOnboarding application has been created created created Onboarding application has been created startedMerchant has begun filling out the application started started Merchant has begun filling out the application submittedOnboarding application has been submitted and is awaiting evaluation from Underwriting submitted submitted Onboarding application has been submitted and is awaiting evaluation from Underwriting activeMerchant has been approved to process payments active active Merchant has been approved to process payments disabledMerchant account has been disabled due to suspension or termination disabled disabled Merchant account has been disabled due to suspension or termination in_reviewOnboarding application is under review; additional documentation may be requested in_review in_review Onboarding application is under review; additional documentation may be requested rejectedOnboarding application has been rejected by Underwriting rejected rejected Onboarding application has been rejected by Underwriting withdrawnOnboarding application has been withdrawn withdrawn withdrawn Onboarding application has been withdrawn Manage Merchant Applications [https://docs.tilled.com/docs/merchants/onboard-new-merchants#manage-merchant-applications](https://docs.tilled.com/docs/merchants/onboard-new-merchants#manage-merchant-applications) View application [https://docs.tilled.com/docs/merchants/onboard-new-merchants#view-application](https://docs.tilled.com/docs/merchants/onboard-new-merchants#view-application) To view a merchant application in the Dashboard: Navigate to Merchants Select the desired merchant Click the Merchant App tab Navigate to Merchants Merchants Select the desired merchant Click the Merchant App tab Merchant App Delete application [https://docs.tilled.com/docs/merchants/onboard-new-merchants#delete-application](https://docs.tilled.com/docs/merchants/onboard-new-merchants#delete-application) Merchant applications can only be deleted if the application has not yet been submitted. To delete a merchant application via the Dashboard: Navigate to Merchants Select the desired merchant Click the Trash icon Select the Delete Application button Navigate to Merchants Merchants Select the desired merchant Click the Trash icon Trash Select the Delete Application button Delete Application FAQsDoes Tilled support multi-location merchants?Yes, merchant users can manage multiple accounts with a single login. To grant a user access to multiple accounts, simply use the same email address when inviting them to each account. Once the user logs in, they will be able to seamlessly toggle between accounts. FAQs Does Tilled support multi-location merchants?Yes, merchant users can manage multiple accounts with a single login. To grant a user access to multiple accounts, simply use the same email address when inviting them to each account. Once the user logs in, they will be able to seamlessly toggle between accounts. Does Tilled support multi-location merchants? Does Tilled support multi-location merchants? Tilled [https://docs.tilled.com/docs/merchants/onboard-new-merchants#faq-does--support-multi-location-merchants](https://docs.tilled.com/docs/merchants/onboard-new-merchants#faq-does--support-multi-location-merchants) Yes, merchant users can manage multiple accounts with a single login. To grant a user access to multiple accounts, simply use the same email address when inviting them to each account. Once the user logs in, they will be able to seamlessly toggle between accounts. Last updated on March 10, 2025 March 10, 2025 Merchant PricingAccount Requirements [Merchant Pricing](https://docs.tilled.com/docs/merchants/merchant-pricing) [Account Requirements](https://docs.tilled.com/docs/merchants/account-requirements)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/account-requirements",
    "title": "Tilled",
    "content": "Account Requirements When merchants are onboarded to Tilled for payment processing, they undergo underwriting by the processor. As part of this process, merchants are required to provide key details about their business, ownership, and business model in their merchant application. This guide outlines the specific information merchants need to submit to onboard their accounts with Tilled and explains how requirements may vary depending on the processor. Business Details The merchant’s business details help verify the legitimacy of their business and ensure it is in good standing with their state’s Secretary of State. REQUIRED INFORMATIONDESCRIPTIONStructureThe legal business structure of the merchant.Legal business nameThe registered legal business name of the merchant. The legal business name should be entered exactly as it appears on the merchant’s IRS-issued documents.Doing business as nameThe business name the merchant presents to customers, if different from the legal business name. The DBA is optional.Tax ID numberThe merchant’s Tax ID number. In Canada, this is referred to as the Business Number.AddressThe address where the business is physically located. For Sole Proprietorships, this can be their home address if their business does not have a physical address.Customer support phone numberThe phone number which customers use to get in contact with the merchant.Customer support email addressThe email address which customers use to get in contact with the merchant. The customer support email is optional but recommended for merchants who collect payments online.WebsiteThe merchant’s publicly available website. The website URL is optional but recommended for merchants who collect payments online. Social media sites are not accepted.Date of incorporationThe date when the business was incorporated.Patriot Act detailsBusiness verification information required by the Patriot Act. Only applies to TSYS applications. Details about the merchant’s Articles of Incorporation or Business License must be provided. The physical document is not required. Business Model Details The merchant’s business model details help assess its risk level, considering factors such as industry, fulfillment timeframe, checkout methods, and business-to-business percentage. REQUIRED INFORMATIONDESCRIPTIONIndustryMerchant category code identifying the industry of the business.Product descriptionDescription of the merchant’s product or services.Fulfillment timeframeThe number of days billed prior to goods or services being provided.B2B percentageThe percentage of a merchant’s overall business that is conducted with other businesses.Card checkout methodsThe percentage of card volume split between online, MOTO, and in-person payments. The total value must add up to 100%. Processing Volumes The processing volumes provided in the merchant’s onboarding application determine their initial processing thresholds. To avoid delays in fund disbursement, merchants should estimate these values as accurately as possible. Merchants with high monthly processing volumes or average transaction amounts may be required to provide additional documentation, such as processing or bank statements, to support their volume estimates. REQUIRED INFORMATIONDESCRIPTIONPrevious payment processorThe name of the merchant’s previous payment processor. This information is optional but recommended if the merchant has processed payments before.Statement descriptorIndicates how the merchant’s business name should appear on customer credit card statements. The descriptor is customizable via API for Paysafe applications and set to the DBA by default for North and TSYS applications.Number of terminalsEstimated number of terminals the merchant expects to order. This field is required when a card-present pricing template is applied. Default is 1.Monthly processing volumeEstimated amount the merchant makes in a month from card and bank-to-bank sales.Monthly transaction countEstimated number of payments a merchant makes in a month from card and bank-to-bank sales.Average card transaction amountThe average amount of a single card payment. This field is required if a card-not-present or card-present pricing template is applied.Average direct debit transaction amountThe average amount of a single bank-to-bank payment. This field is required if a bank-to-bank pricing template is applied. Principals A principal of the merchant’s business can be the individual applying for the merchant account, an individual with significant operating control, and any individuals with significant ownership in the business. This information is required to comply with anti-money laundering (AML) regulations. Soft credit checks may also be performed on the principals. REQUIRED INFORMATIONDESCRIPTIONFirst and last nameThe first and last name of the principal.Control prongIndicates whether the principal is the Control Prong for the merchant account. Control Prong is an individual with significant responsibility for managing the merchant legal entity (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts it is required that exactly one of the principals is specified as the Control Prong.ApplicantIndicates whether this person is the applicant for the merchant account. For US merchant accounts it is required that exactly one of the principals is specified as the applicant.Id numberThe individual’s Social Security Number (US) or Social Insurance Number (CA). This field is optional for Canadian merchant accounts. For US merchant accounts, this field is optional when the business structure is government. For other business structures in the US, the SSN is required per US regulations around anti-money laundering.Date of birthThe principal’s date of birth.Job titleThe principal’s job title. Selected from an enum list of possible job titles. Select the one that most closely matches the job title for the principal.Percent ownershipThe percentage of the principal’s ownership in the company. It is recommended to provide the personal details for any individual who owns 25% or more of the merchant’s business. For North applications, a minimum of 75% ownership is required. Additionally, all owners with more than 25% ownership are required to DocuSign the North merchant agreement.PhoneThe principal’s phone number.EmailThe principal’s email address.Previous addressThe previous registered residential address for this principal. This field is required for Canadian principals who have lived at their current address for fewer than 3 years.AddressThe principal’s residential address.Years at addressThe number of years the principal resided at this address. This field is only required for Canadian applications.Years at previous addressRefers to the number of years the principal resided at their previous address. This field is only required for Canadian applications. Bank Account The merchant’s bank account is used for depositing and debiting funds. It must be registered under the same legal name or DBA as the merchant’s business and capable of receiving both ACH/EFT credits and debits. REQUIRED INFORMATIONDESCRIPTIONBank accountThe banking details for the business’ payouts Agreements Each processor has their own Terms and Conditions that the merchant must agree to before submitting their application. All merchants must also agree to the Tilled Privacy Policy and Portal Terms of Service, which are available as links in the Merchant Onboarding API. PROCESSORMETHOD TO AGREENOTESNorthDocuSignThe principal listed as the applicant and any owners with more than 25% ownership are required to digitally sign the North merchant agreement.PaysafeClick to agreeTerms and conditions are available as a link in the hosted merchant application and the Merchant Onboarding API.TSYSDocuSignThe principal listed as the applicant is required to digitally sign the TSYS merchant agreement. Documents REQUIRED INFORMATIONDESCRIPTION501c3 documentThe merchant’s 501c3 letter. Documentation is only required for TSYS applications where the MCC is 8398 or 8661 and the is_501c3 flag is true.Voided/check bank letterA voided check or bank letter for the merchant’s bank account. Documentation is only required in the hosted merchant application if Plaid is not used to connect the bank account. FAQsHow do SSN and TIN requirements vary across business types?The applicant SSN (Social Security Number) and business TIN (Tax Identification Number) requirements for merchants submitting a payment processing application can vary depending on the type of business they are operating. Sole ProprietorshipApplicant SSN is requiredBusiness TIN is required, but the applicant may use their SSN as the TINPartnershipApplicant SSN is required for all partnersBusiness TIN is required for the partnershipLimited Liability Company (LLC)Applicant SSN is required for all members with more than 25% ownershipBusiness TIN is required for the LLCCorporationApplicant SSN is required for all owners with more than 25% ownershipBusiness TIN is required for the corporationNon-profit OrganizationFor Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required.Business TIN is required for the non-profit organization Last updated on March 10, 2025Onboard MerchantsDocument Requests Account Requirements When merchants are onboarded to Tilled for payment processing, they undergo underwriting by the processor. As part of this process, merchants are required to provide key details about their business, ownership, and business model in their merchant application. Tilled This guide outlines the specific information merchants need to submit to onboard their accounts with Tilled and explains how requirements may vary depending on the processor. Tilled Business Details [https://docs.tilled.com/docs/merchants/account-requirements#business-details](https://docs.tilled.com/docs/merchants/account-requirements#business-details) The merchant’s business details help verify the legitimacy of their business and ensure it is in good standing with their state’s Secretary of State. REQUIRED INFORMATIONDESCRIPTIONStructureThe legal business structure of the merchant.Legal business nameThe registered legal business name of the merchant. The legal business name should be entered exactly as it appears on the merchant’s IRS-issued documents.Doing business as nameThe business name the merchant presents to customers, if different from the legal business name. The DBA is optional.Tax ID numberThe merchant’s Tax ID number. In Canada, this is referred to as the Business Number.AddressThe address where the business is physically located. For Sole Proprietorships, this can be their home address if their business does not have a physical address.Customer support phone numberThe phone number which customers use to get in contact with the merchant.Customer support email addressThe email address which customers use to get in contact with the merchant. The customer support email is optional but recommended for merchants who collect payments online.WebsiteThe merchant’s publicly available website. The website URL is optional but recommended for merchants who collect payments online. Social media sites are not accepted.Date of incorporationThe date when the business was incorporated.Patriot Act detailsBusiness verification information required by the Patriot Act. Only applies to TSYS applications. Details about the merchant’s Articles of Incorporation or Business License must be provided. The physical document is not required. REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATION REQUIRED INFORMATION DESCRIPTION DESCRIPTION StructureThe legal business structure of the merchant.Legal business nameThe registered legal business name of the merchant. The legal business name should be entered exactly as it appears on the merchant’s IRS-issued documents.Doing business as nameThe business name the merchant presents to customers, if different from the legal business name. The DBA is optional.Tax ID numberThe merchant’s Tax ID number. In Canada, this is referred to as the Business Number.AddressThe address where the business is physically located. For Sole Proprietorships, this can be their home address if their business does not have a physical address.Customer support phone numberThe phone number which customers use to get in contact with the merchant.Customer support email addressThe email address which customers use to get in contact with the merchant. The customer support email is optional but recommended for merchants who collect payments online.WebsiteThe merchant’s publicly available website. The website URL is optional but recommended for merchants who collect payments online. Social media sites are not accepted.Date of incorporationThe date when the business was incorporated.Patriot Act detailsBusiness verification information required by the Patriot Act. Only applies to TSYS applications. Details about the merchant’s Articles of Incorporation or Business License must be provided. The physical document is not required. StructureThe legal business structure of the merchant. Structure The legal business structure of the merchant. Legal business nameThe registered legal business name of the merchant. The legal business name should be entered exactly as it appears on the merchant’s IRS-issued documents. Legal business name The registered legal business name of the merchant. The legal business name should be entered exactly as it appears on the merchant’s IRS-issued documents. Doing business as nameThe business name the merchant presents to customers, if different from the legal business name. The DBA is optional. Doing business as name The business name the merchant presents to customers, if different from the legal business name. The DBA is optional. Tax ID numberThe merchant’s Tax ID number. In Canada, this is referred to as the Business Number. Tax ID number The merchant’s Tax ID number. In Canada, this is referred to as the Business Number. AddressThe address where the business is physically located. For Sole Proprietorships, this can be their home address if their business does not have a physical address. Address The address where the business is physically located. For Sole Proprietorships, this can be their home address if their business does not have a physical address. Customer support phone numberThe phone number which customers use to get in contact with the merchant. Customer support phone number The phone number which customers use to get in contact with the merchant. Customer support email addressThe email address which customers use to get in contact with the merchant. The customer support email is optional but recommended for merchants who collect payments online. Customer support email address The email address which customers use to get in contact with the merchant. The customer support email is optional but recommended for merchants who collect payments online. WebsiteThe merchant’s publicly available website. The website URL is optional but recommended for merchants who collect payments online. Social media sites are not accepted. Website The merchant’s publicly available website. The website URL is optional but recommended for merchants who collect payments online. Social media sites are not accepted. Date of incorporationThe date when the business was incorporated. Date of incorporation The date when the business was incorporated. Patriot Act detailsBusiness verification information required by the Patriot Act. Only applies to TSYS applications. Details about the merchant’s Articles of Incorporation or Business License must be provided. The physical document is not required. Patriot Act details Business verification information required by the Patriot Act. Only applies to TSYS applications. Details about the merchant’s Articles of Incorporation or Business License must be provided. The physical document is not required. Business Model Details [https://docs.tilled.com/docs/merchants/account-requirements#business-model-details](https://docs.tilled.com/docs/merchants/account-requirements#business-model-details) The merchant’s business model details help assess its risk level, considering factors such as industry, fulfillment timeframe, checkout methods, and business-to-business percentage. REQUIRED INFORMATIONDESCRIPTIONIndustryMerchant category code identifying the industry of the business.Product descriptionDescription of the merchant’s product or services.Fulfillment timeframeThe number of days billed prior to goods or services being provided.B2B percentageThe percentage of a merchant’s overall business that is conducted with other businesses.Card checkout methodsThe percentage of card volume split between online, MOTO, and in-person payments. The total value must add up to 100%. REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATION REQUIRED INFORMATION DESCRIPTION DESCRIPTION IndustryMerchant category code identifying the industry of the business.Product descriptionDescription of the merchant’s product or services.Fulfillment timeframeThe number of days billed prior to goods or services being provided.B2B percentageThe percentage of a merchant’s overall business that is conducted with other businesses.Card checkout methodsThe percentage of card volume split between online, MOTO, and in-person payments. The total value must add up to 100%. IndustryMerchant category code identifying the industry of the business. Industry Merchant category code identifying the industry of the business. Product descriptionDescription of the merchant’s product or services. Product description Description of the merchant’s product or services. Fulfillment timeframeThe number of days billed prior to goods or services being provided. Fulfillment timeframe The number of days billed prior to goods or services being provided. B2B percentageThe percentage of a merchant’s overall business that is conducted with other businesses. B2B percentage The percentage of a merchant’s overall business that is conducted with other businesses. Card checkout methodsThe percentage of card volume split between online, MOTO, and in-person payments. The total value must add up to 100%. Card checkout methods The percentage of card volume split between online, MOTO, and in-person payments. The total value must add up to 100%. Processing Volumes [https://docs.tilled.com/docs/merchants/account-requirements#processing-volumes](https://docs.tilled.com/docs/merchants/account-requirements#processing-volumes) The processing volumes provided in the merchant’s onboarding application determine their initial processing thresholds. To avoid delays in fund disbursement, merchants should estimate these values as accurately as possible. Merchants with high monthly processing volumes or average transaction amounts may be required to provide additional documentation, such as processing or bank statements, to support their volume estimates. REQUIRED INFORMATIONDESCRIPTIONPrevious payment processorThe name of the merchant’s previous payment processor. This information is optional but recommended if the merchant has processed payments before.Statement descriptorIndicates how the merchant’s business name should appear on customer credit card statements. The descriptor is customizable via API for Paysafe applications and set to the DBA by default for North and TSYS applications.Number of terminalsEstimated number of terminals the merchant expects to order. This field is required when a card-present pricing template is applied. Default is 1.Monthly processing volumeEstimated amount the merchant makes in a month from card and bank-to-bank sales.Monthly transaction countEstimated number of payments a merchant makes in a month from card and bank-to-bank sales.Average card transaction amountThe average amount of a single card payment. This field is required if a card-not-present or card-present pricing template is applied.Average direct debit transaction amountThe average amount of a single bank-to-bank payment. This field is required if a bank-to-bank pricing template is applied. REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATION REQUIRED INFORMATION DESCRIPTION DESCRIPTION Previous payment processorThe name of the merchant’s previous payment processor. This information is optional but recommended if the merchant has processed payments before.Statement descriptorIndicates how the merchant’s business name should appear on customer credit card statements. The descriptor is customizable via API for Paysafe applications and set to the DBA by default for North and TSYS applications.Number of terminalsEstimated number of terminals the merchant expects to order. This field is required when a card-present pricing template is applied. Default is 1.Monthly processing volumeEstimated amount the merchant makes in a month from card and bank-to-bank sales.Monthly transaction countEstimated number of payments a merchant makes in a month from card and bank-to-bank sales.Average card transaction amountThe average amount of a single card payment. This field is required if a card-not-present or card-present pricing template is applied.Average direct debit transaction amountThe average amount of a single bank-to-bank payment. This field is required if a bank-to-bank pricing template is applied. Previous payment processorThe name of the merchant’s previous payment processor. This information is optional but recommended if the merchant has processed payments before. Previous payment processor The name of the merchant’s previous payment processor. This information is optional but recommended if the merchant has processed payments before. Statement descriptorIndicates how the merchant’s business name should appear on customer credit card statements. The descriptor is customizable via API for Paysafe applications and set to the DBA by default for North and TSYS applications. Statement descriptor Indicates how the merchant’s business name should appear on customer credit card statements. The descriptor is customizable via API for Paysafe applications and set to the DBA by default for North and TSYS applications. Number of terminalsEstimated number of terminals the merchant expects to order. This field is required when a card-present pricing template is applied. Default is 1. Number of terminals Estimated number of terminals the merchant expects to order. This field is required when a card-present pricing template is applied. Default is 1. Monthly processing volumeEstimated amount the merchant makes in a month from card and bank-to-bank sales. Monthly processing volume Estimated amount the merchant makes in a month from card and bank-to-bank sales. Monthly transaction countEstimated number of payments a merchant makes in a month from card and bank-to-bank sales. Monthly transaction count Estimated number of payments a merchant makes in a month from card and bank-to-bank sales. Average card transaction amountThe average amount of a single card payment. This field is required if a card-not-present or card-present pricing template is applied. Average card transaction amount The average amount of a single card payment. This field is required if a card-not-present or card-present pricing template is applied. Average direct debit transaction amountThe average amount of a single bank-to-bank payment. This field is required if a bank-to-bank pricing template is applied. Average direct debit transaction amount The average amount of a single bank-to-bank payment. This field is required if a bank-to-bank pricing template is applied. Principals [https://docs.tilled.com/docs/merchants/account-requirements#principals](https://docs.tilled.com/docs/merchants/account-requirements#principals) A principal of the merchant’s business can be the individual applying for the merchant account, an individual with significant operating control, and any individuals with significant ownership in the business. This information is required to comply with anti-money laundering (AML) regulations. Soft credit checks may also be performed on the principals. REQUIRED INFORMATIONDESCRIPTIONFirst and last nameThe first and last name of the principal.Control prongIndicates whether the principal is the Control Prong for the merchant account. Control Prong is an individual with significant responsibility for managing the merchant legal entity (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts it is required that exactly one of the principals is specified as the Control Prong.ApplicantIndicates whether this person is the applicant for the merchant account. For US merchant accounts it is required that exactly one of the principals is specified as the applicant.Id numberThe individual’s Social Security Number (US) or Social Insurance Number (CA). This field is optional for Canadian merchant accounts. For US merchant accounts, this field is optional when the business structure is government. For other business structures in the US, the SSN is required per US regulations around anti-money laundering.Date of birthThe principal’s date of birth.Job titleThe principal’s job title. Selected from an enum list of possible job titles. Select the one that most closely matches the job title for the principal.Percent ownershipThe percentage of the principal’s ownership in the company. It is recommended to provide the personal details for any individual who owns 25% or more of the merchant’s business. For North applications, a minimum of 75% ownership is required. Additionally, all owners with more than 25% ownership are required to DocuSign the North merchant agreement.PhoneThe principal’s phone number.EmailThe principal’s email address.Previous addressThe previous registered residential address for this principal. This field is required for Canadian principals who have lived at their current address for fewer than 3 years.AddressThe principal’s residential address.Years at addressThe number of years the principal resided at this address. This field is only required for Canadian applications.Years at previous addressRefers to the number of years the principal resided at their previous address. This field is only required for Canadian applications. REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATION REQUIRED INFORMATION DESCRIPTION DESCRIPTION First and last nameThe first and last name of the principal.Control prongIndicates whether the principal is the Control Prong for the merchant account. Control Prong is an individual with significant responsibility for managing the merchant legal entity (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts it is required that exactly one of the principals is specified as the Control Prong.ApplicantIndicates whether this person is the applicant for the merchant account. For US merchant accounts it is required that exactly one of the principals is specified as the applicant.Id numberThe individual’s Social Security Number (US) or Social Insurance Number (CA). This field is optional for Canadian merchant accounts. For US merchant accounts, this field is optional when the business structure is government. For other business structures in the US, the SSN is required per US regulations around anti-money laundering.Date of birthThe principal’s date of birth.Job titleThe principal’s job title. Selected from an enum list of possible job titles. Select the one that most closely matches the job title for the principal.Percent ownershipThe percentage of the principal’s ownership in the company. It is recommended to provide the personal details for any individual who owns 25% or more of the merchant’s business. For North applications, a minimum of 75% ownership is required. Additionally, all owners with more than 25% ownership are required to DocuSign the North merchant agreement.PhoneThe principal’s phone number.EmailThe principal’s email address.Previous addressThe previous registered residential address for this principal. This field is required for Canadian principals who have lived at their current address for fewer than 3 years.AddressThe principal’s residential address.Years at addressThe number of years the principal resided at this address. This field is only required for Canadian applications.Years at previous addressRefers to the number of years the principal resided at their previous address. This field is only required for Canadian applications. First and last nameThe first and last name of the principal. First and last name The first and last name of the principal. Control prongIndicates whether the principal is the Control Prong for the merchant account. Control Prong is an individual with significant responsibility for managing the merchant legal entity (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts it is required that exactly one of the principals is specified as the Control Prong. Control prong Indicates whether the principal is the Control Prong for the merchant account. Control Prong is an individual with significant responsibility for managing the merchant legal entity (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts it is required that exactly one of the principals is specified as the Control Prong. ApplicantIndicates whether this person is the applicant for the merchant account. For US merchant accounts it is required that exactly one of the principals is specified as the applicant. Applicant Indicates whether this person is the applicant for the merchant account. For US merchant accounts it is required that exactly one of the principals is specified as the applicant. Id numberThe individual’s Social Security Number (US) or Social Insurance Number (CA). This field is optional for Canadian merchant accounts. For US merchant accounts, this field is optional when the business structure is government. For other business structures in the US, the SSN is required per US regulations around anti-money laundering. Id number The individual’s Social Security Number (US) or Social Insurance Number (CA). This field is optional for Canadian merchant accounts. For US merchant accounts, this field is optional when the business structure is government. For other business structures in the US, the SSN is required per US regulations around anti-money laundering. Date of birthThe principal’s date of birth. Date of birth The principal’s date of birth. Job titleThe principal’s job title. Selected from an enum list of possible job titles. Select the one that most closely matches the job title for the principal. Job title The principal’s job title. Selected from an enum list of possible job titles. Select the one that most closely matches the job title for the principal. Percent ownershipThe percentage of the principal’s ownership in the company. It is recommended to provide the personal details for any individual who owns 25% or more of the merchant’s business. For North applications, a minimum of 75% ownership is required. Additionally, all owners with more than 25% ownership are required to DocuSign the North merchant agreement. Percent ownership The percentage of the principal’s ownership in the company. It is recommended to provide the personal details for any individual who owns 25% or more of the merchant’s business. For North applications, a minimum of 75% ownership is required. Additionally, all owners with more than 25% ownership are required to DocuSign the North merchant agreement. [North merchant agreement](https://docs.tilled.com/docs/merchants/account-requirements#agreements) PhoneThe principal’s phone number. Phone The principal’s phone number. EmailThe principal’s email address. Email The principal’s email address. Previous addressThe previous registered residential address for this principal. This field is required for Canadian principals who have lived at their current address for fewer than 3 years. Previous address The previous registered residential address for this principal. This field is required for Canadian principals who have lived at their current address for fewer than 3 years. AddressThe principal’s residential address. Address The principal’s residential address. Years at addressThe number of years the principal resided at this address. This field is only required for Canadian applications. Years at address The number of years the principal resided at this address. This field is only required for Canadian applications. Years at previous addressRefers to the number of years the principal resided at their previous address. This field is only required for Canadian applications. Years at previous address Refers to the number of years the principal resided at their previous address. This field is only required for Canadian applications. Bank Account [https://docs.tilled.com/docs/merchants/account-requirements#bank-account](https://docs.tilled.com/docs/merchants/account-requirements#bank-account) The merchant’s bank account is used for depositing and debiting funds. It must be registered under the same legal name or DBA as the merchant’s business and capable of receiving both ACH/EFT credits and debits. REQUIRED INFORMATIONDESCRIPTIONBank accountThe banking details for the business’ payouts REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATION REQUIRED INFORMATION DESCRIPTION DESCRIPTION Bank accountThe banking details for the business’ payouts Bank accountThe banking details for the business’ payouts Bank account The banking details for the business’ payouts Agreements [https://docs.tilled.com/docs/merchants/account-requirements#agreements](https://docs.tilled.com/docs/merchants/account-requirements#agreements) Each processor has their own Terms and Conditions that the merchant must agree to before submitting their application. All merchants must also agree to the Tilled Privacy Policy and Portal Terms of Service, which are available as links in the Merchant Onboarding API. Tilled PROCESSORMETHOD TO AGREENOTESNorthDocuSignThe principal listed as the applicant and any owners with more than 25% ownership are required to digitally sign the North merchant agreement.PaysafeClick to agreeTerms and conditions are available as a link in the hosted merchant application and the Merchant Onboarding API.TSYSDocuSignThe principal listed as the applicant is required to digitally sign the TSYS merchant agreement. PROCESSORMETHOD TO AGREENOTES PROCESSORMETHOD TO AGREENOTES PROCESSOR PROCESSOR METHOD TO AGREE METHOD TO AGREE NOTES NOTES NorthDocuSignThe principal listed as the applicant and any owners with more than 25% ownership are required to digitally sign the North merchant agreement.PaysafeClick to agreeTerms and conditions are available as a link in the hosted merchant application and the Merchant Onboarding API.TSYSDocuSignThe principal listed as the applicant is required to digitally sign the TSYS merchant agreement. NorthDocuSignThe principal listed as the applicant and any owners with more than 25% ownership are required to digitally sign the North merchant agreement. North DocuSign The principal listed as the applicant and any owners with more than 25% ownership are required to digitally sign the North merchant agreement. PaysafeClick to agreeTerms and conditions are available as a link in the hosted merchant application and the Merchant Onboarding API. Paysafe Click to agree Terms and conditions are available as a link in the hosted merchant application and the Merchant Onboarding API. TSYSDocuSignThe principal listed as the applicant is required to digitally sign the TSYS merchant agreement. TSYS DocuSign The principal listed as the applicant is required to digitally sign the TSYS merchant agreement. Documents [https://docs.tilled.com/docs/merchants/account-requirements#documents](https://docs.tilled.com/docs/merchants/account-requirements#documents) REQUIRED INFORMATIONDESCRIPTION501c3 documentThe merchant’s 501c3 letter. Documentation is only required for TSYS applications where the MCC is 8398 or 8661 and the is_501c3 flag is true.Voided/check bank letterA voided check or bank letter for the merchant’s bank account. Documentation is only required in the hosted merchant application if Plaid is not used to connect the bank account. REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATIONDESCRIPTION REQUIRED INFORMATION REQUIRED INFORMATION DESCRIPTION DESCRIPTION 501c3 documentThe merchant’s 501c3 letter. Documentation is only required for TSYS applications where the MCC is 8398 or 8661 and the is_501c3 flag is true.Voided/check bank letterA voided check or bank letter for the merchant’s bank account. Documentation is only required in the hosted merchant application if Plaid is not used to connect the bank account. 501c3 documentThe merchant’s 501c3 letter. Documentation is only required for TSYS applications where the MCC is 8398 or 8661 and the is_501c3 flag is true. 501c3 document The merchant’s 501c3 letter. Documentation is only required for TSYS applications where the MCC is 8398 or 8661 and the is_501c3 flag is true. is_501c3 true Voided/check bank letterA voided check or bank letter for the merchant’s bank account. Documentation is only required in the hosted merchant application if Plaid is not used to connect the bank account. Voided/check bank letter A voided check or bank letter for the merchant’s bank account. Documentation is only required in the hosted merchant application if Plaid is not used to connect the bank account. FAQsHow do SSN and TIN requirements vary across business types?The applicant SSN (Social Security Number) and business TIN (Tax Identification Number) requirements for merchants submitting a payment processing application can vary depending on the type of business they are operating. Sole ProprietorshipApplicant SSN is requiredBusiness TIN is required, but the applicant may use their SSN as the TINPartnershipApplicant SSN is required for all partnersBusiness TIN is required for the partnershipLimited Liability Company (LLC)Applicant SSN is required for all members with more than 25% ownershipBusiness TIN is required for the LLCCorporationApplicant SSN is required for all owners with more than 25% ownershipBusiness TIN is required for the corporationNon-profit OrganizationFor Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required.Business TIN is required for the non-profit organization FAQs How do SSN and TIN requirements vary across business types?The applicant SSN (Social Security Number) and business TIN (Tax Identification Number) requirements for merchants submitting a payment processing application can vary depending on the type of business they are operating. Sole ProprietorshipApplicant SSN is requiredBusiness TIN is required, but the applicant may use their SSN as the TINPartnershipApplicant SSN is required for all partnersBusiness TIN is required for the partnershipLimited Liability Company (LLC)Applicant SSN is required for all members with more than 25% ownershipBusiness TIN is required for the LLCCorporationApplicant SSN is required for all owners with more than 25% ownershipBusiness TIN is required for the corporationNon-profit OrganizationFor Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required.Business TIN is required for the non-profit organization How do SSN and TIN requirements vary across business types? How do SSN and TIN requirements vary across business types? [https://docs.tilled.com/docs/merchants/account-requirements#faq-how-do-ssn-and-tin-requirements-vary-across-business-types](https://docs.tilled.com/docs/merchants/account-requirements#faq-how-do-ssn-and-tin-requirements-vary-across-business-types) The applicant SSN (Social Security Number) and business TIN (Tax Identification Number) requirements for merchants submitting a payment processing application can vary depending on the type of business they are operating. Sole ProprietorshipApplicant SSN is requiredBusiness TIN is required, but the applicant may use their SSN as the TINPartnershipApplicant SSN is required for all partnersBusiness TIN is required for the partnershipLimited Liability Company (LLC)Applicant SSN is required for all members with more than 25% ownershipBusiness TIN is required for the LLCCorporationApplicant SSN is required for all owners with more than 25% ownershipBusiness TIN is required for the corporationNon-profit OrganizationFor Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required.Business TIN is required for the non-profit organization The applicant SSN (Social Security Number) and business TIN (Tax Identification Number) requirements for merchants submitting a payment processing application can vary depending on the type of business they are operating. Sole Proprietorship Applicant SSN is requiredBusiness TIN is required, but the applicant may use their SSN as the TIN Applicant SSN is required Business TIN is required, but the applicant may use their SSN as the TIN Partnership Applicant SSN is required for all partnersBusiness TIN is required for the partnership Applicant SSN is required for all partners Business TIN is required for the partnership Limited Liability Company (LLC) Applicant SSN is required for all members with more than 25% ownershipBusiness TIN is required for the LLC Applicant SSN is required for all members with more than 25% ownership Business TIN is required for the LLC Corporation Applicant SSN is required for all owners with more than 25% ownershipBusiness TIN is required for the corporation Applicant SSN is required for all owners with more than 25% ownership Business TIN is required for the corporation Non-profit Organization For Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required.Business TIN is required for the non-profit organization For Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required. Business TIN is required for the non-profit organization Last updated on March 10, 2025 March 10, 2025 Onboard MerchantsDocument Requests [Onboard Merchants](https://docs.tilled.com/docs/merchants/onboard-new-merchants) [Document Requests](https://docs.tilled.com/docs/merchants/document-requests)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/document-requests",
    "title": "Tilled",
    "content": "Document Requests Manage document requests through the Dashboard or build a custom document management experience using the DocumentsAPI. To determine which option is best for you, review our integration options for document management. Manage Document Requests DashboardAPIDocuments can be fully managed through the Partner Dashboard. When documentation is requested, an email notification is sent to all software platform and merchant users who have email notifications enabled for Additional information requests.To manage merchant email notifications for document requests, refer to our Merchant Preferences guide.Upload merchant documentationTo upload documentation on behalf of a merchant:Navigate to Merchants and select the desired merchantNavigate to the Documents tabClick the Submit Requested Information buttonUpload the requested information and click the Submit Additional Information buttonView request statusTo view the status of a documentation request:Navigate to Merchants and select the desired merchantNavigate to the Documents tabRefer to the status code of the respective requestRefer to the Document Request States for detailed information on each status. Common Reasons for Document Requests For active merchants using Tilled, it’s not uncommon to receive requests for additional documents. Generally, document requests are part of our ongoing efforts to ensure compliance, security, and smooth operation of the merchant account. The table below defines the most common scenarios in which additional documentation may be requested. PURPOSECOMMON DOCUMENT REQUESTSNew MerchantsBusiness verificationVerify the legitimacy and standing of the business.Business LicenseArticles of IncorporationBusiness owner verificationConfirm the identity of the business owner.Driver’s License or PassportProcessing volume verificationEnsure reported processing volumes match those stated in the application.Bank StatementsProcessing StatementsFinancial StatementsActive MerchantsPeriodic account reviewEnsure all merchant account information is current and compliant with regulatory standards.Business LicenseFinancial StatementsRelease of funding holdResolve any issues causing a hold on the merchant’s account.InvoiceFinancial StatementsProof of order fulfillmentAccount change verificationVerify significant account changes, like ownership or business structure changes.Articles of IncorporationEIN LetterRisk management proceduresReview unusual or significant transaction patterns.InvoiceFinancial StatementsCustomer contracts Types of Document Requests DESCRIPTIONFilesBank Letter or Voided CheckVoided Check: Official bank document proving an account's authenticity with pre-printed account details. The Voided Check should:Be a pre-printed voided check (not a temporary check)Include the merchant legal nameInclude the merchant business addressBank Letter: Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should:Be on a bank letterheadInclude the registered name of your businessInclude an ACH/EFT routing numberInclude an ACH/EFT account numberBe signed and dated by a bank representative within the last 30 daysEIN LetterConfirmation letter from the IRS that provides the Employer Identification Number.Articles of IncorporationOfficial documents that legally establish the creation of a corporation.Business LicenseGovernment-issued document that certifies a business to operate legally within a certain geographical area. A photo of the Business License is accepted, as long as it is readable.Utility BillMonthly statement from a utility service (e.g., electricity, water, gas) verifying a business's address.Processing StatementRecent statements from a payment processor detailing transaction history. The number of months requested will be specified in the requestNotes.Financial StatementsComprehensive reports detailing a company's financial performance over a specific period, typically including a Profit and Loss (P&L) statement and a Balance Sheet.Bank StatementsDocuments from a bank detailing the transactions carried out within an account over a specified period. The number of months requested will be specified in the requestNotes.501c3Official documentation proving a non-profit organization's tax-exempt status under IRS section 501(c)(3). 501c3 will only be requested from non-profits.Tax ReturnGovernment document detailing income, expenses, and other tax-related information. The year of the requested Tax Return will be specified in the requestNotes.InvoiceDetailed bill from transactions or services provided, listing quantities, prices, and terms. The date and amount of the transaction for which the Invoice is requested will be specified in the requestNotes.Driver’s License or PassportGovernment-issued identification that includes a photo and personal details. The name of the individual for whom the driver’s license is requested will be written in the requestNotes.Driver’s License - Back sideGovernment-issued identification that includes a photo and personal details.OtherAny document not listed that may be required based on specific circumstances. If other is selected, notes will be provided in the requestNotes field to explain the request.Written PromptsBusiness modelDescription of the merchant’s products/services, target market, and any unique features or value propositions that differentiate the business from others in the industry.Pricing modelDescription of the merchant’s pricing model, including general costs of goods or services.WebsiteLink to the merchant’s website. Facebook and Instagram websites are not accepted.No shopping cartDescription of how the merchant typically handles order placements, along with the usual lead time between when an order is made and when it’s fulfilled. This information is typically only requested from merchants without a shopping cart on their website.OtherIf other is selected, notes will be provided in the requestNotes field to explain the request. Document Request Requirements TYPEACCEPTED INPUTDETAILSFilesUpload a fileFile types: .pdf, .png, .jpg, .tiffFile size limit: 10MBWritten promptSubmit a written responseCharacter limit: Up to 255 characters Document Request States STATUSDESCRIPTIONrequestedDocument was requested from the merchant.submittedDocument was submitted to Tilled and is under review.verifiedDocument was verified. No further action is needed.rejectedDocument was rejected for failing to meet the review criteria. Reasons for rejection may include:Blurry or unreadable content, making the document hard to reviewDocument corruption or technical issues preventing it from being openedIrrelevance or errors in the document's contentIf a document is rejected, a detailed explanation will be provided and an updated document will be requested.Last updated on March 3, 2025Account RequirementsManage Merchants Document Requests Manage document requests through the Dashboard or build a custom document management experience using the DocumentsAPI. To determine which option is best for you, review our integration options for document management. [DocumentsAPI](https://docs.tilled.com/api-reference#tag/documents) API [integration options for document management](https://docs.tilled.com/docs/get-started/integration-options) Manage Document Requests [https://docs.tilled.com/docs/merchants/document-requests#manage-document-requests](https://docs.tilled.com/docs/merchants/document-requests#manage-document-requests) DashboardAPIDocuments can be fully managed through the Partner Dashboard. When documentation is requested, an email notification is sent to all software platform and merchant users who have email notifications enabled for Additional information requests.To manage merchant email notifications for document requests, refer to our Merchant Preferences guide.Upload merchant documentationTo upload documentation on behalf of a merchant:Navigate to Merchants and select the desired merchantNavigate to the Documents tabClick the Submit Requested Information buttonUpload the requested information and click the Submit Additional Information buttonView request statusTo view the status of a documentation request:Navigate to Merchants and select the desired merchantNavigate to the Documents tabRefer to the status code of the respective requestRefer to the Document Request States for detailed information on each status. DashboardAPI [Dashboard](https://docs.tilled.com/docs/merchants/document-requests#dashboard) [API](https://docs.tilled.com/docs/merchants/document-requests#api) Documents can be fully managed through the Partner Dashboard. When documentation is requested, an email notification is sent to all software platform and merchant users who have email notifications enabled for Additional information requests.To manage merchant email notifications for document requests, refer to our Merchant Preferences guide.Upload merchant documentationTo upload documentation on behalf of a merchant:Navigate to Merchants and select the desired merchantNavigate to the Documents tabClick the Submit Requested Information buttonUpload the requested information and click the Submit Additional Information buttonView request statusTo view the status of a documentation request:Navigate to Merchants and select the desired merchantNavigate to the Documents tabRefer to the status code of the respective requestRefer to the Document Request States for detailed information on each status. Documents can be fully managed through the Partner Dashboard. When documentation is requested, an email notification is sent to all software platform and merchant users who have email notifications enabled for Additional information requests. Additional information requests To manage merchant email notifications for document requests, refer to our Merchant Preferences guide. [Merchant Preferences guide](https://docs.tilled.com/docs/merchants/merchant-preferences) Upload merchant documentation To upload documentation on behalf of a merchant: Navigate to Merchants and select the desired merchantNavigate to the Documents tabClick the Submit Requested Information buttonUpload the requested information and click the Submit Additional Information button Navigate to Merchants and select the desired merchant Merchants Navigate to the Documents tab Documents Click the Submit Requested Information button Submit Requested Information Upload the requested information and click the Submit Additional Information button Submit Additional Information View request status To view the status of a documentation request: Navigate to Merchants and select the desired merchantNavigate to the Documents tabRefer to the status code of the respective request Navigate to Merchants and select the desired merchant Merchants Navigate to the Documents tab Documents Refer to the status code of the respective request status Refer to the Document Request States for detailed information on each status. [Document Request States](https://docs.tilled.com/docs/merchants/document-requests#document-request-states) Common Reasons for Document Requests [https://docs.tilled.com/docs/merchants/document-requests#common-reasons-for-document-requests](https://docs.tilled.com/docs/merchants/document-requests#common-reasons-for-document-requests) For active merchants using Tilled, it’s not uncommon to receive requests for additional documents. Generally, document requests are part of our ongoing efforts to ensure compliance, security, and smooth operation of the merchant account. Tilled The table below defines the most common scenarios in which additional documentation may be requested. PURPOSECOMMON DOCUMENT REQUESTSNew MerchantsBusiness verificationVerify the legitimacy and standing of the business.Business LicenseArticles of IncorporationBusiness owner verificationConfirm the identity of the business owner.Driver’s License or PassportProcessing volume verificationEnsure reported processing volumes match those stated in the application.Bank StatementsProcessing StatementsFinancial StatementsActive MerchantsPeriodic account reviewEnsure all merchant account information is current and compliant with regulatory standards.Business LicenseFinancial StatementsRelease of funding holdResolve any issues causing a hold on the merchant’s account.InvoiceFinancial StatementsProof of order fulfillmentAccount change verificationVerify significant account changes, like ownership or business structure changes.Articles of IncorporationEIN LetterRisk management proceduresReview unusual or significant transaction patterns.InvoiceFinancial StatementsCustomer contracts PURPOSECOMMON DOCUMENT REQUESTS PURPOSECOMMON DOCUMENT REQUESTS PURPOSE PURPOSE COMMON DOCUMENT REQUESTS COMMON DOCUMENT REQUESTS New MerchantsBusiness verificationVerify the legitimacy and standing of the business.Business LicenseArticles of IncorporationBusiness owner verificationConfirm the identity of the business owner.Driver’s License or PassportProcessing volume verificationEnsure reported processing volumes match those stated in the application.Bank StatementsProcessing StatementsFinancial StatementsActive MerchantsPeriodic account reviewEnsure all merchant account information is current and compliant with regulatory standards.Business LicenseFinancial StatementsRelease of funding holdResolve any issues causing a hold on the merchant’s account.InvoiceFinancial StatementsProof of order fulfillmentAccount change verificationVerify significant account changes, like ownership or business structure changes.Articles of IncorporationEIN LetterRisk management proceduresReview unusual or significant transaction patterns.InvoiceFinancial StatementsCustomer contracts New Merchants New Merchants New Merchants Business verificationVerify the legitimacy and standing of the business.Business LicenseArticles of Incorporation Business verification Verify the legitimacy and standing of the business. Business LicenseArticles of Incorporation Business LicenseArticles of Incorporation Business License Articles of Incorporation Business owner verificationConfirm the identity of the business owner.Driver’s License or Passport Business owner verification Confirm the identity of the business owner. Driver’s License or Passport Driver’s License or Passport Driver’s License or Passport Processing volume verificationEnsure reported processing volumes match those stated in the application.Bank StatementsProcessing StatementsFinancial Statements Processing volume verification Ensure reported processing volumes match those stated in the application. Bank StatementsProcessing StatementsFinancial Statements Bank StatementsProcessing StatementsFinancial Statements Bank Statements Processing Statements Financial Statements Active Merchants Active Merchants Active Merchants Periodic account reviewEnsure all merchant account information is current and compliant with regulatory standards.Business LicenseFinancial Statements Periodic account review Ensure all merchant account information is current and compliant with regulatory standards. Business LicenseFinancial Statements Business LicenseFinancial Statements Business License Financial Statements Release of funding holdResolve any issues causing a hold on the merchant’s account.InvoiceFinancial StatementsProof of order fulfillment Release of funding hold Resolve any issues causing a hold on the merchant’s account. InvoiceFinancial StatementsProof of order fulfillment InvoiceFinancial StatementsProof of order fulfillment Invoice Financial Statements Proof of order fulfillment Account change verificationVerify significant account changes, like ownership or business structure changes.Articles of IncorporationEIN Letter Account change verification Verify significant account changes, like ownership or business structure changes. Articles of IncorporationEIN Letter Articles of IncorporationEIN Letter Articles of Incorporation EIN Letter Risk management proceduresReview unusual or significant transaction patterns.InvoiceFinancial StatementsCustomer contracts Risk management procedures Review unusual or significant transaction patterns. InvoiceFinancial StatementsCustomer contracts InvoiceFinancial StatementsCustomer contracts Invoice Financial Statements Customer contracts Types of Document Requests [https://docs.tilled.com/docs/merchants/document-requests#types-of-document-requests](https://docs.tilled.com/docs/merchants/document-requests#types-of-document-requests) DESCRIPTIONFilesBank Letter or Voided CheckVoided Check: Official bank document proving an account's authenticity with pre-printed account details. The Voided Check should:Be a pre-printed voided check (not a temporary check)Include the merchant legal nameInclude the merchant business addressBank Letter: Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should:Be on a bank letterheadInclude the registered name of your businessInclude an ACH/EFT routing numberInclude an ACH/EFT account numberBe signed and dated by a bank representative within the last 30 daysEIN LetterConfirmation letter from the IRS that provides the Employer Identification Number.Articles of IncorporationOfficial documents that legally establish the creation of a corporation.Business LicenseGovernment-issued document that certifies a business to operate legally within a certain geographical area. A photo of the Business License is accepted, as long as it is readable.Utility BillMonthly statement from a utility service (e.g., electricity, water, gas) verifying a business's address.Processing StatementRecent statements from a payment processor detailing transaction history. The number of months requested will be specified in the requestNotes.Financial StatementsComprehensive reports detailing a company's financial performance over a specific period, typically including a Profit and Loss (P&L) statement and a Balance Sheet.Bank StatementsDocuments from a bank detailing the transactions carried out within an account over a specified period. The number of months requested will be specified in the requestNotes.501c3Official documentation proving a non-profit organization's tax-exempt status under IRS section 501(c)(3). 501c3 will only be requested from non-profits.Tax ReturnGovernment document detailing income, expenses, and other tax-related information. The year of the requested Tax Return will be specified in the requestNotes.InvoiceDetailed bill from transactions or services provided, listing quantities, prices, and terms. The date and amount of the transaction for which the Invoice is requested will be specified in the requestNotes.Driver’s License or PassportGovernment-issued identification that includes a photo and personal details. The name of the individual for whom the driver’s license is requested will be written in the requestNotes.Driver’s License - Back sideGovernment-issued identification that includes a photo and personal details.OtherAny document not listed that may be required based on specific circumstances. If other is selected, notes will be provided in the requestNotes field to explain the request.Written PromptsBusiness modelDescription of the merchant’s products/services, target market, and any unique features or value propositions that differentiate the business from others in the industry.Pricing modelDescription of the merchant’s pricing model, including general costs of goods or services.WebsiteLink to the merchant’s website. Facebook and Instagram websites are not accepted.No shopping cartDescription of how the merchant typically handles order placements, along with the usual lead time between when an order is made and when it’s fulfilled. This information is typically only requested from merchants without a shopping cart on their website.OtherIf other is selected, notes will be provided in the requestNotes field to explain the request. DESCRIPTION DESCRIPTION DESCRIPTION DESCRIPTION FilesBank Letter or Voided CheckVoided Check: Official bank document proving an account's authenticity with pre-printed account details. The Voided Check should:Be a pre-printed voided check (not a temporary check)Include the merchant legal nameInclude the merchant business addressBank Letter: Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should:Be on a bank letterheadInclude the registered name of your businessInclude an ACH/EFT routing numberInclude an ACH/EFT account numberBe signed and dated by a bank representative within the last 30 daysEIN LetterConfirmation letter from the IRS that provides the Employer Identification Number.Articles of IncorporationOfficial documents that legally establish the creation of a corporation.Business LicenseGovernment-issued document that certifies a business to operate legally within a certain geographical area. A photo of the Business License is accepted, as long as it is readable.Utility BillMonthly statement from a utility service (e.g., electricity, water, gas) verifying a business's address.Processing StatementRecent statements from a payment processor detailing transaction history. The number of months requested will be specified in the requestNotes.Financial StatementsComprehensive reports detailing a company's financial performance over a specific period, typically including a Profit and Loss (P&L) statement and a Balance Sheet.Bank StatementsDocuments from a bank detailing the transactions carried out within an account over a specified period. The number of months requested will be specified in the requestNotes.501c3Official documentation proving a non-profit organization's tax-exempt status under IRS section 501(c)(3). 501c3 will only be requested from non-profits.Tax ReturnGovernment document detailing income, expenses, and other tax-related information. The year of the requested Tax Return will be specified in the requestNotes.InvoiceDetailed bill from transactions or services provided, listing quantities, prices, and terms. The date and amount of the transaction for which the Invoice is requested will be specified in the requestNotes.Driver’s License or PassportGovernment-issued identification that includes a photo and personal details. The name of the individual for whom the driver’s license is requested will be written in the requestNotes.Driver’s License - Back sideGovernment-issued identification that includes a photo and personal details.OtherAny document not listed that may be required based on specific circumstances. If other is selected, notes will be provided in the requestNotes field to explain the request.Written PromptsBusiness modelDescription of the merchant’s products/services, target market, and any unique features or value propositions that differentiate the business from others in the industry.Pricing modelDescription of the merchant’s pricing model, including general costs of goods or services.WebsiteLink to the merchant’s website. Facebook and Instagram websites are not accepted.No shopping cartDescription of how the merchant typically handles order placements, along with the usual lead time between when an order is made and when it’s fulfilled. This information is typically only requested from merchants without a shopping cart on their website.OtherIf other is selected, notes will be provided in the requestNotes field to explain the request. Files Files Files Bank Letter or Voided CheckVoided Check: Official bank document proving an account's authenticity with pre-printed account details. The Voided Check should:Be a pre-printed voided check (not a temporary check)Include the merchant legal nameInclude the merchant business addressBank Letter: Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should:Be on a bank letterheadInclude the registered name of your businessInclude an ACH/EFT routing numberInclude an ACH/EFT account numberBe signed and dated by a bank representative within the last 30 days Bank Letter or Voided Check Voided Check: Official bank document proving an account's authenticity with pre-printed account details. The Voided Check should:Be a pre-printed voided check (not a temporary check)Include the merchant legal nameInclude the merchant business addressBank Letter: Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should:Be on a bank letterheadInclude the registered name of your businessInclude an ACH/EFT routing numberInclude an ACH/EFT account numberBe signed and dated by a bank representative within the last 30 days Voided Check: Be a pre-printed voided check (not a temporary check)Include the merchant legal nameInclude the merchant business address Be a pre-printed voided check (not a temporary check) Include the merchant legal name Include the merchant business address Bank Letter: Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should: Bank Letter: Be on a bank letterheadInclude the registered name of your businessInclude an ACH/EFT routing numberInclude an ACH/EFT account numberBe signed and dated by a bank representative within the last 30 days Be on a bank letterhead Include the registered name of your business Include an ACH/EFT routing number Include an ACH/EFT account number Be signed and dated by a bank representative within the last 30 days EIN LetterConfirmation letter from the IRS that provides the Employer Identification Number. EIN Letter Confirmation letter from the IRS that provides the Employer Identification Number. Articles of IncorporationOfficial documents that legally establish the creation of a corporation. Articles of Incorporation Official documents that legally establish the creation of a corporation. Business LicenseGovernment-issued document that certifies a business to operate legally within a certain geographical area. A photo of the Business License is accepted, as long as it is readable. Business License Government-issued document that certifies a business to operate legally within a certain geographical area. A photo of the Business License is accepted, as long as it is readable. Utility BillMonthly statement from a utility service (e.g., electricity, water, gas) verifying a business's address. Utility Bill Monthly statement from a utility service (e.g., electricity, water, gas) verifying a business's address. Processing StatementRecent statements from a payment processor detailing transaction history. The number of months requested will be specified in the requestNotes. Processing Statement Recent statements from a payment processor detailing transaction history. The number of months requested will be specified in the requestNotes. requestNotes Financial StatementsComprehensive reports detailing a company's financial performance over a specific period, typically including a Profit and Loss (P&L) statement and a Balance Sheet. Financial Statements Comprehensive reports detailing a company's financial performance over a specific period, typically including a Profit and Loss (P&L) statement and a Balance Sheet. Bank StatementsDocuments from a bank detailing the transactions carried out within an account over a specified period. The number of months requested will be specified in the requestNotes. Bank Statements Documents from a bank detailing the transactions carried out within an account over a specified period. The number of months requested will be specified in the requestNotes. requestNotes 501c3Official documentation proving a non-profit organization's tax-exempt status under IRS section 501(c)(3). 501c3 will only be requested from non-profits. 501c3 Official documentation proving a non-profit organization's tax-exempt status under IRS section 501(c)(3). 501c3 will only be requested from non-profits. Tax ReturnGovernment document detailing income, expenses, and other tax-related information. The year of the requested Tax Return will be specified in the requestNotes. Tax Return Government document detailing income, expenses, and other tax-related information. The year of the requested Tax Return will be specified in the requestNotes. requestNotes InvoiceDetailed bill from transactions or services provided, listing quantities, prices, and terms. The date and amount of the transaction for which the Invoice is requested will be specified in the requestNotes. Invoice Detailed bill from transactions or services provided, listing quantities, prices, and terms. The date and amount of the transaction for which the Invoice is requested will be specified in the requestNotes. requestNotes Driver’s License or PassportGovernment-issued identification that includes a photo and personal details. The name of the individual for whom the driver’s license is requested will be written in the requestNotes. Driver’s License or Passport Government-issued identification that includes a photo and personal details. The name of the individual for whom the driver’s license is requested will be written in the requestNotes. requestNotes Driver’s License - Back sideGovernment-issued identification that includes a photo and personal details. Driver’s License - Back side Government-issued identification that includes a photo and personal details. OtherAny document not listed that may be required based on specific circumstances. If other is selected, notes will be provided in the requestNotes field to explain the request. Other Any document not listed that may be required based on specific circumstances. If other is selected, notes will be provided in the requestNotes field to explain the request. other requestNotes Written Prompts Written Prompts Written Prompts Business modelDescription of the merchant’s products/services, target market, and any unique features or value propositions that differentiate the business from others in the industry. Business model Description of the merchant’s products/services, target market, and any unique features or value propositions that differentiate the business from others in the industry. Pricing modelDescription of the merchant’s pricing model, including general costs of goods or services. Pricing model Description of the merchant’s pricing model, including general costs of goods or services. WebsiteLink to the merchant’s website. Facebook and Instagram websites are not accepted. Website Link to the merchant’s website. Facebook and Instagram websites are not accepted. No shopping cartDescription of how the merchant typically handles order placements, along with the usual lead time between when an order is made and when it’s fulfilled. This information is typically only requested from merchants without a shopping cart on their website. No shopping cart Description of how the merchant typically handles order placements, along with the usual lead time between when an order is made and when it’s fulfilled. This information is typically only requested from merchants without a shopping cart on their website. OtherIf other is selected, notes will be provided in the requestNotes field to explain the request. Other If other is selected, notes will be provided in the requestNotes field to explain the request. other requestNotes Document Request Requirements [https://docs.tilled.com/docs/merchants/document-requests#document-request-requirements](https://docs.tilled.com/docs/merchants/document-requests#document-request-requirements) TYPEACCEPTED INPUTDETAILSFilesUpload a fileFile types: .pdf, .png, .jpg, .tiffFile size limit: 10MBWritten promptSubmit a written responseCharacter limit: Up to 255 characters TYPEACCEPTED INPUTDETAILS TYPEACCEPTED INPUTDETAILS TYPE TYPE ACCEPTED INPUT ACCEPTED INPUT DETAILS DETAILS FilesUpload a fileFile types: .pdf, .png, .jpg, .tiffFile size limit: 10MBWritten promptSubmit a written responseCharacter limit: Up to 255 characters FilesUpload a fileFile types: .pdf, .png, .jpg, .tiffFile size limit: 10MB Files Upload a file File types: .pdf, .png, .jpg, .tiffFile size limit: 10MB File size limit: 10MB Written promptSubmit a written responseCharacter limit: Up to 255 characters Written prompt Submit a written response Character limit: Up to 255 characters Document Request States [https://docs.tilled.com/docs/merchants/document-requests#document-request-states](https://docs.tilled.com/docs/merchants/document-requests#document-request-states) STATUSDESCRIPTIONrequestedDocument was requested from the merchant.submittedDocument was submitted to Tilled and is under review.verifiedDocument was verified. No further action is needed.rejectedDocument was rejected for failing to meet the review criteria. Reasons for rejection may include:Blurry or unreadable content, making the document hard to reviewDocument corruption or technical issues preventing it from being openedIrrelevance or errors in the document's contentIf a document is rejected, a detailed explanation will be provided and an updated document will be requested. STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION requestedDocument was requested from the merchant.submittedDocument was submitted to Tilled and is under review.verifiedDocument was verified. No further action is needed.rejectedDocument was rejected for failing to meet the review criteria. Reasons for rejection may include:Blurry or unreadable content, making the document hard to reviewDocument corruption or technical issues preventing it from being openedIrrelevance or errors in the document's contentIf a document is rejected, a detailed explanation will be provided and an updated document will be requested. requestedDocument was requested from the merchant. requested requested Document was requested from the merchant. submittedDocument was submitted to Tilled and is under review. submitted submitted Document was submitted to Tilled and is under review. Tilled verifiedDocument was verified. No further action is needed. verified verified Document was verified. No further action is needed. rejectedDocument was rejected for failing to meet the review criteria. Reasons for rejection may include:Blurry or unreadable content, making the document hard to reviewDocument corruption or technical issues preventing it from being openedIrrelevance or errors in the document's contentIf a document is rejected, a detailed explanation will be provided and an updated document will be requested. rejected rejected Document was rejected for failing to meet the review criteria. Reasons for rejection may include:Blurry or unreadable content, making the document hard to reviewDocument corruption or technical issues preventing it from being openedIrrelevance or errors in the document's contentIf a document is rejected, a detailed explanation will be provided and an updated document will be requested. Blurry or unreadable content, making the document hard to reviewDocument corruption or technical issues preventing it from being openedIrrelevance or errors in the document's content Blurry or unreadable content, making the document hard to review Document corruption or technical issues preventing it from being opened Irrelevance or errors in the document's content If a document is rejected, a detailed explanation will be provided and an updated document will be requested. Last updated on March 3, 2025 March 3, 2025 Account RequirementsManage Merchants [Account Requirements](https://docs.tilled.com/docs/merchants/account-requirements) [Manage Merchants](https://docs.tilled.com/docs/merchants/manage-merchants)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/manage-merchants",
    "title": "Tilled",
    "content": "Manage Merchants Tilled's Dashboard provides a centralized way to manage your merchant portfolio. Merchant Account States The merchant account status provides quick insight into the current state of a merchant’s account, whether they are in the onboarding process or are an active merchant. In the Dashboard, red statuses indicate information is being requested from the merchant, while purple statuses show the requested information has been submitted and is under review. Onboarding Merchants STATUSDESCRIPTIONcreatedMerchant application has been createdstartedMerchant has begun filling out the applicationsubmittedMerchant application has been submitted and is awaiting evaluation from Underwritingin reviewMerchant application is under review; additional documentation may be requestedrejectedMerchant application has been rejected by UnderwritingwithdrawnMerchant application has been withdrawn Active Merchants STATUSDESCRIPTIONactiveMerchant account is fully operational with all capabilities activepartially activeCertain account capabilities are active while others are under review (e.g., card is active, bank-to-bank is in review)account reviewAn account review has been conducted, and additional information is requested to prevent future processing disruptionsfunding holdFunding restrictions are in place for one or more capabilitiesdisabledMerchant account has been disabled due to suspension or termination Manage Merchant Details View processing details To view a merchant’s processing details, including MCC, statement descriptor, and billing schedule: Navigate to Merchants Select a merchant Click on the Processing Details tab Update business details To update business details such as the business address or bank account, contact support@tilled.com. When updating a bank account, include a voided check or a signed bank letter for the new account with the request. Ensure the bank account name matches either the DBA or the legal name of the business. FAQsWhen are 1099-K’s sent out?1099-K forms for card accounts are available on January 31st. Forms are mailed to the merchant’s address on file. 1099-K forms are not generated for ACH accounts.Last updated on March 10, 2025Document RequestsOnline Payments Manage Merchants Tilled's Dashboard provides a centralized way to manage your merchant portfolio. Tilled's Merchant Account States [https://docs.tilled.com/docs/merchants/manage-merchants#merchant-account-states](https://docs.tilled.com/docs/merchants/manage-merchants#merchant-account-states) The merchant account status provides quick insight into the current state of a merchant’s account, whether they are in the onboarding process or are an active merchant. In the Dashboard, red statuses indicate information is being requested from the merchant, while purple statuses show the requested information has been submitted and is under review. Onboarding Merchants [https://docs.tilled.com/docs/merchants/manage-merchants#onboarding-merchants](https://docs.tilled.com/docs/merchants/manage-merchants#onboarding-merchants) STATUSDESCRIPTIONcreatedMerchant application has been createdstartedMerchant has begun filling out the applicationsubmittedMerchant application has been submitted and is awaiting evaluation from Underwritingin reviewMerchant application is under review; additional documentation may be requestedrejectedMerchant application has been rejected by UnderwritingwithdrawnMerchant application has been withdrawn STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION createdMerchant application has been createdstartedMerchant has begun filling out the applicationsubmittedMerchant application has been submitted and is awaiting evaluation from Underwritingin reviewMerchant application is under review; additional documentation may be requestedrejectedMerchant application has been rejected by UnderwritingwithdrawnMerchant application has been withdrawn createdMerchant application has been created created created Merchant application has been created startedMerchant has begun filling out the application started started Merchant has begun filling out the application submittedMerchant application has been submitted and is awaiting evaluation from Underwriting submitted submitted Merchant application has been submitted and is awaiting evaluation from Underwriting in reviewMerchant application is under review; additional documentation may be requested in review in review Merchant application is under review; additional documentation may be requested rejectedMerchant application has been rejected by Underwriting rejected rejected Merchant application has been rejected by Underwriting withdrawnMerchant application has been withdrawn withdrawn withdrawn Merchant application has been withdrawn Active Merchants [https://docs.tilled.com/docs/merchants/manage-merchants#active-merchants](https://docs.tilled.com/docs/merchants/manage-merchants#active-merchants) STATUSDESCRIPTIONactiveMerchant account is fully operational with all capabilities activepartially activeCertain account capabilities are active while others are under review (e.g., card is active, bank-to-bank is in review)account reviewAn account review has been conducted, and additional information is requested to prevent future processing disruptionsfunding holdFunding restrictions are in place for one or more capabilitiesdisabledMerchant account has been disabled due to suspension or termination STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION activeMerchant account is fully operational with all capabilities activepartially activeCertain account capabilities are active while others are under review (e.g., card is active, bank-to-bank is in review)account reviewAn account review has been conducted, and additional information is requested to prevent future processing disruptionsfunding holdFunding restrictions are in place for one or more capabilitiesdisabledMerchant account has been disabled due to suspension or termination activeMerchant account is fully operational with all capabilities active active active Merchant account is fully operational with all capabilities active partially activeCertain account capabilities are active while others are under review (e.g., card is active, bank-to-bank is in review) partially active partially active Certain account capabilities are active while others are under review (e.g., card is active, bank-to-bank is in review) active in review account reviewAn account review has been conducted, and additional information is requested to prevent future processing disruptions account review account review An account review has been conducted, and additional information is requested to prevent future processing disruptions funding holdFunding restrictions are in place for one or more capabilities funding hold funding hold Funding restrictions are in place for one or more capabilities disabledMerchant account has been disabled due to suspension or termination disabled disabled Merchant account has been disabled due to suspension or termination Manage Merchant Details [https://docs.tilled.com/docs/merchants/manage-merchants#manage-merchant-details](https://docs.tilled.com/docs/merchants/manage-merchants#manage-merchant-details) View processing details [https://docs.tilled.com/docs/merchants/manage-merchants#view-processing-details](https://docs.tilled.com/docs/merchants/manage-merchants#view-processing-details) To view a merchant’s processing details, including MCC, statement descriptor, and billing schedule: Navigate to Merchants Select a merchant Click on the Processing Details tab Navigate to Merchants Merchants Select a merchant Click on the Processing Details tab Processing Details Update business details [https://docs.tilled.com/docs/merchants/manage-merchants#update-business-details](https://docs.tilled.com/docs/merchants/manage-merchants#update-business-details) To update business details such as the business address or bank account, contact support@tilled.com. [support@tilled.com](mailto:support@tilled.com) When updating a bank account, include a voided check or a signed bank letter for the new account with the request. Ensure the bank account name matches either the DBA or the legal name of the business. FAQsWhen are 1099-K’s sent out?1099-K forms for card accounts are available on January 31st. Forms are mailed to the merchant’s address on file. 1099-K forms are not generated for ACH accounts. FAQs When are 1099-K’s sent out?1099-K forms for card accounts are available on January 31st. Forms are mailed to the merchant’s address on file. 1099-K forms are not generated for ACH accounts. When are 1099-K’s sent out? When are 1099-K’s sent out? [https://docs.tilled.com/docs/merchants/manage-merchants#faq-when-are-1099-ks-sent-out](https://docs.tilled.com/docs/merchants/manage-merchants#faq-when-are-1099-ks-sent-out) 1099-K forms for card accounts are available on January 31st. Forms are mailed to the merchant’s address on file. 1099-K forms are not generated for ACH accounts. Last updated on March 10, 2025 March 10, 2025 Document RequestsOnline Payments [Document Requests](https://docs.tilled.com/docs/merchants/document-requests) [Online Payments](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents",
    "title": "Tilled",
    "content": "Online Payments Tilled offers various options for collecting one-time, online payments: API-only: Build a custom payment flow using the Payment IntentsAPI. Checkout sessions: Low-code option for software platforms to generate checkout_session_url that routes the customer to a Tilled-hosted payments page. Payment links: No-code option for merchants to generate a unique payment link from the Dashboard that routes the customer to a Tilled-hosted payments page. To determine which option is best for you, review our payment integration options. Collect an Online Payment API-OnlyCheckout SessionsPayment LinksManual PaymentAsynchronous payment flows are complex to manage because they depend on customer interactions that happen outside of your application. Payment IntentsAPI simplify this by tracking the payment status, serving as the source of truth throughout the payment lifecycle.Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment method, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Best practices when creating a payment intentCreate a Payment IntentAPI at the beginning of the checkout process, once you know the total amount. If the amount changes, you can Update a Payment IntentAPI as needed.If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session.Confirm the paymentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. If the payment intent status is requires_payment_method, you'll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Payment Intent StatesSTATUSDESCRIPTIONADDITIONAL INFORMATIONrequires_payment_methodPayment requires a payment methodIf a payment attempt fails, it reverts to this status.requires_confirmationPayment method has been provided but the payment requires confirmationThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.requires_capturePayment has been authorized but not capturedUsed when authorization and capture are separate actions.requires_actionPayment requires additional actionFor example, action needs to be taken on the terminal reader to complete the payment.processingPayment is processingProcessing time varies by payment method.succeededPayment has succeededA ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.canceledPayment has been canceledA payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. FAQsWhat payment methods are supported?Card, bank-to-bank, and Apple Pay are supported for online payments. HSA/FSA cards are not supported at this time.What card brands are supported?Visa, Mastercard, Discover, and Amex are supported, with Maestro, Diners, and JCB also available with Paysafe.What is the difference between a payment intent and a charge?A payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. In contrast, charges occur at a singular point in the payment process when a transfer of funds is initiated.Is it possible to perform more than one capture with the same payment intent?No, a payment intent can only be captured once, even if the captured amount is less than the authorized amount.What are platform fees and how are they used?Software platforms processing online payments through Paysafe can specify a platform_fee amount when Creating a Payment IntentAPI. This fee is deducted from the total payment amount and directed to the software platform, serving as a per-transaction service fee. The platform_fee cannot exceed the total payment amount minus processing fees.For example, if a customer makes a $10 payment to a merchant with a $1.00 platform fee, the merchant would receive $9.00, while the software platform collects $1.00 as the service fee.Common use cases for platform fees include:Passing on the merchant's processing cost to the customer, also known as surchargingBilling for service or SaaS feesEnabling tipping and donationsLast updated on March 10, 2025Manage MerchantsIn-Person Payments Online Payments Tilled offers various options for collecting one-time, online payments: Tilled API-only: Build a custom payment flow using the Payment IntentsAPI. Checkout sessions: Low-code option for software platforms to generate checkout_session_url that routes the customer to a Tilled-hosted payments page. Payment links: No-code option for merchants to generate a unique payment link from the Dashboard that routes the customer to a Tilled-hosted payments page. API-only: Build a custom payment flow using the Payment IntentsAPI. API-only: [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API Checkout sessions: Low-code option for software platforms to generate checkout_session_url that routes the customer to a Tilled-hosted payments page. Checkout sessions: checkout_session_url Tilled Payment links: No-code option for merchants to generate a unique payment link from the Dashboard that routes the customer to a Tilled-hosted payments page. Payment links: Tilled To determine which option is best for you, review our payment integration options. [payment integration options](https://docs.tilled.com/docs/get-started/integration-options) Collect an Online Payment [https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#collect-an-online-payment](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#collect-an-online-payment) API-OnlyCheckout SessionsPayment LinksManual PaymentAsynchronous payment flows are complex to manage because they depend on customer interactions that happen outside of your application. Payment IntentsAPI simplify this by tracking the payment status, serving as the source of truth throughout the payment lifecycle.Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment method, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Best practices when creating a payment intentCreate a Payment IntentAPI at the beginning of the checkout process, once you know the total amount. If the amount changes, you can Update a Payment IntentAPI as needed.If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session.Confirm the paymentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. If the payment intent status is requires_payment_method, you'll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Payment Intent StatesSTATUSDESCRIPTIONADDITIONAL INFORMATIONrequires_payment_methodPayment requires a payment methodIf a payment attempt fails, it reverts to this status.requires_confirmationPayment method has been provided but the payment requires confirmationThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.requires_capturePayment has been authorized but not capturedUsed when authorization and capture are separate actions.requires_actionPayment requires additional actionFor example, action needs to be taken on the terminal reader to complete the payment.processingPayment is processingProcessing time varies by payment method.succeededPayment has succeededA ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.canceledPayment has been canceledA payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. API-OnlyCheckout SessionsPayment LinksManual Payment [API-Only](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#api-only) [Checkout Sessions](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#checkout-sessions) [Payment Links](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#payment-links) [Manual Payment](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#manual-payment) Asynchronous payment flows are complex to manage because they depend on customer interactions that happen outside of your application. Payment IntentsAPI simplify this by tracking the payment status, serving as the source of truth throughout the payment lifecycle.Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment method, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Best practices when creating a payment intentCreate a Payment IntentAPI at the beginning of the checkout process, once you know the total amount. If the amount changes, you can Update a Payment IntentAPI as needed.If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session.Confirm the paymentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. If the payment intent status is requires_payment_method, you'll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Payment Intent StatesSTATUSDESCRIPTIONADDITIONAL INFORMATIONrequires_payment_methodPayment requires a payment methodIf a payment attempt fails, it reverts to this status.requires_confirmationPayment method has been provided but the payment requires confirmationThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.requires_capturePayment has been authorized but not capturedUsed when authorization and capture are separate actions.requires_actionPayment requires additional actionFor example, action needs to be taken on the terminal reader to complete the payment.processingPayment is processingProcessing time varies by payment method.succeededPayment has succeededA ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.canceledPayment has been canceledA payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. Asynchronous payment flows are complex to manage because they depend on customer interactions that happen outside of your application. Payment IntentsAPI simplify this by tracking the payment status, serving as the source of truth throughout the payment lifecycle. [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment method, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }'Best practices when creating a payment intentCreate a Payment IntentAPI at the beginning of the checkout process, once you know the total amount. If the amount changes, you can Update a Payment IntentAPI as needed.If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session.Confirm the paymentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. If the payment intent status is requires_payment_method, you'll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' Create a payment intent To Create a Payment IntentAPI, specify the necessary details such as currency, payment method, and amount. [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' Best practices when creating a payment intent Best practices when creating a payment intent Create a Payment IntentAPI at the beginning of the checkout process, once you know the total amount. If the amount changes, you can Update a Payment IntentAPI as needed.If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session. Create a Payment IntentAPI at the beginning of the checkout process, once you know the total amount. If the amount changes, you can Update a Payment IntentAPI as needed. [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API [Update a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) API If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session. Confirm the payment In order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. payment_method_id confirm=true If the payment intent status is requires_payment_method, you'll need to attach a payment method using the Confirm a Payment IntentAPI endpoint. requires_payment_method [Confirm a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) API curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\" }' Payment Intent States STATUSDESCRIPTIONADDITIONAL INFORMATIONrequires_payment_methodPayment requires a payment methodIf a payment attempt fails, it reverts to this status.requires_confirmationPayment method has been provided but the payment requires confirmationThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.requires_capturePayment has been authorized but not capturedUsed when authorization and capture are separate actions.requires_actionPayment requires additional actionFor example, action needs to be taken on the terminal reader to complete the payment.processingPayment is processingProcessing time varies by payment method.succeededPayment has succeededA ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.canceledPayment has been canceledA payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. STATUSDESCRIPTIONADDITIONAL INFORMATION STATUSDESCRIPTIONADDITIONAL INFORMATION STATUS STATUS DESCRIPTION DESCRIPTION ADDITIONAL INFORMATION ADDITIONAL INFORMATION requires_payment_methodPayment requires a payment methodIf a payment attempt fails, it reverts to this status.requires_confirmationPayment method has been provided but the payment requires confirmationThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.requires_capturePayment has been authorized but not capturedUsed when authorization and capture are separate actions.requires_actionPayment requires additional actionFor example, action needs to be taken on the terminal reader to complete the payment.processingPayment is processingProcessing time varies by payment method.succeededPayment has succeededA ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.canceledPayment has been canceledA payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. requires_payment_methodPayment requires a payment methodIf a payment attempt fails, it reverts to this status. requires_payment_method requires_payment_method Payment requires a payment method If a payment attempt fails, it reverts to this status. requires_confirmationPayment method has been provided but the payment requires confirmationThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously. requires_confirmation requires_confirmation Payment method has been provided but the payment requires confirmation This status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously. requires_capturePayment has been authorized but not capturedUsed when authorization and capture are separate actions. requires_capture requires_capture Payment has been authorized but not captured Used when authorization and capture are separate actions. requires_actionPayment requires additional actionFor example, action needs to be taken on the terminal reader to complete the payment. requires_action requires_action Payment requires additional action For example, action needs to be taken on the terminal reader to complete the payment. processingPayment is processingProcessing time varies by payment method. processing processing Payment is processing Processing time varies by payment method. succeededPayment has succeededA ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist. succeeded succeeded Payment has succeeded A ChargeAPI object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist. [ChargeAPI](https://docs.tilled.com/api-reference#tag/charges) API canceledPayment has been canceledA payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. canceled canceled Payment has been canceled A payment intent can be canceled before it reaches processing or succeeded status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed. processing succeeded FAQsWhat payment methods are supported?Card, bank-to-bank, and Apple Pay are supported for online payments. HSA/FSA cards are not supported at this time.What card brands are supported?Visa, Mastercard, Discover, and Amex are supported, with Maestro, Diners, and JCB also available with Paysafe.What is the difference between a payment intent and a charge?A payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. In contrast, charges occur at a singular point in the payment process when a transfer of funds is initiated.Is it possible to perform more than one capture with the same payment intent?No, a payment intent can only be captured once, even if the captured amount is less than the authorized amount.What are platform fees and how are they used?Software platforms processing online payments through Paysafe can specify a platform_fee amount when Creating a Payment IntentAPI. This fee is deducted from the total payment amount and directed to the software platform, serving as a per-transaction service fee. The platform_fee cannot exceed the total payment amount minus processing fees.For example, if a customer makes a $10 payment to a merchant with a $1.00 platform fee, the merchant would receive $9.00, while the software platform collects $1.00 as the service fee.Common use cases for platform fees include:Passing on the merchant's processing cost to the customer, also known as surchargingBilling for service or SaaS feesEnabling tipping and donations FAQs What payment methods are supported?Card, bank-to-bank, and Apple Pay are supported for online payments. HSA/FSA cards are not supported at this time. What payment methods are supported? What payment methods are supported? [https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-payment-methods-are-supported](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-payment-methods-are-supported) Card, bank-to-bank, and Apple Pay are supported for online payments. HSA/FSA cards are not supported at this time. What card brands are supported?Visa, Mastercard, Discover, and Amex are supported, with Maestro, Diners, and JCB also available with Paysafe. What card brands are supported? What card brands are supported? [https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-card-brands-are-supported](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-card-brands-are-supported) Visa, Mastercard, Discover, and Amex are supported, with Maestro, Diners, and JCB also available with Paysafe. What is the difference between a payment intent and a charge?A payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. In contrast, charges occur at a singular point in the payment process when a transfer of funds is initiated. What is the difference between a payment intent and a charge? What is the difference between a payment intent and a charge? [https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-is-the-difference-between-a-payment-intent-and-a-charge](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-is-the-difference-between-a-payment-intent-and-a-charge) A payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. In contrast, charges occur at a singular point in the payment process when a transfer of funds is initiated. Is it possible to perform more than one capture with the same payment intent?No, a payment intent can only be captured once, even if the captured amount is less than the authorized amount. Is it possible to perform more than one capture with the same payment intent? Is it possible to perform more than one capture with the same payment intent? [https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-is-it-possible-to-perform-more-than-one-capture-with-the-same-payment-intent](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-is-it-possible-to-perform-more-than-one-capture-with-the-same-payment-intent) No, a payment intent can only be captured once, even if the captured amount is less than the authorized amount. What are platform fees and how are they used?Software platforms processing online payments through Paysafe can specify a platform_fee amount when Creating a Payment IntentAPI. This fee is deducted from the total payment amount and directed to the software platform, serving as a per-transaction service fee. The platform_fee cannot exceed the total payment amount minus processing fees.For example, if a customer makes a $10 payment to a merchant with a $1.00 platform fee, the merchant would receive $9.00, while the software platform collects $1.00 as the service fee.Common use cases for platform fees include:Passing on the merchant's processing cost to the customer, also known as surchargingBilling for service or SaaS feesEnabling tipping and donations What are platform fees and how are they used? What are platform fees and how are they used? [https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-are-platform-fees-and-how-are-they-used](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#faq-what-are-platform-fees-and-how-are-they-used) Software platforms processing online payments through Paysafe can specify a platform_fee amount when Creating a Payment IntentAPI. This fee is deducted from the total payment amount and directed to the software platform, serving as a per-transaction service fee. The platform_fee cannot exceed the total payment amount minus processing fees.For example, if a customer makes a $10 payment to a merchant with a $1.00 platform fee, the merchant would receive $9.00, while the software platform collects $1.00 as the service fee.Common use cases for platform fees include:Passing on the merchant's processing cost to the customer, also known as surchargingBilling for service or SaaS feesEnabling tipping and donations Software platforms processing online payments through Paysafe can specify a platform_fee amount when Creating a Payment IntentAPI. This fee is deducted from the total payment amount and directed to the software platform, serving as a per-transaction service fee. The platform_fee cannot exceed the total payment amount minus processing fees. platform_fee [Creating a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API platform_fee For example, if a customer makes a $10 payment to a merchant with a $1.00 platform fee, the merchant would receive $9.00, while the software platform collects $1.00 as the service fee. Common use cases for platform fees include: Passing on the merchant's processing cost to the customer, also known as surchargingBilling for service or SaaS feesEnabling tipping and donations Passing on the merchant's processing cost to the customer, also known as surcharging Billing for service or SaaS fees Enabling tipping and donations Last updated on March 10, 2025 March 10, 2025 Manage MerchantsIn-Person Payments [Manage Merchants](https://docs.tilled.com/docs/merchants/manage-merchants) [In-Person Payments](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments",
    "title": "Tilled",
    "content": "In-Person Payments Tilled supports in-person payments on both TSYS and Paysafe, giving you the flexibility to choose the processor and terminal setup that best suits your business needs. This guide will walk you through the process of setting up your integration, from selecting your processor and terminals to handling key payment scenarios. ℹ️Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. Design Your Integration Choose your processorTilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which processor you will use.Choose your terminalsThe terminal options available to you depend on the processor you are using for in-person payments.Valor terminals with TSYS VL100: Best for countertop use VL110: Best for handheld use PAX terminals with Paysafe A920 A920 Pro A80 Check out our online store for more information.Identify required functionalityThere are several in-person payments features to choose from which you can implement during your integration.Manual captureOn-device tippingReceipts Order Developer Terminals To test your integration, you’ll need a developer terminal. The easiest and most convenient option is to order a developer terminal from Tilled. The terminal will arrive within a few business days, fully activated and ready to use. Simply connect it to Wi-Fi to get started. If you already own a developer terminal, you can use it as long as it is a VL100 or VL110 model and suitable for test environments. To use your own terminal: Email support to request an Activation Code. Enter the Activation Code onto the terminal to associate it with your test account. Collect an In-Person Payment If you are already familiar with collecting online payments using Tilled, the process for in-person payments will be similar. Retrieve the terminal idWhen a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique terminal_reader_id. Before processing a payment, List all Terminal ReadersAPI linked to the merchant’s account to specify the device from which the payment will be collected.curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\Create a card-present payment methodTo Create a Payment MethodAPI for an in-person payment, set the type=card_present and include the terminal_reader_id of the intended device.Create a Payment Method sample requestcurl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }'Collect the paymentBegin by creating a payment intent. Specify the payment_method_type property as card_present and use the payment_method_id obtained from the previous step. Confirming the payment intent transitions its status to requires_action, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment.Create a payment intent sample requestcurl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }'Complete the paymentSwipe or tap a payment method on the terminal to complete the payment.Confirm payment intent successCreate a Webhook EndpointAPI for payment_intent_events to receive updates about the success of the payment intent and the associated payment details. Key Scenarios to Handle Partial authorizations A Partial Authorization occurs when a payment is attempted for the full amount, but there are insufficient funds to cover it. Only the available amount is captured. It’s important that your software handles this flow, so that the merchant is aware when the full amount is not captured and can choose to create another payment for the difference. When there is a partial authorization, the API status for the charge is succeeded. Developers should compare either charge.amount_captured or payment_intent.amount_received to the original charge amount to determine how much was actually received. Same-day refunds All refunds are initiated through the Create a RefundAPI endpoint. For same-day refunds on payments made via a Paysafe terminal reader, the refund must be initiated through the terminal reader, which needs to be powered on and connected to the internet. If the terminal is offline, the same-day refund will not go through. Next-day or later refunds can be processed without the terminal being powered on or connected. Make sure your software is set up to handle these refund events: charge.refund.pending and charge.refunded. Same-day refunds for payments made through TSYS terminal readers are not processed through the terminal. Certify Your Integration After completing your integration, you need to certify it by handling specific payment scenarios. If you’ve implemented additional in-person features such as tip settings or card saving, ensure you test those flows as well. The developer tasks below are required to be completed in sandbox before launching your card-present solution with Tilled: Process payments:Create and complete 20 card-present payments.Configure webhooks:Configure and listen to refund webhooks.Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks.Process next-day or later refund:Process a next-day or later refund for 5 card-present payments.Process next-day partial refunds:Partially refund 5 card-present payments.Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers.Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result.Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result.Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. FAQsHow do I calculate the tip amount?To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received.What payment methods are supported?Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time.Can I switch in-person payment providers?Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader.Last updated on March 10, 2025Online PaymentsSubscriptions In-Person Payments Tilled supports in-person payments on both TSYS and Paysafe, giving you the flexibility to choose the processor and terminal setup that best suits your business needs. This guide will walk you through the process of setting up your integration, from selecting your processor and terminals to handling key payment scenarios. Tilled ℹ️Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. ℹ️ Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) Design Your Integration [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#design-your-integration](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#design-your-integration) Choose your processorTilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which processor you will use.Choose your terminalsThe terminal options available to you depend on the processor you are using for in-person payments.Valor terminals with TSYS VL100: Best for countertop use VL110: Best for handheld use PAX terminals with Paysafe A920 A920 Pro A80 Check out our online store for more information.Identify required functionalityThere are several in-person payments features to choose from which you can implement during your integration.Manual captureOn-device tippingReceipts Choose your processor [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-processor](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-processor) Tilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which processor you will use. Tilled [processor](https://docs.tilled.com/docs/get-started/processor-comparison) Choose your terminals [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-terminals](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-terminals) The terminal options available to you depend on the processor you are using for in-person payments. Valor terminals with TSYS Valor terminals with TSYS VL100: Best for countertop use VL110: Best for handheld use VL100: Best for countertop use VL100: VL110: Best for handheld use VL110: PAX terminals with Paysafe PAX terminals with Paysafe A920 A920 Pro A80 A920 A920 A920 Pro A920 Pro A80 A80 Check out our online store for more information. [online store](https://f1e839.myshopify.com/) Identify required functionality [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#identify-required-functionality](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#identify-required-functionality) There are several in-person payments features to choose from which you can implement during your integration. Manual captureOn-device tippingReceipts [Manual capture](https://docs.tilled.com/docs/payments/card/manual-capture) Manual capture [On-device tipping](https://docs.tilled.com/docs/payments/card/on-device-tipping) On-device tipping [Receipts](https://docs.tilled.com/docs/payments/card/receipts) Receipts Order Developer Terminals [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#order-developer-terminals](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#order-developer-terminals) To test your integration, you’ll need a developer terminal. The easiest and most convenient option is to order a developer terminal from Tilled. The terminal will arrive within a few business days, fully activated and ready to use. Simply connect it to Wi-Fi to get started. [order a developer terminal](https://f1e839.myshopify.com/) Tilled If you already own a developer terminal, you can use it as long as it is a VL100 or VL110 model and suitable for test environments. To use your own terminal: Email support to request an Activation Code. Enter the Activation Code onto the terminal to associate it with your test account. Email support to request an Activation Code. Enter the Activation Code onto the terminal to associate it with your test account. Collect an In-Person Payment [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-an-in-person-payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-an-in-person-payment) If you are already familiar with collecting online payments using Tilled, the process for in-person payments will be similar. Tilled Retrieve the terminal idWhen a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique terminal_reader_id. Before processing a payment, List all Terminal ReadersAPI linked to the merchant’s account to specify the device from which the payment will be collected.curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\Create a card-present payment methodTo Create a Payment MethodAPI for an in-person payment, set the type=card_present and include the terminal_reader_id of the intended device.Create a Payment Method sample requestcurl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }'Collect the paymentBegin by creating a payment intent. Specify the payment_method_type property as card_present and use the payment_method_id obtained from the previous step. Confirming the payment intent transitions its status to requires_action, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment.Create a payment intent sample requestcurl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }'Complete the paymentSwipe or tap a payment method on the terminal to complete the payment.Confirm payment intent successCreate a Webhook EndpointAPI for payment_intent_events to receive updates about the success of the payment intent and the associated payment details. Retrieve the terminal id [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#retrieve-the-terminal-id](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#retrieve-the-terminal-id) When a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique terminal_reader_id. Before processing a payment, List all Terminal ReadersAPI linked to the merchant’s account to specify the device from which the payment will be collected. Tilled terminal_reader_id [List all Terminal ReadersAPI](https://docs.tilled.com/api-reference#tag/terminal-readers/get/v1/terminal-readers) API curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ curl -L https://api.tilled.com/v1/terminal-readers/ { { TERMINAL_ID } } \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ Create a card-present payment method [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#create-a-card-present-payment-method](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#create-a-card-present-payment-method) To Create a Payment MethodAPI for an in-person payment, set the type=card_present and include the terminal_reader_id of the intended device. [Create a Payment MethodAPI](https://docs.tilled.com/api-reference#tag/payment-methods/post/v1/payment-methods) API type=card_present terminal_reader_id Create a Payment Method sample request Create a Payment Method sample request curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' Collect the payment [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-the-payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-the-payment) Begin by creating a payment intent. Specify the payment_method_type property as card_present and use the payment_method_id obtained from the previous step. Confirming the payment intent transitions its status to requires_action, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment. payment_method_type card_present payment_method_id requires_action Create a payment intent sample request Create a payment intent sample request curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' Complete the payment [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#complete-the-payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#complete-the-payment) Swipe or tap a payment method on the terminal to complete the payment. Confirm payment intent success [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#confirm-payment-intent-success](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#confirm-payment-intent-success) Create a Webhook EndpointAPI for payment_intent_events to receive updates about the success of the payment intent and the associated payment details. [Create a Webhook EndpointAPI](https://docs.tilled.com/api-reference#tag/webhook-endpoints/post/v1/webhook-endpoints) API payment_intent_events Key Scenarios to Handle [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#key-scenarios-to-handle](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#key-scenarios-to-handle) Partial authorizations [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#partial-authorizations](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#partial-authorizations) A Partial Authorization occurs when a payment is attempted for the full amount, but there are insufficient funds to cover it. Only the available amount is captured. It’s important that your software handles this flow, so that the merchant is aware when the full amount is not captured and can choose to create another payment for the difference. When there is a partial authorization, the API status for the charge is succeeded. Developers should compare either charge.amount_captured or payment_intent.amount_received to the original charge amount to determine how much was actually received. succeeded charge.amount_captured payment_intent.amount_received Same-day refunds [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#same-day-refunds](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#same-day-refunds) All refunds are initiated through the Create a RefundAPI endpoint. [Create a RefundAPI](https://docs.tilled.com/api-reference#tag/refunds/POST/v1/refunds) API For same-day refunds on payments made via a Paysafe terminal reader, the refund must be initiated through the terminal reader, which needs to be powered on and connected to the internet. If the terminal is offline, the same-day refund will not go through. Next-day or later refunds can be processed without the terminal being powered on or connected. Make sure your software is set up to handle these refund events: charge.refund.pending and charge.refunded. charge.refund.pending charge.refunded Same-day refunds for payments made through TSYS terminal readers are not processed through the terminal. Certify Your Integration [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#certify-your-integration](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#certify-your-integration) After completing your integration, you need to certify it by handling specific payment scenarios. If you’ve implemented additional in-person features such as tip settings or card saving, ensure you test those flows as well. The developer tasks below are required to be completed in sandbox before launching your card-present solution with Tilled: [sandbox](https://sandbox-app.tilled.com/) Tilled Process payments:Create and complete 20 card-present payments.Configure webhooks:Configure and listen to refund webhooks.Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks.Process next-day or later refund:Process a next-day or later refund for 5 card-present payments.Process next-day partial refunds:Partially refund 5 card-present payments.Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers.Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result.Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result.Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. Process payments:Create and complete 20 card-present payments. Process payments:Create and complete 20 card-present payments. Process payments: Configure webhooks:Configure and listen to refund webhooks. Configure webhooks:Configure and listen to refund webhooks. Configure webhooks: Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks. Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks. Process same-day refund: charge.refund.pending charge.refunded Process next-day or later refund:Process a next-day or later refund for 5 card-present payments. Process next-day or later refund:Process a next-day or later refund for 5 card-present payments. Process next-day or later refund: Process next-day partial refunds:Partially refund 5 card-present payments. Process next-day partial refunds:Partially refund 5 card-present payments. Process next-day partial refunds: Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers. Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers. Create a partial authorization: Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result. Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result. Cancel a payment: Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result. Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result. Cancel an incomplete payment: [Cancel a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/POST/v1/payment-intents/%7Bid%7D/cancel) API Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. Handle lost webhooks: payment_intent.succeeded FAQsHow do I calculate the tip amount?To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received.What payment methods are supported?Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time.Can I switch in-person payment providers?Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. FAQs How do I calculate the tip amount?To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received. How do I calculate the tip amount? How do I calculate the tip amount? [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-how-do-i-calculate-the-tip-amount](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-how-do-i-calculate-the-tip-amount) To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received. payment_intent.amount payment_intent.amount_received What payment methods are supported?Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time. What payment methods are supported? What payment methods are supported? [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-what-payment-methods-are-supported](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-what-payment-methods-are-supported) Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time. Can I switch in-person payment providers?Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Can I switch in-person payment providers? Can I switch in-person payment providers? [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-can-i-switch-in-person-payment-providers](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-can-i-switch-in-person-payment-providers) Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Manual capture: Manual capture is not supported by the Paysafe in-person payments solution. Manual capture: Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund. Same-day refunds: Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Printed receipts: Last updated on March 10, 2025 March 10, 2025 Online PaymentsSubscriptions [Online Payments](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents) [Subscriptions](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions",
    "title": "Tilled",
    "content": "Subscriptions SubscriptionsAPI allow you to charge customers on a recurring basis. A successful subscription flow follows this sequence: The subscription is created with a status of pending On the billing_cycle_anchor date, a Payment Intent is created and confirmed The subscription status is then updated to active The subscription remains in the active status indefinitely or until it reaches the specified cancel_at date, at which point its status changes to canceled Set Up a Subscription To set up a new subscription, you need an existing customer and their associated payment method. Create a customerTo Create a CustomerAPI, specify the customer’s details such as name, email address, and phone number. While you can’t change the customer associated with a subscription, you can update the payment method as needed.Create a Customer sample requestcurl -L 'https://api.tilled.com/v1/customers' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"email\": \"test@email.test\", \"first_name\": \"Jane\", \"middle_name\": \"Andrea\", \"last_name\": \"Doe\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"phone\": \"1234567890\" }'Attach a Payment MethodTo Attach a Payment Method to a CustomerAPI, specify the customer_id. If you have not yet made a payment method then you will need to Create a Payment MethodAPI.Create a Payment Method sample requestcurl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card\", \"card\": { \"number\": \"4111111111111111\", \"exp_month\": 12, \"exp_year\": 2031, \"cvc\": \"123\" }, \"billing_details\": { \"address\": { \"zip\": \"33139\" } } }'Attach a Payment Method sample requestcurl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"customer_id\": \"{{CUSTOMER_ID}}\" }'Create a subscriptionTo Create a SubscriptionAPI, specify the customer_id, payment_method_id, price, billing_cycle_anchor, interval_unit, and interval_count. Billing cycles cannot be edited after a subscription is created.Create a Subscription sample requestcurl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }'Process the subscription paymentWhen a payment is due, Tilled automatically generates a Payment Intent to handle the transaction. If the payment succeeds, the subscription remains active. If the payment fails, the subscription status changes to past_due and no further payments are attempted until you Update the Payment MethodAPI and Retry the SubscriptionAPI manually.SUBSCRIPTION OUTCOMEPAYMENT INTENT STATUSSUBSCRIPTION STATUSsuccesssucceededactivefailurerequires_payment_methodpast_dueTo retrieve all the payment attempts associated with a subscription, use the Payment IntentsAPI endpoint and pass the subscription_id query parameter. Manage a Subscription Although you can’t change the customer or billing cycle associated with a subscription, you can update the payment method as needed. Subscriptions can also be paused, resumed, and canceled. Define billing cycle Billing cycles are calculated using a combination of billing_cycle_anchor, interval_unit, and interval_count. The billing_cycle_anchor sets the first payment date and determines the schedule for subsequent payments — whether they occur weekly, monthly, or yearly. If the scheduled payment day does not exist in a given month, the payment will default to the last day of that month. For instance, a subscription that starts on January 31 would next be billed on February 28 (or 29 in a leap year), then on March 31 and so on. The interval_count specifies how many intervals, as defined by the interval_unit, will pass between billings. BILLING CYCLE ANCHORINTERVAL UNITINTERVAL COUNTFIRST 5 PAYMENT DATESDESCRIPTION01/01/21month101/01/21, 02/01/21, 03/01/21, 04/01/21, 05/01/21The first of every month.01/01/21month301/01/21, 04/01/21, 07/01/21, 10/01/21, 01/01/22The first of every third month.01/31/21month101/31/21, 02/28/21, 03/31/21, 04/30/21, 05/31/21The last day of every month.01/01/21 (Fri)week201/01/21 (Fri), 01/15/21 (Fri), 01/29/21 (Fri), 02/12/21 (Fri), 02/26/21 (Fri)Every other Friday.01/01/21year101/01/21, 01/01/22, 01/01/23, 01/01/24, 01/01/25The first of every year. Pause a subscription Pausing a subscription temporarily stops all payment attempts, giving you flexibility in managing customer accounts. Pause immediately: Pause a subscription immediately using the Pause a SubscriptionAPI endpoint. Pause on a future date: Set the pause_at attribute to define a future date for when the subscription should be paused. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Resume a subscription Resuming a subscription reactivates the billing cycle and continues the regular payment schedule. Resume immediately: Resume a subscription immediately using the Resume a SubscriptionAPI endpoint. Resume on a future date: Set the resume_at attribute to define a future date for when the subscription should resume. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Cancel a subscription Canceling a subscription permanently stops all future payments. Cancel immediately: Cancel a subscription immediately using the Cancel a SubscriptionAPI endpoint. Cancel on a future date: Set the cancel_at attribute to define a future date for the subscription cancellation. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Subscription States STATUSDESCRIPTIONpendingThe subscription has been created and is awaiting the initial payment processing at the billing_cycle_anchor.activeThe subscription is current, and the most recent payment was successful.past_dueThe latest payment has failed or was not attempted. Further payment attempts will wait until a retryAPI is initiated.pausedThe subscription is on hold, and no payments will be processed until it is resumedAPI.canceledThe subscription has been canceled, and no future payments will be made. Subscription Events Subscriptions trigger three specific types of events: subscription.created subscription.updated subscription.canceled Events related to Payment Intents are also generated and will include the subscription_id in the event payload. When you create a customer with a valid payment method and associate them with a subscription, the following events will be triggered, although their exact order may vary: customer.created: Indicates that a customer record has been successfully created. payment_method.attached: Indicates that a payment method has been successfully attached to the customer. subscription.created: Indicates that the subscription has been created. payment_intent.created, payment_intent.succeeded, and charge.succeeded: These events indicate that the customer’s payment method was successfully charged. subscription.updated: This event is sent when the subscription status changes to active, and the payload includes the next_payment_at date, which is when the next automatic payment attempt will occur. Using Subscriptions to Schedule One-Time Payments While SubscriptionsAPI are primarily designed for recurring payments, they can also be adapted to schedule a one-time future payment. To implement this, first Create a CustomerAPI, Attach a Payment Method to a CustomerAPI, then you can Create a SubscriptionAPI and set the cancel_at attribute to the day after the billing_cycle_anchor date. Create a Subscription sample request curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"cancel_at\": \"2025-07-05\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' FAQsHow do I change the due date for a subscription?The billing_cycle_anchor is fixed throughout the subscription's lifecycle and cannot be modified. Tilled calculates all future payments based on the initial date following the first payment. If you need to change the billing anchor, you will need to cancel the existing subscription and create a new one with the updated anchor.Can I update a subscription’s payment intent directly?Yes. However, updating the payment intent will not affect the subscription’s status. If the subscription has a status of past_due, users should Update a SubscriptionAPI with a valid payment method and Retry a SubscriptionAPI.How do I link a payment intent back to the subscription?There are two approaches to linking a payment intent back to the subscription:1. Include metadata in your subscription request to query when retrieving a payment intent. The id will be listed in the subscription_id object.2. Configure webhooks for the payment_intent.succeeded event, which includes the payment_intent_id and subscription_id.Last updated on March 10, 2025In-Person PaymentsRefund a Payment Subscriptions SubscriptionsAPI allow you to charge customers on a recurring basis. A successful subscription flow follows this sequence: [SubscriptionsAPI](https://docs.tilled.com/api-reference#tag/subscriptions) API The subscription is created with a status of pending On the billing_cycle_anchor date, a Payment Intent is created and confirmed The subscription status is then updated to active The subscription remains in the active status indefinitely or until it reaches the specified cancel_at date, at which point its status changes to canceled The subscription is created with a status of pending pending On the billing_cycle_anchor date, a Payment Intent is created and confirmed billing_cycle_anchor The subscription status is then updated to active active The subscription remains in the active status indefinitely or until it reaches the specified cancel_at date, at which point its status changes to canceled active cancel_at canceled Set Up a Subscription [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#set-up-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#set-up-a-subscription) To set up a new subscription, you need an existing customer and their associated payment method. Create a customerTo Create a CustomerAPI, specify the customer’s details such as name, email address, and phone number. While you can’t change the customer associated with a subscription, you can update the payment method as needed.Create a Customer sample requestcurl -L 'https://api.tilled.com/v1/customers' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"email\": \"test@email.test\", \"first_name\": \"Jane\", \"middle_name\": \"Andrea\", \"last_name\": \"Doe\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"phone\": \"1234567890\" }'Attach a Payment MethodTo Attach a Payment Method to a CustomerAPI, specify the customer_id. If you have not yet made a payment method then you will need to Create a Payment MethodAPI.Create a Payment Method sample requestcurl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card\", \"card\": { \"number\": \"4111111111111111\", \"exp_month\": 12, \"exp_year\": 2031, \"cvc\": \"123\" }, \"billing_details\": { \"address\": { \"zip\": \"33139\" } } }'Attach a Payment Method sample requestcurl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"customer_id\": \"{{CUSTOMER_ID}}\" }'Create a subscriptionTo Create a SubscriptionAPI, specify the customer_id, payment_method_id, price, billing_cycle_anchor, interval_unit, and interval_count. Billing cycles cannot be edited after a subscription is created.Create a Subscription sample requestcurl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }'Process the subscription paymentWhen a payment is due, Tilled automatically generates a Payment Intent to handle the transaction. If the payment succeeds, the subscription remains active. If the payment fails, the subscription status changes to past_due and no further payments are attempted until you Update the Payment MethodAPI and Retry the SubscriptionAPI manually.SUBSCRIPTION OUTCOMEPAYMENT INTENT STATUSSUBSCRIPTION STATUSsuccesssucceededactivefailurerequires_payment_methodpast_dueTo retrieve all the payment attempts associated with a subscription, use the Payment IntentsAPI endpoint and pass the subscription_id query parameter. Create a customer [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#create-a-customer](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#create-a-customer) To Create a CustomerAPI, specify the customer’s details such as name, email address, and phone number. While you can’t change the customer associated with a subscription, you can update the payment method as needed. [Create a CustomerAPI](https://docs.tilled.com/api-reference#tag/customers/post/v1/customers) API Create a Customer sample request Create a Customer sample request curl -L 'https://api.tilled.com/v1/customers' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"email\": \"test@email.test\", \"first_name\": \"Jane\", \"middle_name\": \"Andrea\", \"last_name\": \"Doe\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"phone\": \"1234567890\" }' curl -L 'https://api.tilled.com/v1/customers' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"email\": \"test@email.test\", \"first_name\": \"Jane\", \"middle_name\": \"Andrea\", \"last_name\": \"Doe\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"phone\": \"1234567890\" }' curl -L 'https://api.tilled.com/v1/customers' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"email\": \"test@email.test\", \"first_name\": \"Jane\", \"middle_name\": \"Andrea\", \"last_name\": \"Doe\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"phone\": \"1234567890\" }' curl -L 'https://api.tilled.com/v1/customers' \\ curl -L 'https://api.tilled.com/v1/customers' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"email\": \"test@email.test\", \"first_name\": \"Jane\", \"middle_name\": \"Andrea\", \"last_name\": \"Doe\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"phone\": \"1234567890\" }' Attach a Payment Method [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#attach-a-payment-method](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#attach-a-payment-method) To Attach a Payment Method to a CustomerAPI, specify the customer_id. If you have not yet made a payment method then you will need to Create a Payment MethodAPI. [Attach a Payment Method to a CustomerAPI](https://docs.tilled.com/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) API customer_id [Create a Payment MethodAPI](https://docs.tilled.com/api-reference#tag/payment-methods/post/v1/payment-methods) API Create a Payment Method sample request Create a Payment Method sample request curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card\", \"card\": { \"number\": \"4111111111111111\", \"exp_month\": 12, \"exp_year\": 2031, \"cvc\": \"123\" }, \"billing_details\": { \"address\": { \"zip\": \"33139\" } } }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card\", \"card\": { \"number\": \"4111111111111111\", \"exp_month\": 12, \"exp_year\": 2031, \"cvc\": \"123\" }, \"billing_details\": { \"address\": { \"zip\": \"33139\" } } }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card\", \"card\": { \"number\": \"4111111111111111\", \"exp_month\": 12, \"exp_year\": 2031, \"cvc\": \"123\" }, \"billing_details\": { \"address\": { \"zip\": \"33139\" } } }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"type\": \"card\", \"card\": { \"number\": \"4111111111111111\", \"exp_month\": 12, \"exp_year\": 2031, \"cvc\": \"123\" }, \"billing_details\": { \"address\": { \"zip\": \"33139\" } } }' Attach a Payment Method sample request Attach a Payment Method sample request curl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"customer_id\": \"{{CUSTOMER_ID}}\" }' curl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"customer_id\": \"{{CUSTOMER_ID}}\" }' curl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"customer_id\": \"{{CUSTOMER_ID}}\" }' curl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ curl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"customer_id\": \"{{CUSTOMER_ID}}\" }' Create a subscription [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#create-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#create-a-subscription) To Create a SubscriptionAPI, specify the customer_id, payment_method_id, price, billing_cycle_anchor, interval_unit, and interval_count. Billing cycles cannot be edited after a subscription is created. [Create a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions) API customer_id payment_method_id price billing_cycle_anchor interval_unit interval_count Create a Subscription sample request Create a Subscription sample request curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' curl -L 'https://api.tilled.com/v1/subscriptions' \\ curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' Process the subscription payment [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#process-the-subscription-payment](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#process-the-subscription-payment) When a payment is due, Tilled automatically generates a Payment Intent to handle the transaction. If the payment succeeds, the subscription remains active. If the payment fails, the subscription status changes to past_due and no further payments are attempted until you Update the Payment MethodAPI and Retry the SubscriptionAPI manually. Tilled past_due [Update the Payment MethodAPI](https://docs.tilled.com/api-reference#tag/payment-methods/patch/v1/payment-methods/%7Bid%7D) API [Retry the SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/retry) API SUBSCRIPTION OUTCOMEPAYMENT INTENT STATUSSUBSCRIPTION STATUSsuccesssucceededactivefailurerequires_payment_methodpast_due SUBSCRIPTION OUTCOMEPAYMENT INTENT STATUSSUBSCRIPTION STATUS SUBSCRIPTION OUTCOMEPAYMENT INTENT STATUSSUBSCRIPTION STATUS SUBSCRIPTION OUTCOME SUBSCRIPTION OUTCOME PAYMENT INTENT STATUS PAYMENT INTENT STATUS SUBSCRIPTION STATUS SUBSCRIPTION STATUS successsucceededactivefailurerequires_payment_methodpast_due successsucceededactive success succeeded succeeded active active failurerequires_payment_methodpast_due failure requires_payment_method requires_payment_method past_due past_due To retrieve all the payment attempts associated with a subscription, use the Payment IntentsAPI endpoint and pass the subscription_id query parameter. [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API subscription_id Manage a Subscription [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#manage-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#manage-a-subscription) Although you can’t change the customer or billing cycle associated with a subscription, you can update the payment method as needed. Subscriptions can also be paused, resumed, and canceled. Define billing cycle [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#define-billing-cycle](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#define-billing-cycle) Billing cycles are calculated using a combination of billing_cycle_anchor, interval_unit, and interval_count. The billing_cycle_anchor sets the first payment date and determines the schedule for subsequent payments — whether they occur weekly, monthly, or yearly. billing_cycle_anchor interval_unit interval_count billing_cycle_anchor If the scheduled payment day does not exist in a given month, the payment will default to the last day of that month. For instance, a subscription that starts on January 31 would next be billed on February 28 (or 29 in a leap year), then on March 31 and so on. The interval_count specifies how many intervals, as defined by the interval_unit, will pass between billings. interval_count interval_unit BILLING CYCLE ANCHORINTERVAL UNITINTERVAL COUNTFIRST 5 PAYMENT DATESDESCRIPTION01/01/21month101/01/21, 02/01/21, 03/01/21, 04/01/21, 05/01/21The first of every month.01/01/21month301/01/21, 04/01/21, 07/01/21, 10/01/21, 01/01/22The first of every third month.01/31/21month101/31/21, 02/28/21, 03/31/21, 04/30/21, 05/31/21The last day of every month.01/01/21 (Fri)week201/01/21 (Fri), 01/15/21 (Fri), 01/29/21 (Fri), 02/12/21 (Fri), 02/26/21 (Fri)Every other Friday.01/01/21year101/01/21, 01/01/22, 01/01/23, 01/01/24, 01/01/25The first of every year. BILLING CYCLE ANCHORINTERVAL UNITINTERVAL COUNTFIRST 5 PAYMENT DATESDESCRIPTION BILLING CYCLE ANCHORINTERVAL UNITINTERVAL COUNTFIRST 5 PAYMENT DATESDESCRIPTION BILLING CYCLE ANCHOR BILLING CYCLE ANCHOR INTERVAL UNIT INTERVAL UNIT INTERVAL COUNT INTERVAL COUNT FIRST 5 PAYMENT DATES FIRST 5 PAYMENT DATES DESCRIPTION DESCRIPTION 01/01/21month101/01/21, 02/01/21, 03/01/21, 04/01/21, 05/01/21The first of every month.01/01/21month301/01/21, 04/01/21, 07/01/21, 10/01/21, 01/01/22The first of every third month.01/31/21month101/31/21, 02/28/21, 03/31/21, 04/30/21, 05/31/21The last day of every month.01/01/21 (Fri)week201/01/21 (Fri), 01/15/21 (Fri), 01/29/21 (Fri), 02/12/21 (Fri), 02/26/21 (Fri)Every other Friday.01/01/21year101/01/21, 01/01/22, 01/01/23, 01/01/24, 01/01/25The first of every year. 01/01/21month101/01/21, 02/01/21, 03/01/21, 04/01/21, 05/01/21The first of every month. 01/01/21 month 1 01/01/21, 02/01/21, 03/01/21, 04/01/21, 05/01/21 The first of every month. 01/01/21month301/01/21, 04/01/21, 07/01/21, 10/01/21, 01/01/22The first of every third month. 01/01/21 month 3 01/01/21, 04/01/21, 07/01/21, 10/01/21, 01/01/22 The first of every third month. 01/31/21month101/31/21, 02/28/21, 03/31/21, 04/30/21, 05/31/21The last day of every month. 01/31/21 month 1 01/31/21, 02/28/21, 03/31/21, 04/30/21, 05/31/21 The last day of every month. 01/01/21 (Fri)week201/01/21 (Fri), 01/15/21 (Fri), 01/29/21 (Fri), 02/12/21 (Fri), 02/26/21 (Fri)Every other Friday. 01/01/21 (Fri) week 2 01/01/21 (Fri), 01/15/21 (Fri), 01/29/21 (Fri), 02/12/21 (Fri), 02/26/21 (Fri) Every other Friday. 01/01/21year101/01/21, 01/01/22, 01/01/23, 01/01/24, 01/01/25The first of every year. 01/01/21 year 1 01/01/21, 01/01/22, 01/01/23, 01/01/24, 01/01/25 The first of every year. Pause a subscription [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#pause-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#pause-a-subscription) Pausing a subscription temporarily stops all payment attempts, giving you flexibility in managing customer accounts. Pause immediately: Pause a subscription immediately using the Pause a SubscriptionAPI endpoint. Pause on a future date: Set the pause_at attribute to define a future date for when the subscription should be paused. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Pause immediately: Pause a subscription immediately using the Pause a SubscriptionAPI endpoint. Pause immediately: [Pause a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/pause) API Pause on a future date: Set the pause_at attribute to define a future date for when the subscription should be paused. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Pause on a future date: pause_at [Create a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions) API [Update a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D) API Resume a subscription [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#resume-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#resume-a-subscription) Resuming a subscription reactivates the billing cycle and continues the regular payment schedule. Resume immediately: Resume a subscription immediately using the Resume a SubscriptionAPI endpoint. Resume on a future date: Set the resume_at attribute to define a future date for when the subscription should resume. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Resume immediately: Resume a subscription immediately using the Resume a SubscriptionAPI endpoint. Resume immediately: [Resume a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/resume) API Resume on a future date: Set the resume_at attribute to define a future date for when the subscription should resume. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Resume on a future date: resume_at [Create a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions) API [Update a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D) API Cancel a subscription [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#cancel-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#cancel-a-subscription) Canceling a subscription permanently stops all future payments. Cancel immediately: Cancel a subscription immediately using the Cancel a SubscriptionAPI endpoint. Cancel on a future date: Set the cancel_at attribute to define a future date for the subscription cancellation. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Cancel immediately: Cancel a subscription immediately using the Cancel a SubscriptionAPI endpoint. Cancel immediately: [Cancel a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/cancel) API Cancel on a future date: Set the cancel_at attribute to define a future date for the subscription cancellation. This can be done when you Create a SubscriptionAPI or Update a SubscriptionAPI. Cancel on a future date: cancel_at [Create a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions) API [Update a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D) API Subscription States [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#subscription-states](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#subscription-states) STATUSDESCRIPTIONpendingThe subscription has been created and is awaiting the initial payment processing at the billing_cycle_anchor.activeThe subscription is current, and the most recent payment was successful.past_dueThe latest payment has failed or was not attempted. Further payment attempts will wait until a retryAPI is initiated.pausedThe subscription is on hold, and no payments will be processed until it is resumedAPI.canceledThe subscription has been canceled, and no future payments will be made. STATUSDESCRIPTION STATUSDESCRIPTION STATUS STATUS DESCRIPTION DESCRIPTION pendingThe subscription has been created and is awaiting the initial payment processing at the billing_cycle_anchor.activeThe subscription is current, and the most recent payment was successful.past_dueThe latest payment has failed or was not attempted. Further payment attempts will wait until a retryAPI is initiated.pausedThe subscription is on hold, and no payments will be processed until it is resumedAPI.canceledThe subscription has been canceled, and no future payments will be made. pendingThe subscription has been created and is awaiting the initial payment processing at the billing_cycle_anchor. pending pending The subscription has been created and is awaiting the initial payment processing at the billing_cycle_anchor. billing_cycle_anchor activeThe subscription is current, and the most recent payment was successful. active active The subscription is current, and the most recent payment was successful. past_dueThe latest payment has failed or was not attempted. Further payment attempts will wait until a retryAPI is initiated. past_due past_due The latest payment has failed or was not attempted. Further payment attempts will wait until a retryAPI is initiated. [retryAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/retry) API pausedThe subscription is on hold, and no payments will be processed until it is resumedAPI. paused paused The subscription is on hold, and no payments will be processed until it is resumedAPI. [resumedAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/resume) API canceledThe subscription has been canceled, and no future payments will be made. canceled canceled The subscription has been canceled, and no future payments will be made. Subscription Events [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#subscription-events](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#subscription-events) Subscriptions trigger three specific types of events: [events](https://docs.tilled.com/docs/webhooks/webhook-events) subscription.created subscription.updated subscription.canceled subscription.created subscription.created subscription.updated subscription.updated subscription.canceled subscription.canceled Events related to Payment Intents are also generated and will include the subscription_id in the event payload. subscription_id When you create a customer with a valid payment method and associate them with a subscription, the following events will be triggered, although their exact order may vary: customer.created: Indicates that a customer record has been successfully created. payment_method.attached: Indicates that a payment method has been successfully attached to the customer. subscription.created: Indicates that the subscription has been created. payment_intent.created, payment_intent.succeeded, and charge.succeeded: These events indicate that the customer’s payment method was successfully charged. subscription.updated: This event is sent when the subscription status changes to active, and the payload includes the next_payment_at date, which is when the next automatic payment attempt will occur. customer.created: Indicates that a customer record has been successfully created. customer.created payment_method.attached: Indicates that a payment method has been successfully attached to the customer. payment_method.attached subscription.created: Indicates that the subscription has been created. subscription.created payment_intent.created, payment_intent.succeeded, and charge.succeeded: These events indicate that the customer’s payment method was successfully charged. payment_intent.created payment_intent.succeeded charge.succeeded subscription.updated: This event is sent when the subscription status changes to active, and the payload includes the next_payment_at date, which is when the next automatic payment attempt will occur. subscription.updated next_payment_at Using Subscriptions to Schedule One-Time Payments [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#using-subscriptions-to-schedule-one-time-payments](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#using-subscriptions-to-schedule-one-time-payments) While SubscriptionsAPI are primarily designed for recurring payments, they can also be adapted to schedule a one-time future payment. To implement this, first Create a CustomerAPI, Attach a Payment Method to a CustomerAPI, then you can Create a SubscriptionAPI and set the cancel_at attribute to the day after the billing_cycle_anchor date. [SubscriptionsAPI](https://docs.tilled.com/api-reference#tag/subscriptions) API [Create a CustomerAPI](https://docs.tilled.com/api-reference#tag/customers/post/v1/customers) API [Attach a Payment Method to a CustomerAPI](https://docs.tilled.com/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) API [Create a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions) API cancel_at billing_cycle_anchor Create a Subscription sample request Create a Subscription sample request curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"cancel_at\": \"2025-07-05\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"cancel_at\": \"2025-07-05\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"cancel_at\": \"2025-07-05\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' curl -L 'https://api.tilled.com/v1/subscriptions' \\ curl -L 'https://api.tilled.com/v1/subscriptions' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"billing_cycle_anchor\": \"2024-07-04\", \"cancel_at\": \"2025-07-05\", \"currency\": \"usd\", \"customer_id\": “{{CUSTOMER_ID}}”, \"interval_count\": 1, \"interval_unit\": \"week\", \"metadata\": { \"order_id\": \"100123\", \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\" }, \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\", \"platform_fee_amount\": 500, \"price\": 10000 }' FAQsHow do I change the due date for a subscription?The billing_cycle_anchor is fixed throughout the subscription's lifecycle and cannot be modified. Tilled calculates all future payments based on the initial date following the first payment. If you need to change the billing anchor, you will need to cancel the existing subscription and create a new one with the updated anchor.Can I update a subscription’s payment intent directly?Yes. However, updating the payment intent will not affect the subscription’s status. If the subscription has a status of past_due, users should Update a SubscriptionAPI with a valid payment method and Retry a SubscriptionAPI.How do I link a payment intent back to the subscription?There are two approaches to linking a payment intent back to the subscription:1. Include metadata in your subscription request to query when retrieving a payment intent. The id will be listed in the subscription_id object.2. Configure webhooks for the payment_intent.succeeded event, which includes the payment_intent_id and subscription_id. FAQs How do I change the due date for a subscription?The billing_cycle_anchor is fixed throughout the subscription's lifecycle and cannot be modified. Tilled calculates all future payments based on the initial date following the first payment. If you need to change the billing anchor, you will need to cancel the existing subscription and create a new one with the updated anchor. How do I change the due date for a subscription? How do I change the due date for a subscription? [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#faq-how-do-i-change-the-due-date-for-a-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#faq-how-do-i-change-the-due-date-for-a-subscription) The billing_cycle_anchor is fixed throughout the subscription's lifecycle and cannot be modified. Tilled calculates all future payments based on the initial date following the first payment. If you need to change the billing anchor, you will need to cancel the existing subscription and create a new one with the updated anchor. billing_cycle_anchor Tilled Can I update a subscription’s payment intent directly?Yes. However, updating the payment intent will not affect the subscription’s status. If the subscription has a status of past_due, users should Update a SubscriptionAPI with a valid payment method and Retry a SubscriptionAPI. Can I update a subscription’s payment intent directly? Can I update a subscription’s payment intent directly? [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#faq-can-i-update-a-subscriptions-payment-intent-directly](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#faq-can-i-update-a-subscriptions-payment-intent-directly) Yes. However, updating the payment intent will not affect the subscription’s status. If the subscription has a status of past_due, users should Update a SubscriptionAPI with a valid payment method and Retry a SubscriptionAPI. past_due [Update a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D) API [Retry a SubscriptionAPI](https://docs.tilled.com/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/retry) API How do I link a payment intent back to the subscription?There are two approaches to linking a payment intent back to the subscription:1. Include metadata in your subscription request to query when retrieving a payment intent. The id will be listed in the subscription_id object.2. Configure webhooks for the payment_intent.succeeded event, which includes the payment_intent_id and subscription_id. How do I link a payment intent back to the subscription? How do I link a payment intent back to the subscription? [https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#faq-how-do-i-link-a-payment-intent-back-to-the-subscription](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions#faq-how-do-i-link-a-payment-intent-back-to-the-subscription) There are two approaches to linking a payment intent back to the subscription:1. Include metadata in your subscription request to query when retrieving a payment intent. The id will be listed in the subscription_id object.2. Configure webhooks for the payment_intent.succeeded event, which includes the payment_intent_id and subscription_id. subscription_id payment_intent.succeeded payment_intent_id subscription_id Last updated on March 10, 2025 March 10, 2025 In-Person PaymentsRefund a Payment [In-Person Payments](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments) [Refund a Payment](https://docs.tilled.com/docs/payments/refunds)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/refunds",
    "title": "Tilled",
    "content": "Refunds When processing a refund, Tilled dynamically determines whether to issue a refund or void the payment based on the payment’s batch status. If the payment has already been batched, a refund will be processed. If the payment has not been batched, it will be voided, effectively reversing the authorization. When issuing a refund, please keep in mind: The refund amount cannot be greater than the original charge amount Partial refunds cannot be issued before the payment has been batched and settled For bank-to-bank payments, a refund greater than $500 may require risk review Issue a Refund DashboardAPITo issue a refund:Navigate to the Payments pageSelect the payment you wish to refundClick the Issue Refund buttonEnter the refund amount and reason Refund-Related Fees Refunds incur an additional transaction fee, as well as any fees associated with the original charge. In contrast, voided payments do not incur additional fees and any fees related to the original charge are reversed.Last updated on February 28, 2025SubscriptionsDeclines Refunds When processing a refund, Tilled dynamically determines whether to issue a refund or void the payment based on the payment’s batch status. If the payment has already been batched, a refund will be processed. If the payment has not been batched, it will be voided, effectively reversing the authorization. Tilled When issuing a refund, please keep in mind: The refund amount cannot be greater than the original charge amount Partial refunds cannot be issued before the payment has been batched and settled For bank-to-bank payments, a refund greater than $500 may require risk review When issuing a refund, please keep in mind: The refund amount cannot be greater than the original charge amount Partial refunds cannot be issued before the payment has been batched and settled For bank-to-bank payments, a refund greater than $500 may require risk review The refund amount cannot be greater than the original charge amount Partial refunds cannot be issued before the payment has been batched and settled For bank-to-bank payments, a refund greater than $500 may require risk review Issue a Refund [https://docs.tilled.com/docs/payments/refunds#issue-a-refund](https://docs.tilled.com/docs/payments/refunds#issue-a-refund) DashboardAPITo issue a refund:Navigate to the Payments pageSelect the payment you wish to refundClick the Issue Refund buttonEnter the refund amount and reason DashboardAPI [Dashboard](https://docs.tilled.com/docs/payments/refunds#dashboard) [API](https://docs.tilled.com/docs/payments/refunds#api) To issue a refund:Navigate to the Payments pageSelect the payment you wish to refundClick the Issue Refund buttonEnter the refund amount and reason To issue a refund: Navigate to the Payments pageSelect the payment you wish to refundClick the Issue Refund buttonEnter the refund amount and reason Navigate to the Payments page Payments Select the payment you wish to refund Click the Issue Refund button Issue Refund Enter the refund amount and reason Refund-Related Fees [https://docs.tilled.com/docs/payments/refunds#refund-related-fees](https://docs.tilled.com/docs/payments/refunds#refund-related-fees) Refunds incur an additional transaction fee, as well as any fees associated with the original charge. In contrast, voided payments do not incur additional fees and any fees related to the original charge are reversed. Last updated on February 28, 2025 February 28, 2025 SubscriptionsDeclines [Subscriptions](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions) [Declines](https://docs.tilled.com/docs/payments/card/declines)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/declines",
    "title": "Tilled",
    "content": "Declines Card declines can be a frustrating aspect of processing payments, both for customers and merchants. They happen when a cardholder’s bank or card issuer cannot authorize a transaction. The table below outlines common reasons for card declines along with recommended resolutions. FAILURE CODEFAILURE MESSAGENEXT STEPSaccount_closedThe account has been closed.Resubmit the payment using an alternative card or payment method.authentication_requiredThe cardholder must authenticate this payment using 3D Secure before proceeding.Contact Support for more information.avs_check_failedThe AVS check failed.Update the address and resubmit the payment. If subsequent payments are declined, advise the customer to contact the card issuer for more information.call_issuerThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information.canceledThe payment was canceled.Confirm whether the payment was meant to be canceled and proceed accordingly.card_not_supportedThe card does not support this type of purchase.Resubmit the payment using an alternative card or payment method.do_not_honorThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information.duplicate_transactionA payment with identical amount and payment information was submitted very recently.Confirm whether it’s a true duplicate and proceed accordingly.expired_cardThe card has expired.Resubmit the payment using an alternative card or payment method.format_errorThere are one or more issues with data formatting.Update the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.fraudulentThe payment is suspected to be fraudulent.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.generic_declineThe payment was declined by the issuer for an unknown reason.Resubmit the payment. If subsequent payments are declined, contact the card issuer for more information.incorrect_cvcThe CVV/CVC number is incorrect.Resubmit the payment using the correct CVV/CVC.incorrect_pinThe PIN is incorrect.Resubmit the payment using the correct PIN.insufficient_fundsThe account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue and resubmit the payment once funds are available.invalid_accountThe account is invalid.Obtain new account information and resubmit the payment.invalid_addressThe address is incorrect.Resubmit the payment using the correct address.invalid_amountThe amount is invalid.Update the amount and resubmit the payment.invalid_credentialsThe credentials provided with the request are invalid.Update your credentials and resubmit the payment.invalid_expiryThe expiration date is incorrect.Resubmit the payment using the correct expiration date.invalid_fieldOne or more fields are invalid.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.invalid_merchant_accountThe merchant account is not properly set up to process this payment.Contact Support for more information.invalid_numberThe card number is incorrect.Update the payment information and resubmit the payment.invalid_requestThe credentials, URL, or action used in the request are invalid.Verify the request details and resubmit the payment.invalid_tokenThe payment token is invalid or the corresponding account is not active.Update the payment information and resubmit the payment.invalid_transactionThe transaction referenced is not supported or cannot be found.Contact Support for more information.invalid_zipThe zip code is incorrect.Resubmit the payment using the correct zip code.issuer_not_availableThe card issuer couldn’t be reached, so the payment couldn’t be authorized.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information.limit_exceededThe customer has exceeded their balance or credit limit.Resubmit the payment using an alternative card or payment method.lost_cardThe card cannot be used for payment as it was reported lost.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.no_action_takenThe payment failed because no action was taken on the terminal.Resubmit the payment.no_cardEither the card wasn't provided or the card was removed before the payment was completed.Resubmit the payment.not_authorizedThe payment is not authorized.Advise the customer to contact the card issuer for more information.not_permittedThe payment is not permitted.Advise the customer to contact the card issuer for more information.not_recognizedThe card is not recognized.Advise the customer to contact the card issuer for more information.pickup_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.pin_try_exceededThe allowable number of PIN tries was exceeded.Resubmit the payment using an alternative card or payment method.processing_errorAn error occurred while processing the payment.Resubmit the payment. If subsequent payments are declined, contact Support for more information.restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.risk_blockedThe payment was blocked for triggering risk rules.Contact Support for more information.service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.Resubmit the payment using an alternative card or payment method.stolen_cardThe card cannot be used for payment as it was reported stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.terminal_authentication_requiredThe terminal has not been authenticated.Authenticate the terminal and resubmit the payment.try_again_laterThe issuer has requested that the payment be tried again later.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information.Last updated on March 7, 2025Refund a PaymentLevel 2/3 Declines Card declines can be a frustrating aspect of processing payments, both for customers and merchants. They happen when a cardholder’s bank or card issuer cannot authorize a transaction. The table below outlines common reasons for card declines along with recommended resolutions. FAILURE CODEFAILURE MESSAGENEXT STEPSaccount_closedThe account has been closed.Resubmit the payment using an alternative card or payment method.authentication_requiredThe cardholder must authenticate this payment using 3D Secure before proceeding.Contact Support for more information.avs_check_failedThe AVS check failed.Update the address and resubmit the payment. If subsequent payments are declined, advise the customer to contact the card issuer for more information.call_issuerThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information.canceledThe payment was canceled.Confirm whether the payment was meant to be canceled and proceed accordingly.card_not_supportedThe card does not support this type of purchase.Resubmit the payment using an alternative card or payment method.do_not_honorThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information.duplicate_transactionA payment with identical amount and payment information was submitted very recently.Confirm whether it’s a true duplicate and proceed accordingly.expired_cardThe card has expired.Resubmit the payment using an alternative card or payment method.format_errorThere are one or more issues with data formatting.Update the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.fraudulentThe payment is suspected to be fraudulent.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.generic_declineThe payment was declined by the issuer for an unknown reason.Resubmit the payment. If subsequent payments are declined, contact the card issuer for more information.incorrect_cvcThe CVV/CVC number is incorrect.Resubmit the payment using the correct CVV/CVC.incorrect_pinThe PIN is incorrect.Resubmit the payment using the correct PIN.insufficient_fundsThe account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue and resubmit the payment once funds are available.invalid_accountThe account is invalid.Obtain new account information and resubmit the payment.invalid_addressThe address is incorrect.Resubmit the payment using the correct address.invalid_amountThe amount is invalid.Update the amount and resubmit the payment.invalid_credentialsThe credentials provided with the request are invalid.Update your credentials and resubmit the payment.invalid_expiryThe expiration date is incorrect.Resubmit the payment using the correct expiration date.invalid_fieldOne or more fields are invalid.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.invalid_merchant_accountThe merchant account is not properly set up to process this payment.Contact Support for more information.invalid_numberThe card number is incorrect.Update the payment information and resubmit the payment.invalid_requestThe credentials, URL, or action used in the request are invalid.Verify the request details and resubmit the payment.invalid_tokenThe payment token is invalid or the corresponding account is not active.Update the payment information and resubmit the payment.invalid_transactionThe transaction referenced is not supported or cannot be found.Contact Support for more information.invalid_zipThe zip code is incorrect.Resubmit the payment using the correct zip code.issuer_not_availableThe card issuer couldn’t be reached, so the payment couldn’t be authorized.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information.limit_exceededThe customer has exceeded their balance or credit limit.Resubmit the payment using an alternative card or payment method.lost_cardThe card cannot be used for payment as it was reported lost.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.no_action_takenThe payment failed because no action was taken on the terminal.Resubmit the payment.no_cardEither the card wasn't provided or the card was removed before the payment was completed.Resubmit the payment.not_authorizedThe payment is not authorized.Advise the customer to contact the card issuer for more information.not_permittedThe payment is not permitted.Advise the customer to contact the card issuer for more information.not_recognizedThe card is not recognized.Advise the customer to contact the card issuer for more information.pickup_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.pin_try_exceededThe allowable number of PIN tries was exceeded.Resubmit the payment using an alternative card or payment method.processing_errorAn error occurred while processing the payment.Resubmit the payment. If subsequent payments are declined, contact Support for more information.restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.risk_blockedThe payment was blocked for triggering risk rules.Contact Support for more information.service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.Resubmit the payment using an alternative card or payment method.stolen_cardThe card cannot be used for payment as it was reported stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.terminal_authentication_requiredThe terminal has not been authenticated.Authenticate the terminal and resubmit the payment.try_again_laterThe issuer has requested that the payment be tried again later.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information. FAILURE CODEFAILURE MESSAGENEXT STEPS FAILURE CODEFAILURE MESSAGENEXT STEPS FAILURE CODE FAILURE CODE FAILURE MESSAGE FAILURE MESSAGE NEXT STEPS NEXT STEPS account_closedThe account has been closed.Resubmit the payment using an alternative card or payment method.authentication_requiredThe cardholder must authenticate this payment using 3D Secure before proceeding.Contact Support for more information.avs_check_failedThe AVS check failed.Update the address and resubmit the payment. If subsequent payments are declined, advise the customer to contact the card issuer for more information.call_issuerThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information.canceledThe payment was canceled.Confirm whether the payment was meant to be canceled and proceed accordingly.card_not_supportedThe card does not support this type of purchase.Resubmit the payment using an alternative card or payment method.do_not_honorThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information.duplicate_transactionA payment with identical amount and payment information was submitted very recently.Confirm whether it’s a true duplicate and proceed accordingly.expired_cardThe card has expired.Resubmit the payment using an alternative card or payment method.format_errorThere are one or more issues with data formatting.Update the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.fraudulentThe payment is suspected to be fraudulent.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.generic_declineThe payment was declined by the issuer for an unknown reason.Resubmit the payment. If subsequent payments are declined, contact the card issuer for more information.incorrect_cvcThe CVV/CVC number is incorrect.Resubmit the payment using the correct CVV/CVC.incorrect_pinThe PIN is incorrect.Resubmit the payment using the correct PIN.insufficient_fundsThe account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue and resubmit the payment once funds are available.invalid_accountThe account is invalid.Obtain new account information and resubmit the payment.invalid_addressThe address is incorrect.Resubmit the payment using the correct address.invalid_amountThe amount is invalid.Update the amount and resubmit the payment.invalid_credentialsThe credentials provided with the request are invalid.Update your credentials and resubmit the payment.invalid_expiryThe expiration date is incorrect.Resubmit the payment using the correct expiration date.invalid_fieldOne or more fields are invalid.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.invalid_merchant_accountThe merchant account is not properly set up to process this payment.Contact Support for more information.invalid_numberThe card number is incorrect.Update the payment information and resubmit the payment.invalid_requestThe credentials, URL, or action used in the request are invalid.Verify the request details and resubmit the payment.invalid_tokenThe payment token is invalid or the corresponding account is not active.Update the payment information and resubmit the payment.invalid_transactionThe transaction referenced is not supported or cannot be found.Contact Support for more information.invalid_zipThe zip code is incorrect.Resubmit the payment using the correct zip code.issuer_not_availableThe card issuer couldn’t be reached, so the payment couldn’t be authorized.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information.limit_exceededThe customer has exceeded their balance or credit limit.Resubmit the payment using an alternative card or payment method.lost_cardThe card cannot be used for payment as it was reported lost.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.no_action_takenThe payment failed because no action was taken on the terminal.Resubmit the payment.no_cardEither the card wasn't provided or the card was removed before the payment was completed.Resubmit the payment.not_authorizedThe payment is not authorized.Advise the customer to contact the card issuer for more information.not_permittedThe payment is not permitted.Advise the customer to contact the card issuer for more information.not_recognizedThe card is not recognized.Advise the customer to contact the card issuer for more information.pickup_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.pin_try_exceededThe allowable number of PIN tries was exceeded.Resubmit the payment using an alternative card or payment method.processing_errorAn error occurred while processing the payment.Resubmit the payment. If subsequent payments are declined, contact Support for more information.restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.risk_blockedThe payment was blocked for triggering risk rules.Contact Support for more information.service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.Resubmit the payment using an alternative card or payment method.stolen_cardThe card cannot be used for payment as it was reported stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.terminal_authentication_requiredThe terminal has not been authenticated.Authenticate the terminal and resubmit the payment.try_again_laterThe issuer has requested that the payment be tried again later.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information. account_closedThe account has been closed.Resubmit the payment using an alternative card or payment method. account_closed account_closed The account has been closed. Resubmit the payment using an alternative card or payment method. authentication_requiredThe cardholder must authenticate this payment using 3D Secure before proceeding.Contact Support for more information. authentication_required authentication_required The cardholder must authenticate this payment using 3D Secure before proceeding. Contact Support for more information. avs_check_failedThe AVS check failed.Update the address and resubmit the payment. If subsequent payments are declined, advise the customer to contact the card issuer for more information. avs_check_failed avs_check_failed The AVS check failed. Update the address and resubmit the payment. If subsequent payments are declined, advise the customer to contact the card issuer for more information. call_issuerThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information. call_issuer call_issuer The card was declined by the issuer for an unknown reason. Advise the customer to contact the card issuer for more information. canceledThe payment was canceled.Confirm whether the payment was meant to be canceled and proceed accordingly. canceled canceled The payment was canceled. Confirm whether the payment was meant to be canceled and proceed accordingly. card_not_supportedThe card does not support this type of purchase.Resubmit the payment using an alternative card or payment method. card_not_supported card_not_supported The card does not support this type of purchase. Resubmit the payment using an alternative card or payment method. do_not_honorThe card was declined by the issuer for an unknown reason.Advise the customer to contact the card issuer for more information. do_not_honor do_not_honor The card was declined by the issuer for an unknown reason. Advise the customer to contact the card issuer for more information. duplicate_transactionA payment with identical amount and payment information was submitted very recently.Confirm whether it’s a true duplicate and proceed accordingly. duplicate_transaction duplicate_transaction A payment with identical amount and payment information was submitted very recently. Confirm whether it’s a true duplicate and proceed accordingly. expired_cardThe card has expired.Resubmit the payment using an alternative card or payment method. expired_card expired_card The card has expired. Resubmit the payment using an alternative card or payment method. format_errorThere are one or more issues with data formatting.Update the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information. format_error format_error There are one or more issues with data formatting. Update the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information. fraudulentThe payment is suspected to be fraudulent.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. fraudulent fraudulent The payment is suspected to be fraudulent. Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. generic_declineThe payment was declined by the issuer for an unknown reason.Resubmit the payment. If subsequent payments are declined, contact the card issuer for more information. generic_decline generic_decline The payment was declined by the issuer for an unknown reason. Resubmit the payment. If subsequent payments are declined, contact the card issuer for more information. incorrect_cvcThe CVV/CVC number is incorrect.Resubmit the payment using the correct CVV/CVC. incorrect_cvc incorrect_cvc The CVV/CVC number is incorrect. Resubmit the payment using the correct CVV/CVC. incorrect_pinThe PIN is incorrect.Resubmit the payment using the correct PIN. incorrect_pin incorrect_pin The PIN is incorrect. Resubmit the payment using the correct PIN. insufficient_fundsThe account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue and resubmit the payment once funds are available. insufficient_funds insufficient_funds The account has insufficient funds to complete the purchase. Reach out to the account holder to address the issue and resubmit the payment once funds are available. invalid_accountThe account is invalid.Obtain new account information and resubmit the payment. invalid_account invalid_account The account is invalid. Obtain new account information and resubmit the payment. invalid_addressThe address is incorrect.Resubmit the payment using the correct address. invalid_address invalid_address The address is incorrect. Resubmit the payment using the correct address. invalid_amountThe amount is invalid.Update the amount and resubmit the payment. invalid_amount invalid_amount The amount is invalid. Update the amount and resubmit the payment. invalid_credentialsThe credentials provided with the request are invalid.Update your credentials and resubmit the payment. invalid_credentials invalid_credentials The credentials provided with the request are invalid. Update your credentials and resubmit the payment. invalid_expiryThe expiration date is incorrect.Resubmit the payment using the correct expiration date. invalid_expiry invalid_expiry The expiration date is incorrect. Resubmit the payment using the correct expiration date. invalid_fieldOne or more fields are invalid.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information. invalid_field invalid_field One or more fields are invalid. Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information. invalid_merchant_accountThe merchant account is not properly set up to process this payment.Contact Support for more information. invalid_merchant_account invalid_merchant_account The merchant account is not properly set up to process this payment. Contact Support for more information. invalid_numberThe card number is incorrect.Update the payment information and resubmit the payment. invalid_number invalid_number The card number is incorrect. Update the payment information and resubmit the payment. invalid_requestThe credentials, URL, or action used in the request are invalid.Verify the request details and resubmit the payment. invalid_request invalid_request The credentials, URL, or action used in the request are invalid. Verify the request details and resubmit the payment. invalid_tokenThe payment token is invalid or the corresponding account is not active.Update the payment information and resubmit the payment. invalid_token invalid_token The payment token is invalid or the corresponding account is not active. Update the payment information and resubmit the payment. invalid_transactionThe transaction referenced is not supported or cannot be found.Contact Support for more information. invalid_transaction invalid_transaction The transaction referenced is not supported or cannot be found. Contact Support for more information. invalid_zipThe zip code is incorrect.Resubmit the payment using the correct zip code. invalid_zip invalid_zip The zip code is incorrect. Resubmit the payment using the correct zip code. issuer_not_availableThe card issuer couldn’t be reached, so the payment couldn’t be authorized.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information. issuer_not_available issuer_not_available The card issuer couldn’t be reached, so the payment couldn’t be authorized. Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information. limit_exceededThe customer has exceeded their balance or credit limit.Resubmit the payment using an alternative card or payment method. limit_exceeded limit_exceeded The customer has exceeded their balance or credit limit. Resubmit the payment using an alternative card or payment method. lost_cardThe card cannot be used for payment as it was reported lost.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. lost_card lost_card The card cannot be used for payment as it was reported lost. Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. no_action_takenThe payment failed because no action was taken on the terminal.Resubmit the payment. no_action_taken no_action_taken The payment failed because no action was taken on the terminal. Resubmit the payment. no_cardEither the card wasn't provided or the card was removed before the payment was completed.Resubmit the payment. no_card no_card Either the card wasn't provided or the card was removed before the payment was completed. Resubmit the payment. not_authorizedThe payment is not authorized.Advise the customer to contact the card issuer for more information. not_authorized not_authorized The payment is not authorized. Advise the customer to contact the card issuer for more information. not_permittedThe payment is not permitted.Advise the customer to contact the card issuer for more information. not_permitted not_permitted The payment is not permitted. Advise the customer to contact the card issuer for more information. not_recognizedThe card is not recognized.Advise the customer to contact the card issuer for more information. not_recognized not_recognized The card is not recognized. Advise the customer to contact the card issuer for more information. pickup_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. pickup_card pickup_card The card cannot be used for payment as it may have been reported lost or stolen. Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. pin_try_exceededThe allowable number of PIN tries was exceeded.Resubmit the payment using an alternative card or payment method. pin_try_exceeded pin_try_exceeded The allowable number of PIN tries was exceeded. Resubmit the payment using an alternative card or payment method. processing_errorAn error occurred while processing the payment.Resubmit the payment. If subsequent payments are declined, contact Support for more information. processing_error processing_error An error occurred while processing the payment. Resubmit the payment. If subsequent payments are declined, contact Support for more information. restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. restricted_card restricted_card The card cannot be used for payment as it may have been reported lost or stolen. Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. risk_blockedThe payment was blocked for triggering risk rules.Contact Support for more information. risk_blocked risk_blocked The payment was blocked for triggering risk rules. Contact Support for more information. service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.Resubmit the payment using an alternative card or payment method. service_not_allowed service_not_allowed The card was declined by the issuer due to its proprietary card activity regulations. Resubmit the payment using an alternative card or payment method. stolen_cardThe card cannot be used for payment as it was reported stolen.Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. stolen_card stolen_card The card cannot be used for payment as it was reported stolen. Avoid providing the customer with specific details. Instead, advise the customer to contact their card issuer. terminal_authentication_requiredThe terminal has not been authenticated.Authenticate the terminal and resubmit the payment. terminal_authentication_required terminal_authentication_required The terminal has not been authenticated. Authenticate the terminal and resubmit the payment. try_again_laterThe issuer has requested that the payment be tried again later.Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information. try_again_later try_again_later The issuer has requested that the payment be tried again later. Resubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information. Last updated on March 7, 2025 March 7, 2025 Refund a PaymentLevel 2/3 [Refund a Payment](https://docs.tilled.com/docs/payments/refunds) [Level 2/3](https://docs.tilled.com/docs/payments/card/level-2-3)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/level-2-3",
    "title": "Tilled",
    "content": "Level 2/3 Card payment processing is categorized into three levels: Level 1, Level 2, and Level 3. These levels vary based on the amount of payment information required. Level 1 requires the least information, generally resulting in higher interchange fees. Level 2 and Level 3 require more detailed data, which can lower interchange fees. While most businesses process at Level 1, fees can be reduced for merchants handling commercial credit cards by providing the additional data needed for Level 2 and Level 3 payments. Card Processing Levels Level 1: Basic transaction details like the amount, date, and merchant’s name. Level 2: Includes additional data such as taxes, customer details, and merchant ZIP code. With Level 2, interchange costs are lower than with Level 1. Level 3: Contains the most detailed information, including line-item details, shipping addresses, and invoice numbers. With Level 3, interchange costs are lower than Level 1 or 2. Eligibility Requirements LEVEL 2LEVEL 3Merchant RequirementsMerchant Category Codes (MCC)Refer to ineligible MCCsAnnual transaction volume1-6M transactions20k-1M transactionsPayment RequirementsCard brandsVisa, Mastercard, and AmexVisa and MastercardCard typesCommercial credit cards (business, corporate, and purchasing)Sales taxVisa: sales tax amount must be between 0.1% and 22% of the total payment amount Mastercard: sales tax amount must be between 0.1% and 30% of the total payment amountNo sales tax requirements Ineligible MCCs The following MCCs are not eligible for Level 2 and 3 rates. If you are using Tilled’s hosted merchant application, you can customize the MCC options to prevent merchants from mistakenly selecting an ineligible MCC. MCCDESCRIPTION3000-3299, 4511Airlines/Passenger Transport3351-3500, 7512Car Rentals/Auto Rental4411Cruise Lines5962, 5966, 5967High Risk Direct Marketing3501-4010, 7011Hotels/Lodging4112Passenger Railways5812, 5814Restaurants4722Travel Agents7513Truck and Utility Trailer Rentals Including Level 2/3 Data with a Payment When collecting a payment using the Payment IntentsAPI, pass in the required attributes under the level3 field. If you have questions about passing through Level 2/3 data, please reach out to integrations@tilled.com. Data Requirements DATA FIELDLEVEL 1LEVEL 2LEVEL 3Card number✓✓✓Card expiration date✓✓✓CVV code✓✓✓Transaction amount✓✓✓Date✓✓✓Merchant’s name✓✓✓Merchant category code✓✓✓Customer reference number✗✓✓Sales tax amount✗✓✓Tax ID✗✓✓Merchant state code✗✓✓Merchant ZIP code✗✓✓Requestor name✗✓✓Destination address✗✓✓Destination state✗✓✓Invoice number✗✗✓Order number✗✗✓Duty amount✗✗✓Item ID or SKU✗✗✓Item description✗✗✓Item quantity✗✗✓Item unit of measure✗✗✓Item commodity code✗✗✓Freight amount✗✗✓Ship-from zip code✗✗✓Ship-to zip code✗✗✓Line discount✗✗✓Last updated on November 1, 2024DeclinesApple Pay Level 2/3 Card payment processing is categorized into three levels: Level 1, Level 2, and Level 3. These levels vary based on the amount of payment information required. Level 1 requires the least information, generally resulting in higher interchange fees. Level 2 and Level 3 require more detailed data, which can lower interchange fees. While most businesses process at Level 1, fees can be reduced for merchants handling commercial credit cards by providing the additional data needed for Level 2 and Level 3 payments. Card Processing Levels [https://docs.tilled.com/docs/payments/card/level-2-3#card-processing-levels](https://docs.tilled.com/docs/payments/card/level-2-3#card-processing-levels) Level 1: Basic transaction details like the amount, date, and merchant’s name. Level 2: Includes additional data such as taxes, customer details, and merchant ZIP code. With Level 2, interchange costs are lower than with Level 1. Level 3: Contains the most detailed information, including line-item details, shipping addresses, and invoice numbers. With Level 3, interchange costs are lower than Level 1 or 2. Level 1: Basic transaction details like the amount, date, and merchant’s name. Level 1: Level 2: Includes additional data such as taxes, customer details, and merchant ZIP code. With Level 2, interchange costs are lower than with Level 1. Level 2: Level 3: Contains the most detailed information, including line-item details, shipping addresses, and invoice numbers. With Level 3, interchange costs are lower than Level 1 or 2. Level 3: Eligibility Requirements [https://docs.tilled.com/docs/payments/card/level-2-3#eligibility-requirements](https://docs.tilled.com/docs/payments/card/level-2-3#eligibility-requirements) LEVEL 2LEVEL 3Merchant RequirementsMerchant Category Codes (MCC)Refer to ineligible MCCsAnnual transaction volume1-6M transactions20k-1M transactionsPayment RequirementsCard brandsVisa, Mastercard, and AmexVisa and MastercardCard typesCommercial credit cards (business, corporate, and purchasing)Sales taxVisa: sales tax amount must be between 0.1% and 22% of the total payment amount Mastercard: sales tax amount must be between 0.1% and 30% of the total payment amountNo sales tax requirements LEVEL 2LEVEL 3 LEVEL 2LEVEL 3 LEVEL 2 LEVEL 2 LEVEL 3 LEVEL 3 Merchant RequirementsMerchant Category Codes (MCC)Refer to ineligible MCCsAnnual transaction volume1-6M transactions20k-1M transactionsPayment RequirementsCard brandsVisa, Mastercard, and AmexVisa and MastercardCard typesCommercial credit cards (business, corporate, and purchasing)Sales taxVisa: sales tax amount must be between 0.1% and 22% of the total payment amount Mastercard: sales tax amount must be between 0.1% and 30% of the total payment amountNo sales tax requirements Merchant Requirements Merchant Requirements Merchant Requirements Merchant Category Codes (MCC)Refer to ineligible MCCs Merchant Category Codes (MCC) Refer to ineligible MCCs [ineligible MCCs](https://docs.tilled.com/docs/payments/card/level-2-3#ineligible-mccs) Annual transaction volume1-6M transactions20k-1M transactions Annual transaction volume 1-6M transactions 20k-1M transactions Payment Requirements Payment Requirements Payment Requirements Card brandsVisa, Mastercard, and AmexVisa and Mastercard Card brands Visa, Mastercard, and Amex Visa and Mastercard Card typesCommercial credit cards (business, corporate, and purchasing) Card types Commercial credit cards (business, corporate, and purchasing) Sales taxVisa: sales tax amount must be between 0.1% and 22% of the total payment amount Mastercard: sales tax amount must be between 0.1% and 30% of the total payment amountNo sales tax requirements Sales tax Visa: sales tax amount must be between 0.1% and 22% of the total payment amount Mastercard: sales tax amount must be between 0.1% and 30% of the total payment amount Mastercard: sales tax amount must be between 0.1% and 30% of the total payment amount No sales tax requirements Ineligible MCCs [https://docs.tilled.com/docs/payments/card/level-2-3#ineligible-mccs](https://docs.tilled.com/docs/payments/card/level-2-3#ineligible-mccs) The following MCCs are not eligible for Level 2 and 3 rates. If you are using Tilled’s hosted merchant application, you can customize the MCC options to prevent merchants from mistakenly selecting an ineligible MCC. [customize the MCC options](https://docs.tilled.com/docs/merchants/merchant-preferences) MCCDESCRIPTION3000-3299, 4511Airlines/Passenger Transport3351-3500, 7512Car Rentals/Auto Rental4411Cruise Lines5962, 5966, 5967High Risk Direct Marketing3501-4010, 7011Hotels/Lodging4112Passenger Railways5812, 5814Restaurants4722Travel Agents7513Truck and Utility Trailer Rentals MCCDESCRIPTION MCCDESCRIPTION MCC MCC DESCRIPTION DESCRIPTION 3000-3299, 4511Airlines/Passenger Transport3351-3500, 7512Car Rentals/Auto Rental4411Cruise Lines5962, 5966, 5967High Risk Direct Marketing3501-4010, 7011Hotels/Lodging4112Passenger Railways5812, 5814Restaurants4722Travel Agents7513Truck and Utility Trailer Rentals 3000-3299, 4511Airlines/Passenger Transport 3000-3299, 4511 Airlines/Passenger Transport 3351-3500, 7512Car Rentals/Auto Rental 3351-3500, 7512 Car Rentals/Auto Rental 4411Cruise Lines 4411 Cruise Lines 5962, 5966, 5967High Risk Direct Marketing 5962, 5966, 5967 High Risk Direct Marketing 3501-4010, 7011Hotels/Lodging 3501-4010, 7011 Hotels/Lodging 4112Passenger Railways 4112 Passenger Railways 5812, 5814Restaurants 5812, 5814 Restaurants 4722Travel Agents 4722 Travel Agents 7513Truck and Utility Trailer Rentals 7513 Truck and Utility Trailer Rentals Including Level 2/3 Data with a Payment [https://docs.tilled.com/docs/payments/card/level-2-3#including-level-23-data-with-a-payment](https://docs.tilled.com/docs/payments/card/level-2-3#including-level-23-data-with-a-payment) When collecting a payment using the Payment IntentsAPI, pass in the required attributes under the level3 field. [collecting a payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments) [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API level3 If you have questions about passing through Level 2/3 data, please reach out to integrations@tilled.com. [integrations@tilled.com](mailto:integrations@tilled.com) Data Requirements [https://docs.tilled.com/docs/payments/card/level-2-3#data-requirements](https://docs.tilled.com/docs/payments/card/level-2-3#data-requirements) DATA FIELDLEVEL 1LEVEL 2LEVEL 3Card number✓✓✓Card expiration date✓✓✓CVV code✓✓✓Transaction amount✓✓✓Date✓✓✓Merchant’s name✓✓✓Merchant category code✓✓✓Customer reference number✗✓✓Sales tax amount✗✓✓Tax ID✗✓✓Merchant state code✗✓✓Merchant ZIP code✗✓✓Requestor name✗✓✓Destination address✗✓✓Destination state✗✓✓Invoice number✗✗✓Order number✗✗✓Duty amount✗✗✓Item ID or SKU✗✗✓Item description✗✗✓Item quantity✗✗✓Item unit of measure✗✗✓Item commodity code✗✗✓Freight amount✗✗✓Ship-from zip code✗✗✓Ship-to zip code✗✗✓Line discount✗✗✓ DATA FIELDLEVEL 1LEVEL 2LEVEL 3 DATA FIELDLEVEL 1LEVEL 2LEVEL 3 DATA FIELD DATA FIELD LEVEL 1 LEVEL 1 LEVEL 2 LEVEL 2 LEVEL 3 LEVEL 3 Card number✓✓✓Card expiration date✓✓✓CVV code✓✓✓Transaction amount✓✓✓Date✓✓✓Merchant’s name✓✓✓Merchant category code✓✓✓Customer reference number✗✓✓Sales tax amount✗✓✓Tax ID✗✓✓Merchant state code✗✓✓Merchant ZIP code✗✓✓Requestor name✗✓✓Destination address✗✓✓Destination state✗✓✓Invoice number✗✗✓Order number✗✗✓Duty amount✗✗✓Item ID or SKU✗✗✓Item description✗✗✓Item quantity✗✗✓Item unit of measure✗✗✓Item commodity code✗✗✓Freight amount✗✗✓Ship-from zip code✗✗✓Ship-to zip code✗✗✓Line discount✗✗✓ Card number✓✓✓ Card number ✓ ✓ ✓ Card expiration date✓✓✓ Card expiration date ✓ ✓ ✓ CVV code✓✓✓ CVV code ✓ ✓ ✓ Transaction amount✓✓✓ Transaction amount ✓ ✓ ✓ Date✓✓✓ Date ✓ ✓ ✓ Merchant’s name✓✓✓ Merchant’s name ✓ ✓ ✓ Merchant category code✓✓✓ Merchant category code ✓ ✓ ✓ Customer reference number✗✓✓ Customer reference number ✗ ✓ ✓ Sales tax amount✗✓✓ Sales tax amount ✗ ✓ ✓ Tax ID✗✓✓ Tax ID ✗ ✓ ✓ Merchant state code✗✓✓ Merchant state code ✗ ✓ ✓ Merchant ZIP code✗✓✓ Merchant ZIP code ✗ ✓ ✓ Requestor name✗✓✓ Requestor name ✗ ✓ ✓ Destination address✗✓✓ Destination address ✗ ✓ ✓ Destination state✗✓✓ Destination state ✗ ✓ ✓ Invoice number✗✗✓ Invoice number ✗ ✗ ✓ Order number✗✗✓ Order number ✗ ✗ ✓ Duty amount✗✗✓ Duty amount ✗ ✗ ✓ Item ID or SKU✗✗✓ Item ID or SKU ✗ ✗ ✓ Item description✗✗✓ Item description ✗ ✗ ✓ Item quantity✗✗✓ Item quantity ✗ ✗ ✓ Item unit of measure✗✗✓ Item unit of measure ✗ ✗ ✓ Item commodity code✗✗✓ Item commodity code ✗ ✗ ✓ Freight amount✗✗✓ Freight amount ✗ ✗ ✓ Ship-from zip code✗✗✓ Ship-from zip code ✗ ✗ ✓ Ship-to zip code✗✗✓ Ship-to zip code ✗ ✗ ✓ Line discount✗✗✓ Line discount ✗ ✗ ✓ Last updated on November 1, 2024 November 1, 2024 DeclinesApple Pay [Declines](https://docs.tilled.com/docs/payments/card/declines) [Apple Pay](https://docs.tilled.com/docs/payments/card/applepay)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/applepay",
    "title": "Tilled",
    "content": "Apple Pay Apple Pay is a seamless and secure payment method that enhances the checkout experience for customers using Apple devices. This guide provides step-by-step instructions for integrating Apple Pay for online payments. For in-person payments, no additional setup is needed—simply start accepting Apple Pay right away. Eligibility Apple Pay for online payments is only available to merchants onboarded to Flex Billing with Paysafe. If you have questions about your merchant’s processor and billing owner, reach out to support@tilled.com. Prerequisites Before you begin, ensure you have the following: An Apple Developer account Access to your Tilled API keys An Apple Pay-enabled device for testing Implement Apple Pay Verify your domain for Apple PayTo use Apple Pay, you will need to register and verify every domain and subdomain where the Apple Pay button will appear. For example, if you display the Apple Pay button on https://pay.example.com/ and https://example.com/, you need to verify both domains.Sandbox environmentDomain verification is not required, but you must still adhere to domain requirements.Production environmentTo obtain your domain verification files for Apple Pay, provide the following details to integrations@tilled.com: Number of domains: Specify how many domains will host the Apple Pay button. If each merchant uses a different domain or subdomain, include that information. Number of merchants: Indicate how many merchants will be enabled for Apple Pay. Checkout method: Specify whether you will use your own checkout page (using Tilled.jsJS) or Tilled's hosted options such as Payment Links or Checkout Sessions. Initialize Tilled.jsTo accept Apple Pay payments through Tilled using your own checkout page, you need to include Tilled.jsJS on your page. Add the following HTML snippet to your web page, preferably within the <head> tag.<script src=\"https://js.tilled.com\"></script>After including Tilled.jsJS, you need to set it up by providing your publishable API key and the account_id of the merchant account you are performing the action on behalf of:const tilled = new Tilled('pk_…', 'acct_…');Use new Tilled(publishableKey, tilledAccount, options?) to create an instance of the Tilled object, which provides access to the rest of the Tilled.jsJS SDK. Your Tilled publishable API key is required for this function. Replace the sample API key with your actual API key.Create Payment RequestIn this example, we’ll use a <div id=\"native-payment-element\"> container to inject the PaymentRequest button (Apple Pay button) if paymentRequest.canMakePayment(): Promise<boolean> returns true.PaymentRequest instances emit several types of events. We will use tilled.paymentRequest to create a PaymentRequest object.In Safari, tilled.paymentRequest uses Apple Pay.const paymentRequest = tilled.paymentRequest({ total: { label: \"Tilled tee\", amount: paymentIntent.amount, }, style: { type: \"donate\", theme: \"black\", }, requestPayerName: true, requestPayerEmail: true,});When creating a PaymentRequest for Apple Pay, collecting the customer’s name is highly recommended. This also results in the collection of the billing address, which can be used for address verification. Set requestPayerName to true to collect the customer name.For a full list of PaymentRequest options properties, refer to the documentation here.Neither Apple Pay nor PaymentRequest are unique payment method types. Payment methods created by a PaymentRequest will have a type of card.Display Apple Pay buttonTo ensure that only customers with an active Apple Pay Wallet see the option to pay with Apple Pay, use the paymentRequest.canMakePayment() method. This method returns a Promise that resolves to true if an enabled wallet is available and ready to pay. If no wallet is available, it resolves to false.The following example demonstrates how to inject the Apple Pay button into a <div id=\"native-payment-element\"> container if paymentRequest.canMakePayment() resolves to true:var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { // Inject paymentRequestButton Form Field to the DOM prButton.inject('#native-payment-element'); } });Create a payment methodTilled.jsJS automatically creates a payment method once the customer completes the payment process in their browser. You can access the created payment method by listening for the paymentmethod event using paymentRequest.on('paymentmethod', handler): void.Payment methods created through Apple Pay will have a type of card and a validity period of 5 minutes.Create and confirm the payment intentBefore displaying your checkout form and confirming the payment, your backend server needs to Create a Payment IntentAPI with the payment amount. Pass the client_secret of the intent to your frontend.paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successful payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); }, ); }); Test Apple Pay Integration Apple allows developers to test Apple Pay either before or after implementation by using a sandbox tester account. Validate domain requirements Confirm that your domain is secured with HTTPS (TLS 1.2 or later). Verify that you have a valid SSL Certificate. Make sure your domain has been validated utilizing Tilled's API and is actively hosting the Domain Verification file at the path: /.well-known/apple-developer-merchantid-domain-association. Enroll in Apple Developer ProgramIf you haven’t already, enroll in the Apple Developer Program to access necessary developer resources.Create sandbox tester accountTo create a sandbox tester account, refer to Apple’s instructions.Test Apple Pay checkout flow Sign into your sandbox tester account on the device used to test your integration. Add a test card number to your Apple Pay Wallet from the selection of test cards provided by Apple. Checkout using the Apple Pay test card. Last updated on January 2, 2025Level 2/3Card Account Updater Apple Pay Apple Pay is a seamless and secure payment method that enhances the checkout experience for customers using Apple devices. This guide provides step-by-step instructions for integrating Apple Pay for online payments. For in-person payments, no additional setup is needed—simply start accepting Apple Pay right away. Eligibility Eligibility Apple Pay for online payments is only available to merchants onboarded to Flex Billing with Paysafe. If you have questions about your merchant’s processor and billing owner, reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) Prerequisites Prerequisites Before you begin, ensure you have the following: An Apple Developer account Access to your Tilled API keys An Apple Pay-enabled device for testing An Apple Developer account Access to your Tilled API keys Tilled An Apple Pay-enabled device for testing Implement Apple Pay [https://docs.tilled.com/docs/payments/card/applepay#implement-apple-pay](https://docs.tilled.com/docs/payments/card/applepay#implement-apple-pay) Verify your domain for Apple PayTo use Apple Pay, you will need to register and verify every domain and subdomain where the Apple Pay button will appear. For example, if you display the Apple Pay button on https://pay.example.com/ and https://example.com/, you need to verify both domains.Sandbox environmentDomain verification is not required, but you must still adhere to domain requirements.Production environmentTo obtain your domain verification files for Apple Pay, provide the following details to integrations@tilled.com: Number of domains: Specify how many domains will host the Apple Pay button. If each merchant uses a different domain or subdomain, include that information. Number of merchants: Indicate how many merchants will be enabled for Apple Pay. Checkout method: Specify whether you will use your own checkout page (using Tilled.jsJS) or Tilled's hosted options such as Payment Links or Checkout Sessions. Initialize Tilled.jsTo accept Apple Pay payments through Tilled using your own checkout page, you need to include Tilled.jsJS on your page. Add the following HTML snippet to your web page, preferably within the <head> tag.<script src=\"https://js.tilled.com\"></script>After including Tilled.jsJS, you need to set it up by providing your publishable API key and the account_id of the merchant account you are performing the action on behalf of:const tilled = new Tilled('pk_…', 'acct_…');Use new Tilled(publishableKey, tilledAccount, options?) to create an instance of the Tilled object, which provides access to the rest of the Tilled.jsJS SDK. Your Tilled publishable API key is required for this function. Replace the sample API key with your actual API key.Create Payment RequestIn this example, we’ll use a <div id=\"native-payment-element\"> container to inject the PaymentRequest button (Apple Pay button) if paymentRequest.canMakePayment(): Promise<boolean> returns true.PaymentRequest instances emit several types of events. We will use tilled.paymentRequest to create a PaymentRequest object.In Safari, tilled.paymentRequest uses Apple Pay.const paymentRequest = tilled.paymentRequest({ total: { label: \"Tilled tee\", amount: paymentIntent.amount, }, style: { type: \"donate\", theme: \"black\", }, requestPayerName: true, requestPayerEmail: true,});When creating a PaymentRequest for Apple Pay, collecting the customer’s name is highly recommended. This also results in the collection of the billing address, which can be used for address verification. Set requestPayerName to true to collect the customer name.For a full list of PaymentRequest options properties, refer to the documentation here.Neither Apple Pay nor PaymentRequest are unique payment method types. Payment methods created by a PaymentRequest will have a type of card.Display Apple Pay buttonTo ensure that only customers with an active Apple Pay Wallet see the option to pay with Apple Pay, use the paymentRequest.canMakePayment() method. This method returns a Promise that resolves to true if an enabled wallet is available and ready to pay. If no wallet is available, it resolves to false.The following example demonstrates how to inject the Apple Pay button into a <div id=\"native-payment-element\"> container if paymentRequest.canMakePayment() resolves to true:var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { // Inject paymentRequestButton Form Field to the DOM prButton.inject('#native-payment-element'); } });Create a payment methodTilled.jsJS automatically creates a payment method once the customer completes the payment process in their browser. You can access the created payment method by listening for the paymentmethod event using paymentRequest.on('paymentmethod', handler): void.Payment methods created through Apple Pay will have a type of card and a validity period of 5 minutes.Create and confirm the payment intentBefore displaying your checkout form and confirming the payment, your backend server needs to Create a Payment IntentAPI with the payment amount. Pass the client_secret of the intent to your frontend.paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successful payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); }, ); }); Verify your domain for Apple Pay [https://docs.tilled.com/docs/payments/card/applepay#verify-your-domain-for-apple-pay](https://docs.tilled.com/docs/payments/card/applepay#verify-your-domain-for-apple-pay) To use Apple Pay, you will need to register and verify every domain and subdomain where the Apple Pay button will appear. For example, if you display the Apple Pay button on https://pay.example.com/ and https://example.com/, you need to verify both domains. [https://pay.example.com/](https://pay.example.com/) [https://example.com/](https://example.com/) Sandbox environment [https://docs.tilled.com/docs/payments/card/applepay#sandbox-environment](https://docs.tilled.com/docs/payments/card/applepay#sandbox-environment) Domain verification is not required, but you must still adhere to domain requirements. Production environment [https://docs.tilled.com/docs/payments/card/applepay#production-environment](https://docs.tilled.com/docs/payments/card/applepay#production-environment) To obtain your domain verification files for Apple Pay, provide the following details to integrations@tilled.com: [integrations@tilled.com](mailto:integrations@tilled.com) Number of domains: Specify how many domains will host the Apple Pay button. If each merchant uses a different domain or subdomain, include that information. Number of merchants: Indicate how many merchants will be enabled for Apple Pay. Checkout method: Specify whether you will use your own checkout page (using Tilled.jsJS) or Tilled's hosted options such as Payment Links or Checkout Sessions. Number of domains: Specify how many domains will host the Apple Pay button. If each merchant uses a different domain or subdomain, include that information. Number of domains: Number of merchants: Indicate how many merchants will be enabled for Apple Pay. Number of merchants: Checkout method: Specify whether you will use your own checkout page (using Tilled.jsJS) or Tilled's hosted options such as Payment Links or Checkout Sessions. Checkout method: [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Tilled's [Payment Links](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents) [Checkout Sessions](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents) Initialize Tilled.js Tilled [https://docs.tilled.com/docs/payments/card/applepay#initialize-js](https://docs.tilled.com/docs/payments/card/applepay#initialize-js) To accept Apple Pay payments through Tilled using your own checkout page, you need to include Tilled.jsJS on your page. Add the following HTML snippet to your web page, preferably within the <head> tag. Tilled [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS <head> <script src=\"https://js.tilled.com\"></script> <script src=\"https://js.tilled.com\"></script> <script src=\"https://js.tilled.com\"></script> <script src=\"https://js.tilled.com\"></script> < script src = \"https://js.tilled.com\" > < /script > After including Tilled.jsJS, you need to set it up by providing your publishable API key and the account_id of the merchant account you are performing the action on behalf of: [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS account_id const tilled = new Tilled('pk_…', 'acct_…'); const tilled = new Tilled('pk_…', 'acct_…'); const tilled = new Tilled('pk_…', 'acct_…'); const tilled = new Tilled('pk_…', 'acct_…'); const tilled = new Tilled ( 'pk_…' , 'acct_…' ) ; Use new Tilled(publishableKey, tilledAccount, options?) to create an instance of the Tilled object, which provides access to the rest of the Tilled.jsJS SDK. Your Tilled publishable API key is required for this function. Replace the sample API key with your actual API key. new Tilled(publishableKey, tilledAccount, options?) Tilled tilled Tilled Tilled [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Tilled Create Payment Request [https://docs.tilled.com/docs/payments/card/applepay#create-payment-request](https://docs.tilled.com/docs/payments/card/applepay#create-payment-request) In this example, we’ll use a <div id=\"native-payment-element\"> container to inject the PaymentRequest button (Apple Pay button) if paymentRequest.canMakePayment(): Promise<boolean> returns true. <div id=\"native-payment-element\"> paymentRequest.canMakePayment(): Promise<boolean> true PaymentRequest instances emit several types of events. We will use tilled.paymentRequest to create a PaymentRequest object. tilled.paymentRequest tilled In Safari, tilled.paymentRequest uses Apple Pay. tilled.paymentRequest tilled const paymentRequest = tilled.paymentRequest({ total: { label: \"Tilled tee\", amount: paymentIntent.amount, }, style: { type: \"donate\", theme: \"black\", }, requestPayerName: true, requestPayerEmail: true,}); const paymentRequest = tilled.paymentRequest({ total: { label: \"Tilled tee\", amount: paymentIntent.amount, }, style: { type: \"donate\", theme: \"black\", }, requestPayerName: true, requestPayerEmail: true,}); const paymentRequest = tilled.paymentRequest({ total: { label: \"Tilled tee\", amount: paymentIntent.amount, }, style: { type: \"donate\", theme: \"black\", }, requestPayerName: true, requestPayerEmail: true,}); const paymentRequest = tilled.paymentRequest({ const paymentRequest = tilled . paymentRequest ( { total: { total : { label: \"Tilled tee\", label : \"Tilled tee\" , amount: paymentIntent.amount, amount : paymentIntent . amount , }, } , style: { style : { type: \"donate\", type : \"donate\" , theme: \"black\", theme : \"black\" , }, } , requestPayerName: true, requestPayerName : true , requestPayerEmail: true,}); requestPayerEmail : true , } ) ; When creating a PaymentRequest for Apple Pay, collecting the customer’s name is highly recommended. This also results in the collection of the billing address, which can be used for address verification. Set requestPayerName to true to collect the customer name. requestPayerName true For a full list of PaymentRequest options properties, refer to the documentation here. options [here](https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest) Neither Apple Pay nor PaymentRequest are unique payment method types. Payment methods created by a PaymentRequest will have a type of card. card Display Apple Pay button [https://docs.tilled.com/docs/payments/card/applepay#display-apple-pay-button](https://docs.tilled.com/docs/payments/card/applepay#display-apple-pay-button) To ensure that only customers with an active Apple Pay Wallet see the option to pay with Apple Pay, use the paymentRequest.canMakePayment() method. This method returns a Promise that resolves to true if an enabled wallet is available and ready to pay. If no wallet is available, it resolves to false. paymentRequest.canMakePayment() Promise true false The following example demonstrates how to inject the Apple Pay button into a <div id=\"native-payment-element\"> container if paymentRequest.canMakePayment() resolves to true: <div id=\"native-payment-element\"> paymentRequest.canMakePayment() true var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { // Inject paymentRequestButton Form Field to the DOM prButton.inject('#native-payment-element'); } }); var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { // Inject paymentRequestButton Form Field to the DOM prButton.inject('#native-payment-element'); } }); var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { // Inject paymentRequestButton Form Field to the DOM prButton.inject('#native-payment-element'); } }); var prButton = form.createField('paymentRequestButton', { var prButton = form . createField ( 'paymentRequestButton' , { paymentRequest: paymentRequest, paymentRequest : paymentRequest , }); } ) ; paymentRequest.canMakePayment().then((result) => { paymentRequest . canMakePayment ( ) . then ( ( result ) => { if (result) { if ( result ) { // Inject paymentRequestButton Form Field to the DOM // Inject paymentRequestButton Form Field to the DOM prButton.inject('#native-payment-element'); prButton . inject ( '#native-payment-element' ) ; } } }); } ) ; Create a payment method [https://docs.tilled.com/docs/payments/card/applepay#create-a-payment-method](https://docs.tilled.com/docs/payments/card/applepay#create-a-payment-method) Tilled.jsJS automatically creates a payment method once the customer completes the payment process in their browser. You can access the created payment method by listening for the paymentmethod event using paymentRequest.on('paymentmethod', handler): void. [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS paymentRequest.on('paymentmethod', handler): void Payment methods created through Apple Pay will have a type of card and a validity period of 5 minutes. type card Create and confirm the payment intent [https://docs.tilled.com/docs/payments/card/applepay#create-and-confirm-the-payment-intent](https://docs.tilled.com/docs/payments/card/applepay#create-and-confirm-the-payment-intent) Before displaying your checkout form and confirming the payment, your backend server needs to Create a Payment IntentAPI with the payment amount. Pass the client_secret of the intent to your frontend. [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API client_secret paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successful payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); }, ); }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successful payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); }, ); }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successful payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); }, ); }); paymentRequest.on('paymentmethod', (ev) => { paymentRequest . on ( 'paymentmethod' , ( ev ) => { let paymentMethod = ev.paymentMethod; let paymentMethod = ev . paymentMethod ; tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: paymentMethod.id, payment_method : paymentMethod . id , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // The payment intent confirmation occurred, but the // The payment intent confirmation occurred, but the // actual charge may still have failed. Check // actual charge may still have failed. Check if ( if ( paymentIntent.status === 'succeeded' || paymentIntent . status === 'succeeded' || paymentIntent.status === 'processing' paymentIntent . status === 'processing' ) { ) { ev.complete('success'); ev . complete ( 'success' ) ; alert('Successful payment'); alert ( 'Successful payment' ) ; } else { } else { ev.complete('fail'); ev . complete ( 'fail' ) ; const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }, } , (err) => { ( err ) => { ev.complete('fail'); ev . complete ( 'fail' ) ; }, } , ); ) ; }); } ) ; Test Apple Pay Integration [https://docs.tilled.com/docs/payments/card/applepay#test-apple-pay-integration](https://docs.tilled.com/docs/payments/card/applepay#test-apple-pay-integration) Apple allows developers to test Apple Pay either before or after implementation by using a sandbox tester account. [sandbox tester account](https://developer.apple.com/apple-pay/sandbox-testing/#:~:text=supports%20TLS%201.2.-,Create%20a%20Sandbox%20Tester%20Account,-To%20create%20a) Validate domain requirements Confirm that your domain is secured with HTTPS (TLS 1.2 or later). Verify that you have a valid SSL Certificate. Make sure your domain has been validated utilizing Tilled's API and is actively hosting the Domain Verification file at the path: /.well-known/apple-developer-merchantid-domain-association. Enroll in Apple Developer ProgramIf you haven’t already, enroll in the Apple Developer Program to access necessary developer resources.Create sandbox tester accountTo create a sandbox tester account, refer to Apple’s instructions.Test Apple Pay checkout flow Sign into your sandbox tester account on the device used to test your integration. Add a test card number to your Apple Pay Wallet from the selection of test cards provided by Apple. Checkout using the Apple Pay test card. Validate domain requirements [https://docs.tilled.com/docs/payments/card/applepay#validate-domain-requirements](https://docs.tilled.com/docs/payments/card/applepay#validate-domain-requirements) Confirm that your domain is secured with HTTPS (TLS 1.2 or later). Verify that you have a valid SSL Certificate. Make sure your domain has been validated utilizing Tilled's API and is actively hosting the Domain Verification file at the path: /.well-known/apple-developer-merchantid-domain-association. Confirm that your domain is secured with HTTPS (TLS 1.2 or later). Verify that you have a valid SSL Certificate. Make sure your domain has been validated utilizing Tilled's API and is actively hosting the Domain Verification file at the path: /.well-known/apple-developer-merchantid-domain-association. Tilled's /.well-known/apple-developer-merchantid-domain-association Enroll in Apple Developer Program [https://docs.tilled.com/docs/payments/card/applepay#enroll-in-apple-developer-program](https://docs.tilled.com/docs/payments/card/applepay#enroll-in-apple-developer-program) If you haven’t already, enroll in the Apple Developer Program to access necessary developer resources. [Apple Developer Program](https://developer.apple.com/programs/enroll/) Create sandbox tester account [https://docs.tilled.com/docs/payments/card/applepay#create-sandbox-tester-account](https://docs.tilled.com/docs/payments/card/applepay#create-sandbox-tester-account) To create a sandbox tester account, refer to Apple’s instructions. [Apple’s instructions](https://developer.apple.com/apple-pay/sandbox-testing/#:~:text=supports%20TLS%201.2.-,Create%20a%20Sandbox%20Tester%20Account,-To%20create%20a) Test Apple Pay checkout flow [https://docs.tilled.com/docs/payments/card/applepay#test-apple-pay-checkout-flow](https://docs.tilled.com/docs/payments/card/applepay#test-apple-pay-checkout-flow) Sign into your sandbox tester account on the device used to test your integration. Add a test card number to your Apple Pay Wallet from the selection of test cards provided by Apple. Checkout using the Apple Pay test card. Sign into your sandbox tester account on the device used to test your integration. Add a test card number to your Apple Pay Wallet from the selection of test cards provided by Apple. Checkout using the Apple Pay test card. Last updated on January 2, 2025 January 2, 2025 Level 2/3Card Account Updater [Level 2/3](https://docs.tilled.com/docs/payments/card/level-2-3) [Card Account Updater](https://docs.tilled.com/docs/payments/card/card-account-updater)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/card-account-updater",
    "title": "Tilled",
    "content": "Card Account Updater Card Account Updater (CAU) helps merchants keep customer credit card information current by automatically updating expired or replaced cards. This service reduces payment disruptions caused by outdated card details, making it especially useful for businesses with recurring payments or subscriptions. ℹ️Card Account Updater is only available for online payments. How Card Account Updater Works Card Account Updater must be enabled on your account to take advantage of automatic updates to card details. If you are interested in enabling Card Account Updater, please reach out to support@tilled.com. Card details are checkedTilled checks stored card details for updates weekly, on Mondays. The process to check for updates takes up to 3 days. If an update is found, the card on file is automatically updated with the new credit card details.Webhook event is triggeredEach time a card is checked, Tilled triggers a payment_method.updated event containing the response from the response and the updated_at timestamp. View Card Account Updater Results DashboardAPITo view Card Account Updater responses via the Dashboard:Navigate to the Payment pageSelect the payment you wish to reviewLocate the Payment Method cardIn the Payment Method card, you'll see a row displaying the Last Updater Response and the Last Updated At timestamp. Card Account Updater Responses RESPONSEDESCRIPTIONBILLABLEaccount_closedIssuer has communicated that this account is no longer available for processing. The payment method is no longer chargeable.✓account_expiration_date_updatedThe expiration number has been updated.✓account_number_updatedThe account number has been updated or both the account number and expiration date combined were updated.✓contact_cardholderThe issuer has identified that this consumer has requested not to have account details updated.✓inactive_cardThis card number has not had an authorization over $.01 in the past 24 months and will not be able to receive updates on this card number until it sees payment volume. This response is only applicable to Amex cards.✗new_cardCard account was recently opened. No updates available yet from the card brand.✗no_matchThere is no known update available. Currently the card brand may not have a matching card on file, potentially because there is no update.✗valid_accountAccount is valid. Currently there is no update available.✗ FAQsWhich card brands is Card Account Updater compatible with?Card Account Updater is compatible with Visa, Mastercard, Discover, and Amex cards.Is development work required to take advantage of Card Account Updater?Your integration must be using Tilled.jsJS v2. If you are already using v2, then no development work is required.Last updated on March 10, 2025Apple PaySurcharging Card Account Updater Card Account Updater (CAU) helps merchants keep customer credit card information current by automatically updating expired or replaced cards. This service reduces payment disruptions caused by outdated card details, making it especially useful for businesses with recurring payments or subscriptions. ℹ️Card Account Updater is only available for online payments. ℹ️ Card Account Updater is only available for online payments. Card Account Updater is only available for online payments. Card Account Updater is only available for online payments. How Card Account Updater Works [https://docs.tilled.com/docs/payments/card/card-account-updater#how-card-account-updater-works](https://docs.tilled.com/docs/payments/card/card-account-updater#how-card-account-updater-works) Card Account Updater must be enabled on your account to take advantage of automatic updates to card details. If you are interested in enabling Card Account Updater, please reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) Card details are checkedTilled checks stored card details for updates weekly, on Mondays. The process to check for updates takes up to 3 days. If an update is found, the card on file is automatically updated with the new credit card details.Webhook event is triggeredEach time a card is checked, Tilled triggers a payment_method.updated event containing the response from the response and the updated_at timestamp. Card details are checked [https://docs.tilled.com/docs/payments/card/card-account-updater#card-details-are-checked](https://docs.tilled.com/docs/payments/card/card-account-updater#card-details-are-checked) Tilled checks stored card details for updates weekly, on Mondays. The process to check for updates takes up to 3 days. If an update is found, the card on file is automatically updated with the new credit card details. Tilled Webhook event is triggered [https://docs.tilled.com/docs/payments/card/card-account-updater#webhook-event-is-triggered](https://docs.tilled.com/docs/payments/card/card-account-updater#webhook-event-is-triggered) Each time a card is checked, Tilled triggers a payment_method.updated event containing the response from the response and the updated_at timestamp. Tilled payment_method.updated [response](https://docs.tilled.com/docs/payments/card/card-account-updater#card-account-updater-responses) updated_at View Card Account Updater Results [https://docs.tilled.com/docs/payments/card/card-account-updater#view-card-account-updater-results](https://docs.tilled.com/docs/payments/card/card-account-updater#view-card-account-updater-results) DashboardAPITo view Card Account Updater responses via the Dashboard:Navigate to the Payment pageSelect the payment you wish to reviewLocate the Payment Method cardIn the Payment Method card, you'll see a row displaying the Last Updater Response and the Last Updated At timestamp. DashboardAPI [Dashboard](https://docs.tilled.com/docs/payments/card/card-account-updater#dashboard) [API](https://docs.tilled.com/docs/payments/card/card-account-updater#api) To view Card Account Updater responses via the Dashboard:Navigate to the Payment pageSelect the payment you wish to reviewLocate the Payment Method cardIn the Payment Method card, you'll see a row displaying the Last Updater Response and the Last Updated At timestamp. To view Card Account Updater responses via the Dashboard: Navigate to the Payment pageSelect the payment you wish to reviewLocate the Payment Method card Navigate to the Payment page Payment Select the payment you wish to review Locate the Payment Method card Payment Method In the Payment Method card, you'll see a row displaying the Last Updater Response and the Last Updated At timestamp. Payment Method Last Updater Response Last Updated At Card Account Updater Responses [https://docs.tilled.com/docs/payments/card/card-account-updater#card-account-updater-responses](https://docs.tilled.com/docs/payments/card/card-account-updater#card-account-updater-responses) RESPONSEDESCRIPTIONBILLABLEaccount_closedIssuer has communicated that this account is no longer available for processing. The payment method is no longer chargeable.✓account_expiration_date_updatedThe expiration number has been updated.✓account_number_updatedThe account number has been updated or both the account number and expiration date combined were updated.✓contact_cardholderThe issuer has identified that this consumer has requested not to have account details updated.✓inactive_cardThis card number has not had an authorization over $.01 in the past 24 months and will not be able to receive updates on this card number until it sees payment volume. This response is only applicable to Amex cards.✗new_cardCard account was recently opened. No updates available yet from the card brand.✗no_matchThere is no known update available. Currently the card brand may not have a matching card on file, potentially because there is no update.✗valid_accountAccount is valid. Currently there is no update available.✗ RESPONSEDESCRIPTIONBILLABLE RESPONSEDESCRIPTIONBILLABLE RESPONSE RESPONSE DESCRIPTION DESCRIPTION BILLABLE BILLABLE account_closedIssuer has communicated that this account is no longer available for processing. The payment method is no longer chargeable.✓account_expiration_date_updatedThe expiration number has been updated.✓account_number_updatedThe account number has been updated or both the account number and expiration date combined were updated.✓contact_cardholderThe issuer has identified that this consumer has requested not to have account details updated.✓inactive_cardThis card number has not had an authorization over $.01 in the past 24 months and will not be able to receive updates on this card number until it sees payment volume. This response is only applicable to Amex cards.✗new_cardCard account was recently opened. No updates available yet from the card brand.✗no_matchThere is no known update available. Currently the card brand may not have a matching card on file, potentially because there is no update.✗valid_accountAccount is valid. Currently there is no update available.✗ account_closedIssuer has communicated that this account is no longer available for processing. The payment method is no longer chargeable.✓ account_closed account_closed Issuer has communicated that this account is no longer available for processing. The payment method is no longer chargeable. ✓ account_expiration_date_updatedThe expiration number has been updated.✓ account_expiration_date_updated account_expiration_date_updated The expiration number has been updated. ✓ account_number_updatedThe account number has been updated or both the account number and expiration date combined were updated.✓ account_number_updated account_number_updated The account number has been updated or both the account number and expiration date combined were updated. ✓ contact_cardholderThe issuer has identified that this consumer has requested not to have account details updated.✓ contact_cardholder contact_cardholder The issuer has identified that this consumer has requested not to have account details updated. ✓ inactive_cardThis card number has not had an authorization over $.01 in the past 24 months and will not be able to receive updates on this card number until it sees payment volume. This response is only applicable to Amex cards.✗ inactive_card inactive_card This card number has not had an authorization over $.01 in the past 24 months and will not be able to receive updates on this card number until it sees payment volume. This response is only applicable to Amex cards. ✗ new_cardCard account was recently opened. No updates available yet from the card brand.✗ new_card new_card Card account was recently opened. No updates available yet from the card brand. ✗ no_matchThere is no known update available. Currently the card brand may not have a matching card on file, potentially because there is no update.✗ no_match no_match There is no known update available. Currently the card brand may not have a matching card on file, potentially because there is no update. ✗ valid_accountAccount is valid. Currently there is no update available.✗ valid_account valid_account Account is valid. Currently there is no update available. ✗ FAQsWhich card brands is Card Account Updater compatible with?Card Account Updater is compatible with Visa, Mastercard, Discover, and Amex cards.Is development work required to take advantage of Card Account Updater?Your integration must be using Tilled.jsJS v2. If you are already using v2, then no development work is required. FAQs Which card brands is Card Account Updater compatible with?Card Account Updater is compatible with Visa, Mastercard, Discover, and Amex cards. Which card brands is Card Account Updater compatible with? Which card brands is Card Account Updater compatible with? [https://docs.tilled.com/docs/payments/card/card-account-updater#faq-which-card-brands-is-card-account-updater-compatible-with](https://docs.tilled.com/docs/payments/card/card-account-updater#faq-which-card-brands-is-card-account-updater-compatible-with) Card Account Updater is compatible with Visa, Mastercard, Discover, and Amex cards. Is development work required to take advantage of Card Account Updater?Your integration must be using Tilled.jsJS v2. If you are already using v2, then no development work is required. Is development work required to take advantage of Card Account Updater? Is development work required to take advantage of Card Account Updater? [https://docs.tilled.com/docs/payments/card/card-account-updater#faq-is-development-work-required-to-take-advantage-of-card-account-updater](https://docs.tilled.com/docs/payments/card/card-account-updater#faq-is-development-work-required-to-take-advantage-of-card-account-updater) Your integration must be using Tilled.jsJS v2. If you are already using v2, then no development work is required. [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Last updated on March 10, 2025 March 10, 2025 Apple PaySurcharging [Apple Pay](https://docs.tilled.com/docs/payments/card/applepay) [Surcharging](https://docs.tilled.com/docs/payments/card/surcharging)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/surcharging",
    "title": "Tilled",
    "content": "Surcharging Surcharging is the practice of adding an extra fee to a payment when a customer chooses to pay with a credit card. This allows businesses to offset the processing costs associated with credit card payments. ℹ️Official support for surcharging will be available in Q2 2025. Surcharging Regulations Surcharging is subject to strict regulations that vary by region and card network. Below are some critical areas to consider. Legal restrictions by jurisdiction Some countries and states prohibit or heavily restrict surcharging, while others allow it under certain conditions. Always verify the local laws to ensure compliance, as surcharging may be entirely banned in certain areas (e.g., certain U.S. states). Card brand rules Major card brands like Visa, Mastercard, American Express, and Discover each have specific rules for surcharging. For example: Disclosure requirements: Card brands typically require clear, conspicuous disclosure of surcharges at the point of entry (e.g., store signage) and on receipts. Surcharge limits: Card networks cap surcharges at the actual cost of processing or a maximum percentage (e.g., 3% or 4%), whichever is lower. Card type restrictions: Surcharging is generally allowed only on credit card payments, not on debit or prepaid cards. Surcharging with Tilled Software platforms have two options for setting up surcharging with Tilled. In both cases, the software platform is responsible for controlling the surcharge logic and ensuring compliance with card brand rules. Surcharging with platform fees: The software platform controls surcharge logic using Platform FeesAPI. This option is only available for software platform processing on Paysafe. Surcharging without platform fees: Surcharging is handled by programmatically increasing the payment amount on the Payment IntentAPI. For example, for a 2.9% surcharge on a $100 purchase, the payment intent amount would be updated to $102.90. Surcharging Resources Surcharging Considerations and Requirements - Visa Surcharging Frequently Asked Questions - Visa Surcharge Rules - Mastercard Surcharging Frequently Asked Questions - Mastercard Surcharging - Amex Last updated on February 4, 2025Card Account UpdaterManual Capture Surcharging Surcharging is the practice of adding an extra fee to a payment when a customer chooses to pay with a credit card. This allows businesses to offset the processing costs associated with credit card payments. ℹ️Official support for surcharging will be available in Q2 2025. ℹ️ Official support for surcharging will be available in Q2 2025. Official support for surcharging will be available in Q2 2025. Official support for surcharging will be available in Q2 2025. Surcharging Regulations [https://docs.tilled.com/docs/payments/card/surcharging#surcharging-regulations](https://docs.tilled.com/docs/payments/card/surcharging#surcharging-regulations) Surcharging is subject to strict regulations that vary by region and card network. Below are some critical areas to consider. Legal restrictions by jurisdiction [https://docs.tilled.com/docs/payments/card/surcharging#legal-restrictions-by-jurisdiction](https://docs.tilled.com/docs/payments/card/surcharging#legal-restrictions-by-jurisdiction) Some countries and states prohibit or heavily restrict surcharging, while others allow it under certain conditions. Always verify the local laws to ensure compliance, as surcharging may be entirely banned in certain areas (e.g., certain U.S. states). Card brand rules [https://docs.tilled.com/docs/payments/card/surcharging#card-brand-rules](https://docs.tilled.com/docs/payments/card/surcharging#card-brand-rules) Major card brands like Visa, Mastercard, American Express, and Discover each have specific rules for surcharging. For example: Disclosure requirements: Card brands typically require clear, conspicuous disclosure of surcharges at the point of entry (e.g., store signage) and on receipts. Surcharge limits: Card networks cap surcharges at the actual cost of processing or a maximum percentage (e.g., 3% or 4%), whichever is lower. Card type restrictions: Surcharging is generally allowed only on credit card payments, not on debit or prepaid cards. Disclosure requirements: Card brands typically require clear, conspicuous disclosure of surcharges at the point of entry (e.g., store signage) and on receipts. Disclosure requirements: Surcharge limits: Card networks cap surcharges at the actual cost of processing or a maximum percentage (e.g., 3% or 4%), whichever is lower. Surcharge limits: Card type restrictions: Surcharging is generally allowed only on credit card payments, not on debit or prepaid cards. Card type restrictions: Surcharging with Tilled Tilled [https://docs.tilled.com/docs/payments/card/surcharging#surcharging-with-](https://docs.tilled.com/docs/payments/card/surcharging#surcharging-with-) Software platforms have two options for setting up surcharging with Tilled. In both cases, the software platform is responsible for controlling the surcharge logic and ensuring compliance with card brand rules. Tilled Surcharging with platform fees: The software platform controls surcharge logic using Platform FeesAPI. This option is only available for software platform processing on Paysafe. Surcharging without platform fees: Surcharging is handled by programmatically increasing the payment amount on the Payment IntentAPI. For example, for a 2.9% surcharge on a $100 purchase, the payment intent amount would be updated to $102.90. Surcharging with platform fees: The software platform controls surcharge logic using Platform FeesAPI. This option is only available for software platform processing on Paysafe. Surcharging with platform fees: [Platform FeesAPI](https://docs.tilled.com/api-reference#tag/platform-fees) API Surcharging without platform fees: Surcharging is handled by programmatically increasing the payment amount on the Payment IntentAPI. For example, for a 2.9% surcharge on a $100 purchase, the payment intent amount would be updated to $102.90. Surcharging without platform fees: [Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/POST/v1/payment-intents) API Surcharging Resources [https://docs.tilled.com/docs/payments/card/surcharging#surcharging-resources](https://docs.tilled.com/docs/payments/card/surcharging#surcharging-resources) Surcharging Considerations and Requirements - Visa Surcharging Frequently Asked Questions - Visa Surcharge Rules - Mastercard Surcharging Frequently Asked Questions - Mastercard Surcharging - Amex Surcharging Considerations and Requirements - Visa [Surcharging Considerations and Requirements - Visa](https://usa.visa.com/content/dam/VCOM/global/support-legal/documents/merchant-surcharging-considerations-and-requirements.pdf) Surcharging Frequently Asked Questions - Visa [Surcharging Frequently Asked Questions - Visa](https://usa.visa.com/content/dam/VCOM/global/support-legal/documents/merchant-surcharging-qa-for-web.pdf) Surcharge Rules - Mastercard [Surcharge Rules - Mastercard](https://www.mastercard.us/en-us/business/overview/support/merchant-surcharge-rules.html) Surcharging Frequently Asked Questions - Mastercard [Surcharging Frequently Asked Questions - Mastercard](https://www.mastercard.us/content/dam/public/mastercardcom/na/us/en/documents/Merchant_Surcharge_FAQ.pdf) Surcharging - Amex [Surcharging - Amex](https://www.americanexpress.com/en-nz/credit-cards/about-credit-cards/surcharge/) Last updated on February 4, 2025 February 4, 2025 Card Account UpdaterManual Capture [Card Account Updater](https://docs.tilled.com/docs/payments/card/card-account-updater) [Manual Capture](https://docs.tilled.com/docs/payments/card/manual-capture)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/manual-capture",
    "title": "Tilled",
    "content": "Manual Capture Manual capture lets you place a pre-authorization on a card for a specific amount, then manually capture the full amount or a portion of it later. This approach verifies that the account is valid and has sufficient funds to cover the payment without immediately debiting the cardholder’s account. To pre-authorize an amount, set the capture_method to manual when Creating a Payment IntentAPI. When you’re ready to complete the payment, use the Capture a Payment IntentAPI endpoint. ℹ️Manual capture is not available for payments processed through Paysafe terminal readers.Last updated on October 25, 2024SurchargingOn-Device Tipping Manual Capture Manual capture lets you place a pre-authorization on a card for a specific amount, then manually capture the full amount or a portion of it later. This approach verifies that the account is valid and has sufficient funds to cover the payment without immediately debiting the cardholder’s account. To pre-authorize an amount, set the capture_method to manual when Creating a Payment IntentAPI. When you’re ready to complete the payment, use the Capture a Payment IntentAPI endpoint. capture_method manual [Creating a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API [Capture a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/POST/v1/payment-intents/%7Bid%7D/capture) API ℹ️Manual capture is not available for payments processed through Paysafe terminal readers. ℹ️ Manual capture is not available for payments processed through Paysafe terminal readers. Manual capture is not available for payments processed through Paysafe terminal readers. Manual capture is not available for payments processed through Paysafe terminal readers. [Paysafe terminal readers](https://docs.tilled.com/docs/get-started/processor-comparison) Last updated on October 25, 2024 October 25, 2024 SurchargingOn-Device Tipping [Surcharging](https://docs.tilled.com/docs/payments/card/surcharging) [On-Device Tipping](https://docs.tilled.com/docs/payments/card/on-device-tipping)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/on-device-tipping",
    "title": "Tilled",
    "content": "On-Device Tipping On-device tipping allows customers to select a tip percentage directly on the payment terminal during the checkout process. The currently available tip options are 10%, 15%, 20%, 25%, with an additional option for customers to input a custom amount. Tip settings are configured at the terminal reader level and are disabled by default. You can enable and configure these settings either through the Dashboard or using the Update a Terminal ReaderAPI endpoint. DashboardAPITo configure on-device tipping:Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Tips option to OnLast updated on December 23, 2024Manual CaptureReceipts On-Device Tipping On-device tipping allows customers to select a tip percentage directly on the payment terminal during the checkout process. The currently available tip options are 10%, 15%, 20%, 25%, with an additional option for customers to input a custom amount. Tip settings are configured at the terminal reader level and are disabled by default. You can enable and configure these settings either through the Dashboard or using the Update a Terminal ReaderAPI endpoint. [Update a Terminal ReaderAPI](https://docs.tilled.com/api-reference#tag/terminal-readers/post/v1/terminal-readers/%7Bid%7D) API DashboardAPITo configure on-device tipping:Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Tips option to On DashboardAPI [Dashboard](https://docs.tilled.com/docs/payments/card/on-device-tipping#dashboard) [API](https://docs.tilled.com/docs/payments/card/on-device-tipping#api) To configure on-device tipping:Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Tips option to On To configure on-device tipping: Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Tips option to On Navigate to the Terminals page Terminals Select the terminal you wish to configure Toggle the Tips option to On Tips On Last updated on December 23, 2024 December 23, 2024 Manual CaptureReceipts [Manual Capture](https://docs.tilled.com/docs/payments/card/manual-capture) [Receipts](https://docs.tilled.com/docs/payments/card/receipts)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/receipts",
    "title": "Tilled",
    "content": "Receipts Enabling printed receipts allows the terminal to print copies of the transaction receipt for both the customer and the merchant. This feature provides businesses with a physical proof of purchase. Receipt settings for TSYS terminal readers are configured at the terminal level and are disabled by default. You can enable and configure these settings either through the Dashboard or using the Update a Terminal ReaderAPI endpoint. Receipt settings for Paysafe terminal readers are configured directly on the terminal reader. DashboardAPITerminalTo configure receipt printing for TSYS terminals via the Dashboard:Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Receipts option to “On”Last updated on December 27, 2024On-Device TippingHow Bank-to-Bank Payments Work Receipts Enabling printed receipts allows the terminal to print copies of the transaction receipt for both the customer and the merchant. This feature provides businesses with a physical proof of purchase. Receipt settings for TSYS terminal readers are configured at the terminal level and are disabled by default. You can enable and configure these settings either through the Dashboard or using the Update a Terminal ReaderAPI endpoint. [Update a Terminal ReaderAPI](https://docs.tilled.com/api-reference#tag/terminal-readers/post/v1/terminal-readers/%7Bid%7D) API Receipt settings for Paysafe terminal readers are configured directly on the terminal reader. DashboardAPITerminalTo configure receipt printing for TSYS terminals via the Dashboard:Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Receipts option to “On” DashboardAPITerminal [Dashboard](https://docs.tilled.com/docs/payments/card/receipts#dashboard) [API](https://docs.tilled.com/docs/payments/card/receipts#api) [Terminal](https://docs.tilled.com/docs/payments/card/receipts#terminal) To configure receipt printing for TSYS terminals via the Dashboard:Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Receipts option to “On” To configure receipt printing for TSYS terminals via the Dashboard: Navigate to the Terminals pageSelect the terminal you wish to configureToggle the Receipts option to “On” Navigate to the Terminals page Terminals Select the terminal you wish to configure Toggle the Receipts option to “On” Receipts Last updated on December 27, 2024 December 27, 2024 On-Device TippingHow Bank-to-Bank Payments Work [On-Device Tipping](https://docs.tilled.com/docs/payments/card/on-device-tipping) [How Bank-to-Bank Payments Work](https://docs.tilled.com/docs/payments/bank-to-bank/overview)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/bank-to-bank/overview",
    "title": "Tilled",
    "content": "How Bank-to-Bank Payments Work Tilled facilitates bank-to-bank payments via ACH (Automated Clearing House) in the U.S. and EFT (Electronic Funds Transfer) in Canada, currently supporting only debit ACH and EFT payments. Limitations of bank-to-bank payments Longer funding times: Bank-to-bank payments typically take longer to process than credit card payments. No immediate reversals: Once a bank transfer is processed and batched, it cannot be stopped or reversed. Payments cannot be refunded until they have settled. Return and failure delays: Unlike credit card payments that provide immediate feedback on declined cards, failures in bank account payments may not become apparent for several days. Strict processing limits: A merchant cannot process a single payment that exceeds their approved limit or exceed the number of payments they are underwritten for in a month. ACH Payment Lifecycle InitiationThe payment starts when either the merchant or customer initiates an ACH payment.SubmissionThe bank or payment processor submits the payments to the ACH network, where it can be batched with other payments.ClearingThe Federal Reserve checks and validates the payment details as the clearinghouse.ProcessingThe Federal Reserve processes the payment by crediting the recipient’s bank account or debiting the payer’s bank account. This typically occurs within 1-2 days of payment initiation.SettlementThe banks finalize the fund transfer through the Federal Reserve.Funds availabilityThe transferred funds become available in the recipient’s account or are confirmed taken from the payer’s account. This typically occurs within 2-5 days of payment initiation. While the typical timeline for ACH payments outlined is generally reliable, several factors can delay the timeline: Cut-off times: Payments initiated after the batch cut-off time may not be sent for processing until the next business day. Weekends and holidays: Weekends and bank holidays can add delays. Refer to U.S. bank holidays for ACH payments and Canada bank holidays for EFT payments. Bank policies: Different banks may have varying processing rules and times, which can affect the speed of payment completion. ACH Payment States Webhooks can be configured, particularly the payment_intent.updated and charge.updated events, to receive real-time updates when the status of a bank-to-bank payment changes. DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPSfailedfailedThe payment failed immediately upon attempt.Review the payment details for errors and attempt to resolve them. Re-initiate the payment if necessary.pendingpendingThe payment has been initiated and is currently being processed in the ACH network. It has not yet been cleared or settled.No immediate action required; monitor the payment status for updates.succeededsucceededThe payment has successfully cleared and settled.No action required.returnedfailedThe payment was returned by the recipient's bank for reasons such as insufficient funds, incorrect account details, or a stop payment request.Review the failure code and address the reason for the return.Last updated on September 27, 2024ReceiptsTiming How Bank-to-Bank Payments Work Tilled facilitates bank-to-bank payments via ACH (Automated Clearing House) in the U.S. and EFT (Electronic Funds Transfer) in Canada, currently supporting only debit ACH and EFT payments. Tilled Limitations of bank-to-bank payments Limitations of bank-to-bank payments Longer funding times: Bank-to-bank payments typically take longer to process than credit card payments. No immediate reversals: Once a bank transfer is processed and batched, it cannot be stopped or reversed. Payments cannot be refunded until they have settled. Return and failure delays: Unlike credit card payments that provide immediate feedback on declined cards, failures in bank account payments may not become apparent for several days. Strict processing limits: A merchant cannot process a single payment that exceeds their approved limit or exceed the number of payments they are underwritten for in a month. Longer funding times: Bank-to-bank payments typically take longer to process than credit card payments. Longer funding times: No immediate reversals: Once a bank transfer is processed and batched, it cannot be stopped or reversed. Payments cannot be refunded until they have settled. No immediate reversals: Return and failure delays: Unlike credit card payments that provide immediate feedback on declined cards, failures in bank account payments may not become apparent for several days. Return and failure delays: Strict processing limits: A merchant cannot process a single payment that exceeds their approved limit or exceed the number of payments they are underwritten for in a month. Strict processing limits: ACH Payment Lifecycle [https://docs.tilled.com/docs/payments/bank-to-bank/overview#ach-payment-lifecycle](https://docs.tilled.com/docs/payments/bank-to-bank/overview#ach-payment-lifecycle) InitiationThe payment starts when either the merchant or customer initiates an ACH payment.SubmissionThe bank or payment processor submits the payments to the ACH network, where it can be batched with other payments.ClearingThe Federal Reserve checks and validates the payment details as the clearinghouse.ProcessingThe Federal Reserve processes the payment by crediting the recipient’s bank account or debiting the payer’s bank account. This typically occurs within 1-2 days of payment initiation.SettlementThe banks finalize the fund transfer through the Federal Reserve.Funds availabilityThe transferred funds become available in the recipient’s account or are confirmed taken from the payer’s account. This typically occurs within 2-5 days of payment initiation. Initiation [https://docs.tilled.com/docs/payments/bank-to-bank/overview#initiation](https://docs.tilled.com/docs/payments/bank-to-bank/overview#initiation) The payment starts when either the merchant or customer initiates an ACH payment. Submission [https://docs.tilled.com/docs/payments/bank-to-bank/overview#submission](https://docs.tilled.com/docs/payments/bank-to-bank/overview#submission) The bank or payment processor submits the payments to the ACH network, where it can be batched with other payments. Clearing [https://docs.tilled.com/docs/payments/bank-to-bank/overview#clearing](https://docs.tilled.com/docs/payments/bank-to-bank/overview#clearing) The Federal Reserve checks and validates the payment details as the clearinghouse. Processing [https://docs.tilled.com/docs/payments/bank-to-bank/overview#processing](https://docs.tilled.com/docs/payments/bank-to-bank/overview#processing) The Federal Reserve processes the payment by crediting the recipient’s bank account or debiting the payer’s bank account. This typically occurs within 1-2 days of payment initiation. Settlement [https://docs.tilled.com/docs/payments/bank-to-bank/overview#settlement](https://docs.tilled.com/docs/payments/bank-to-bank/overview#settlement) The banks finalize the fund transfer through the Federal Reserve. Funds availability [https://docs.tilled.com/docs/payments/bank-to-bank/overview#funds-availability](https://docs.tilled.com/docs/payments/bank-to-bank/overview#funds-availability) The transferred funds become available in the recipient’s account or are confirmed taken from the payer’s account. This typically occurs within 2-5 days of payment initiation. While the typical timeline for ACH payments outlined is generally reliable, several factors can delay the timeline: Cut-off times: Payments initiated after the batch cut-off time may not be sent for processing until the next business day. Weekends and holidays: Weekends and bank holidays can add delays. Refer to U.S. bank holidays for ACH payments and Canada bank holidays for EFT payments. Bank policies: Different banks may have varying processing rules and times, which can affect the speed of payment completion. Cut-off times: Payments initiated after the batch cut-off time may not be sent for processing until the next business day. Cut-off times: Weekends and holidays: Weekends and bank holidays can add delays. Refer to U.S. bank holidays for ACH payments and Canada bank holidays for EFT payments. Weekends and holidays: [U.S. bank holidays](https://www.federalreserve.gov/aboutthefed/k8.htm) [Canada bank holidays](https://www.bankofcanada.ca/press/upcoming-events/bank-of-canada-holiday-schedule/) Bank policies: Different banks may have varying processing rules and times, which can affect the speed of payment completion. Bank policies: ACH Payment States [https://docs.tilled.com/docs/payments/bank-to-bank/overview#ach-payment-states](https://docs.tilled.com/docs/payments/bank-to-bank/overview#ach-payment-states) Webhooks can be configured, particularly the payment_intent.updated and charge.updated events, to receive real-time updates when the status of a bank-to-bank payment changes. payment_intent.updated charge.updated DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPSfailedfailedThe payment failed immediately upon attempt.Review the payment details for errors and attempt to resolve them. Re-initiate the payment if necessary.pendingpendingThe payment has been initiated and is currently being processed in the ACH network. It has not yet been cleared or settled.No immediate action required; monitor the payment status for updates.succeededsucceededThe payment has successfully cleared and settled.No action required.returnedfailedThe payment was returned by the recipient's bank for reasons such as insufficient funds, incorrect account details, or a stop payment request.Review the failure code and address the reason for the return. DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPS DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPS DASHBOARD STATUS DASHBOARD STATUS API STATUS API STATUS DESCRIPTION DESCRIPTION NEXT STEPS NEXT STEPS failedfailedThe payment failed immediately upon attempt.Review the payment details for errors and attempt to resolve them. Re-initiate the payment if necessary.pendingpendingThe payment has been initiated and is currently being processed in the ACH network. It has not yet been cleared or settled.No immediate action required; monitor the payment status for updates.succeededsucceededThe payment has successfully cleared and settled.No action required.returnedfailedThe payment was returned by the recipient's bank for reasons such as insufficient funds, incorrect account details, or a stop payment request.Review the failure code and address the reason for the return. failedfailedThe payment failed immediately upon attempt.Review the payment details for errors and attempt to resolve them. Re-initiate the payment if necessary. failed failed failed failed The payment failed immediately upon attempt. Review the payment details for errors and attempt to resolve them. Re-initiate the payment if necessary. pendingpendingThe payment has been initiated and is currently being processed in the ACH network. It has not yet been cleared or settled.No immediate action required; monitor the payment status for updates. pending pending pending pending The payment has been initiated and is currently being processed in the ACH network. It has not yet been cleared or settled. No immediate action required; monitor the payment status for updates. succeededsucceededThe payment has successfully cleared and settled.No action required. succeeded succeeded succeeded succeeded The payment has successfully cleared and settled. No action required. returnedfailedThe payment was returned by the recipient's bank for reasons such as insufficient funds, incorrect account details, or a stop payment request.Review the failure code and address the reason for the return. returned returned failed failed The payment was returned by the recipient's bank for reasons such as insufficient funds, incorrect account details, or a stop payment request. Review the failure code and address the reason for the return. Last updated on September 27, 2024 September 27, 2024 ReceiptsTiming [Receipts](https://docs.tilled.com/docs/payments/card/receipts) [Timing](https://docs.tilled.com/docs/payments/bank-to-bank/timing)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/bank-to-bank/timing",
    "title": "Tilled",
    "content": "Timing Bank-to-bank payments typically take up to 5 business days to complete. However, merchants may receive an early payout before the payment is fully processed, depending on their specific payout speed. PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5T+0Payment initiatedPayout initiated--Payment completedT+1Payment initiated-Payout initiated-Payment completedT+2Payment initiated--Payout initiatedPayment completed FAQsWhy is the status of my ACH payment still pending after it has been paid out?Even though funds are available, the payment may still be returned. For this reason, we initially set the status to pending when the payment intent is confirmed. If the payment isn't returned, the status will update to succeeded​ on the sixth business day at approximately 6:00 AM ET.Last updated on March 10, 2025How Bank-to-Bank Payments WorkACH Returns Timing Bank-to-bank payments typically take up to 5 business days to complete. However, merchants may receive an early payout before the payment is fully processed, depending on their specific payout speed. PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5T+0Payment initiatedPayout initiated--Payment completedT+1Payment initiated-Payout initiated-Payment completedT+2Payment initiated--Payout initiatedPayment completed PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5 PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5 PAYOUT SPEED PAYOUT SPEED DAY 1 DAY 1 DAY 2 DAY 2 DAY 3 DAY 3 DAY 4 DAY 4 DAY 5 DAY 5 T+0Payment initiatedPayout initiated--Payment completedT+1Payment initiated-Payout initiated-Payment completedT+2Payment initiated--Payout initiatedPayment completed T+0Payment initiatedPayout initiated--Payment completed T+0 Payment initiated Payout initiated - - Payment completed T+1Payment initiated-Payout initiated-Payment completed T+1 Payment initiated - Payout initiated - Payment completed T+2Payment initiated--Payout initiatedPayment completed T+2 Payment initiated - - Payout initiated Payment completed FAQsWhy is the status of my ACH payment still pending after it has been paid out?Even though funds are available, the payment may still be returned. For this reason, we initially set the status to pending when the payment intent is confirmed. If the payment isn't returned, the status will update to succeeded​ on the sixth business day at approximately 6:00 AM ET. FAQs Why is the status of my ACH payment still pending after it has been paid out?Even though funds are available, the payment may still be returned. For this reason, we initially set the status to pending when the payment intent is confirmed. If the payment isn't returned, the status will update to succeeded​ on the sixth business day at approximately 6:00 AM ET. Why is the status of my ACH payment still pending after it has been paid out? Why is the status of my ACH payment still pending after it has been paid out? [https://docs.tilled.com/docs/payments/bank-to-bank/timing#faq-why-is-the-status-of-my-ach-payment-still-pending-after-it-has-been-paid-out](https://docs.tilled.com/docs/payments/bank-to-bank/timing#faq-why-is-the-status-of-my-ach-payment-still-pending-after-it-has-been-paid-out) Even though funds are available, the payment may still be returned. For this reason, we initially set the status to pending when the payment intent is confirmed. If the payment isn't returned, the status will update to succeeded​ on the sixth business day at approximately 6:00 AM ET. [returned](https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns) pending succeeded Last updated on March 10, 2025 March 10, 2025 How Bank-to-Bank Payments WorkACH Returns [How Bank-to-Bank Payments Work](https://docs.tilled.com/docs/payments/bank-to-bank/overview) [ACH Returns](https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns",
    "title": "Tilled",
    "content": "ACH Returns ACH payments can sometimes fail due to various issues related to the sender’s or recipient’s bank account. The table below outlines common ACH return codes, their associated failure messages, and recommended resolutions to help merchants efficiently handle these returns. FAILURE CODEFAILURE MESSAGENEXT STEPSR01The account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue, and resubmit the payment once funds are available.R02The account is closed.Obtain new account information and resubmit the payment.R03The account number or routing information doesn’t match any accounts at the receiving bank.Confirm the payment information and resubmit the payment.R04The account number provided is incorrect.Correct the account number and resubmit the payment.R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.Contact Support for more information.R06The originating bank returned the payment.Contact Support for more information.R07The customer revoked the authorization of the payment.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R08The account holder placed a stop payment order on this specific payment.Contact the account holder to resolve the issue.R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.Resubmit the payment once the funds are collected.R10The customer stated that the payment was not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R11A truncation (check-clearing) error occurred.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.R12The customer changed banks and the account has been transferred to another receiving bank.Confirm the payment information and resubmit the payment.R13The ACH routing number is incorrect.Correct the routing number and resubmit the payment.R14The representative payee is deceased or cannot perform duties.Obtain a new representative payee and update records.R15The beneficiary or account holder is deceased.Obtain new account information and resubmit the payment.R16The account is frozen due to legal action or bank policy.Obtain new account information and resubmit the payment.R17Entries contain invalid formatting or data.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R18Payment was initiated with an incorrect effective entry date.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R19Amount entered in the Amount field is invalid.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R20Policies or regulations prevent ACH payments on this account.Use an alternative bank account or payment method.R21Company ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R22Individual ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R23The receiving bank refused the credit entry.Contact Support for more information.R24The same payment was submitted more than once.Confirm whether it’s a true duplicate and proceed accordingly.R25The addenda record is incorrect or out of sequence.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R26A required field is missing information.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R27Trace numbers submitted are not consistent with the trace numbers in the addenda record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R28The check digit in the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R29The corporate account holder notified the receiving bank that the payment is not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R30The receiving bank does not participate in the check truncation program.Use an alternative bank account or payment method.R31The receiving bank has asked the originating bank if it can return the corporate credit or debit card or Corporate Trade Exchange (CTX) payment format, and the originating bank has agreed.Contact Support for more information.R32The receiving bank is not able to settle the entry for various reasons.Advise the customer to contact their bank for more information.R33The receiving bank has returned the entry for a lost, destroyed, or damaged check (XCK entry).Advise the customer to contact their bank for more information.R34A federal or state regulator has limited the receiving bank’s ability to process ACH payments.Advise the customer to contact their bank for more information.R35A debit entry has been improperly submitted.Advise the customer to contact their bank for more information.R36A credit entry has been improperly submitted.Advise the customer to contact their bank for more information.R37A duplicate payment was attempted by presenting the source document related to an existing ACH payment for processing.Validate whether the payment is a duplicate and proceed accordingly.R38The receiving account holder requests to stop payment on a check that’s been converted into an electronic payment.Contact the account holder to resolve the issue.R39The source document related to the ACH payment is incorrect or inadequate.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R40A federal government agency has returned an automated enrollment entry (ENR entry).Contact Support for more information.R41Transaction code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R42The check digit at the end of the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R43Receiving bank account number is incorrect.Correct the account number and resubmit the payment.R44Individual identification number provided doesn’t match the ID number on record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R45Account holder’s name is incorrect or misspelled.Correct the account holder's name and resubmit the payment.R46Representative payee indicator code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R47The same ENR has been submitted more than once.Validate whether the payment is a duplicate and proceed accordingly.R50The receiving bank is either in a state that doesn’t allow digital payments or requires canceled checks to be returned.Contact Support for more information.R51Item related to RCK entry is ineligible or RCK entry is improper.Contact Support for more information.R52The account holder places a stop order on a bounced check that’s being reprocessed electronically.Contact the account holder to resolve the issue.R53Both the original payment and its corresponding RCK entry have been submitted, resulting in a duplicate payment.Validate whether the payment is a duplicate and proceed accordingly.R61A reversed payment has been sent to the incorrect institution.Correct the routing number and resubmit the payment.R62A debit entry was sent in error or needs to be reversed.No action needed.R63The dollar amount specified in the payment is wrong.Correct the amount and resubmit the payment.R64The individual ID number in the return payment doesn’t match the one in the original entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R65The transaction code is not correct for the type of payment.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R66The company ID in the payment doesn’t match the ID number in the batch header record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R67The return entry was already processed, resulting in a duplicate.No action needed.R68The return was not processed within the required time frame.No action needed.R69One or more fields contain incorrect information as entered by the originating bank.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R70A valid return entry was not processed as it should have been, or a return was not requested by the originating bank.Contact Support for more information.R71A dishonored return entry has not been sent to the correct institution.Contact Support for more information.R72A dishonored return was not processed within the required time frame.Contact Support for more information.R73The receiving bank is confirming that the original return was processed within the required time frame.No action needed.R74A previously improperly processed return has since been corrected.No action needed.R75This is a response to rejection code R67. The receiving bank is contesting an improper dishonor of a return entry by the originating bank.No action needed.R76This is a response to rejection code R69, in which the originating bank indicated field errors.No action needed.R77This is a response to rejection code R62, indicating that the receiving bank has either already returned the incorrect payment and the reversal, or it cannot recover the funds from the recipient as specified by R62.Contact Support for more information.R80Coding errors exist in the IAT entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R81The receiving bank doesn’t participate in the IAT program.Use an alternative bank account or payment method.R82The foreign receiving bank’s identification is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R83The foreign receiving bank cannot complete the payment.Contact Support for more information.R84The entry hasn’t been processed by the designated gateway.Contact Support for more information.R85An outbound international payment has been incorrectly coded.Contact Support for more information. Prevent ACH Returns Verify account information: Ensure that all account details, including routing and account numbers, are accurate and current before initiating payments. Use verification tools: Implement tools, such as Plaid, to confirm the validity of account details. This helps avoid payments to closed or invalid accounts. Monitor funding: Regularly check account balances to confirm sufficient funds are available prior to initiating ACH payments. Strengthen authorization protocols: Secure explicit customer approvals for recurring payments and periodically update these authorizations as needed. Last updated on October 17, 2024TimingStatement Descriptors ACH Returns ACH payments can sometimes fail due to various issues related to the sender’s or recipient’s bank account. The table below outlines common ACH return codes, their associated failure messages, and recommended resolutions to help merchants efficiently handle these returns. FAILURE CODEFAILURE MESSAGENEXT STEPSR01The account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue, and resubmit the payment once funds are available.R02The account is closed.Obtain new account information and resubmit the payment.R03The account number or routing information doesn’t match any accounts at the receiving bank.Confirm the payment information and resubmit the payment.R04The account number provided is incorrect.Correct the account number and resubmit the payment.R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.Contact Support for more information.R06The originating bank returned the payment.Contact Support for more information.R07The customer revoked the authorization of the payment.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R08The account holder placed a stop payment order on this specific payment.Contact the account holder to resolve the issue.R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.Resubmit the payment once the funds are collected.R10The customer stated that the payment was not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R11A truncation (check-clearing) error occurred.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.R12The customer changed banks and the account has been transferred to another receiving bank.Confirm the payment information and resubmit the payment.R13The ACH routing number is incorrect.Correct the routing number and resubmit the payment.R14The representative payee is deceased or cannot perform duties.Obtain a new representative payee and update records.R15The beneficiary or account holder is deceased.Obtain new account information and resubmit the payment.R16The account is frozen due to legal action or bank policy.Obtain new account information and resubmit the payment.R17Entries contain invalid formatting or data.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R18Payment was initiated with an incorrect effective entry date.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R19Amount entered in the Amount field is invalid.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R20Policies or regulations prevent ACH payments on this account.Use an alternative bank account or payment method.R21Company ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R22Individual ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R23The receiving bank refused the credit entry.Contact Support for more information.R24The same payment was submitted more than once.Confirm whether it’s a true duplicate and proceed accordingly.R25The addenda record is incorrect or out of sequence.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R26A required field is missing information.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R27Trace numbers submitted are not consistent with the trace numbers in the addenda record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R28The check digit in the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R29The corporate account holder notified the receiving bank that the payment is not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R30The receiving bank does not participate in the check truncation program.Use an alternative bank account or payment method.R31The receiving bank has asked the originating bank if it can return the corporate credit or debit card or Corporate Trade Exchange (CTX) payment format, and the originating bank has agreed.Contact Support for more information.R32The receiving bank is not able to settle the entry for various reasons.Advise the customer to contact their bank for more information.R33The receiving bank has returned the entry for a lost, destroyed, or damaged check (XCK entry).Advise the customer to contact their bank for more information.R34A federal or state regulator has limited the receiving bank’s ability to process ACH payments.Advise the customer to contact their bank for more information.R35A debit entry has been improperly submitted.Advise the customer to contact their bank for more information.R36A credit entry has been improperly submitted.Advise the customer to contact their bank for more information.R37A duplicate payment was attempted by presenting the source document related to an existing ACH payment for processing.Validate whether the payment is a duplicate and proceed accordingly.R38The receiving account holder requests to stop payment on a check that’s been converted into an electronic payment.Contact the account holder to resolve the issue.R39The source document related to the ACH payment is incorrect or inadequate.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R40A federal government agency has returned an automated enrollment entry (ENR entry).Contact Support for more information.R41Transaction code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R42The check digit at the end of the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R43Receiving bank account number is incorrect.Correct the account number and resubmit the payment.R44Individual identification number provided doesn’t match the ID number on record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R45Account holder’s name is incorrect or misspelled.Correct the account holder's name and resubmit the payment.R46Representative payee indicator code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R47The same ENR has been submitted more than once.Validate whether the payment is a duplicate and proceed accordingly.R50The receiving bank is either in a state that doesn’t allow digital payments or requires canceled checks to be returned.Contact Support for more information.R51Item related to RCK entry is ineligible or RCK entry is improper.Contact Support for more information.R52The account holder places a stop order on a bounced check that’s being reprocessed electronically.Contact the account holder to resolve the issue.R53Both the original payment and its corresponding RCK entry have been submitted, resulting in a duplicate payment.Validate whether the payment is a duplicate and proceed accordingly.R61A reversed payment has been sent to the incorrect institution.Correct the routing number and resubmit the payment.R62A debit entry was sent in error or needs to be reversed.No action needed.R63The dollar amount specified in the payment is wrong.Correct the amount and resubmit the payment.R64The individual ID number in the return payment doesn’t match the one in the original entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R65The transaction code is not correct for the type of payment.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R66The company ID in the payment doesn’t match the ID number in the batch header record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R67The return entry was already processed, resulting in a duplicate.No action needed.R68The return was not processed within the required time frame.No action needed.R69One or more fields contain incorrect information as entered by the originating bank.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R70A valid return entry was not processed as it should have been, or a return was not requested by the originating bank.Contact Support for more information.R71A dishonored return entry has not been sent to the correct institution.Contact Support for more information.R72A dishonored return was not processed within the required time frame.Contact Support for more information.R73The receiving bank is confirming that the original return was processed within the required time frame.No action needed.R74A previously improperly processed return has since been corrected.No action needed.R75This is a response to rejection code R67. The receiving bank is contesting an improper dishonor of a return entry by the originating bank.No action needed.R76This is a response to rejection code R69, in which the originating bank indicated field errors.No action needed.R77This is a response to rejection code R62, indicating that the receiving bank has either already returned the incorrect payment and the reversal, or it cannot recover the funds from the recipient as specified by R62.Contact Support for more information.R80Coding errors exist in the IAT entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R81The receiving bank doesn’t participate in the IAT program.Use an alternative bank account or payment method.R82The foreign receiving bank’s identification is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R83The foreign receiving bank cannot complete the payment.Contact Support for more information.R84The entry hasn’t been processed by the designated gateway.Contact Support for more information.R85An outbound international payment has been incorrectly coded.Contact Support for more information. FAILURE CODEFAILURE MESSAGENEXT STEPS FAILURE CODEFAILURE MESSAGENEXT STEPS FAILURE CODE FAILURE CODE FAILURE MESSAGE FAILURE MESSAGE NEXT STEPS NEXT STEPS R01The account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue, and resubmit the payment once funds are available.R02The account is closed.Obtain new account information and resubmit the payment.R03The account number or routing information doesn’t match any accounts at the receiving bank.Confirm the payment information and resubmit the payment.R04The account number provided is incorrect.Correct the account number and resubmit the payment.R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.Contact Support for more information.R06The originating bank returned the payment.Contact Support for more information.R07The customer revoked the authorization of the payment.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R08The account holder placed a stop payment order on this specific payment.Contact the account holder to resolve the issue.R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.Resubmit the payment once the funds are collected.R10The customer stated that the payment was not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R11A truncation (check-clearing) error occurred.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.R12The customer changed banks and the account has been transferred to another receiving bank.Confirm the payment information and resubmit the payment.R13The ACH routing number is incorrect.Correct the routing number and resubmit the payment.R14The representative payee is deceased or cannot perform duties.Obtain a new representative payee and update records.R15The beneficiary or account holder is deceased.Obtain new account information and resubmit the payment.R16The account is frozen due to legal action or bank policy.Obtain new account information and resubmit the payment.R17Entries contain invalid formatting or data.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R18Payment was initiated with an incorrect effective entry date.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R19Amount entered in the Amount field is invalid.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R20Policies or regulations prevent ACH payments on this account.Use an alternative bank account or payment method.R21Company ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R22Individual ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R23The receiving bank refused the credit entry.Contact Support for more information.R24The same payment was submitted more than once.Confirm whether it’s a true duplicate and proceed accordingly.R25The addenda record is incorrect or out of sequence.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R26A required field is missing information.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R27Trace numbers submitted are not consistent with the trace numbers in the addenda record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R28The check digit in the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R29The corporate account holder notified the receiving bank that the payment is not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.R30The receiving bank does not participate in the check truncation program.Use an alternative bank account or payment method.R31The receiving bank has asked the originating bank if it can return the corporate credit or debit card or Corporate Trade Exchange (CTX) payment format, and the originating bank has agreed.Contact Support for more information.R32The receiving bank is not able to settle the entry for various reasons.Advise the customer to contact their bank for more information.R33The receiving bank has returned the entry for a lost, destroyed, or damaged check (XCK entry).Advise the customer to contact their bank for more information.R34A federal or state regulator has limited the receiving bank’s ability to process ACH payments.Advise the customer to contact their bank for more information.R35A debit entry has been improperly submitted.Advise the customer to contact their bank for more information.R36A credit entry has been improperly submitted.Advise the customer to contact their bank for more information.R37A duplicate payment was attempted by presenting the source document related to an existing ACH payment for processing.Validate whether the payment is a duplicate and proceed accordingly.R38The receiving account holder requests to stop payment on a check that’s been converted into an electronic payment.Contact the account holder to resolve the issue.R39The source document related to the ACH payment is incorrect or inadequate.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R40A federal government agency has returned an automated enrollment entry (ENR entry).Contact Support for more information.R41Transaction code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R42The check digit at the end of the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R43Receiving bank account number is incorrect.Correct the account number and resubmit the payment.R44Individual identification number provided doesn’t match the ID number on record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R45Account holder’s name is incorrect or misspelled.Correct the account holder's name and resubmit the payment.R46Representative payee indicator code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R47The same ENR has been submitted more than once.Validate whether the payment is a duplicate and proceed accordingly.R50The receiving bank is either in a state that doesn’t allow digital payments or requires canceled checks to be returned.Contact Support for more information.R51Item related to RCK entry is ineligible or RCK entry is improper.Contact Support for more information.R52The account holder places a stop order on a bounced check that’s being reprocessed electronically.Contact the account holder to resolve the issue.R53Both the original payment and its corresponding RCK entry have been submitted, resulting in a duplicate payment.Validate whether the payment is a duplicate and proceed accordingly.R61A reversed payment has been sent to the incorrect institution.Correct the routing number and resubmit the payment.R62A debit entry was sent in error or needs to be reversed.No action needed.R63The dollar amount specified in the payment is wrong.Correct the amount and resubmit the payment.R64The individual ID number in the return payment doesn’t match the one in the original entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R65The transaction code is not correct for the type of payment.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R66The company ID in the payment doesn’t match the ID number in the batch header record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R67The return entry was already processed, resulting in a duplicate.No action needed.R68The return was not processed within the required time frame.No action needed.R69One or more fields contain incorrect information as entered by the originating bank.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R70A valid return entry was not processed as it should have been, or a return was not requested by the originating bank.Contact Support for more information.R71A dishonored return entry has not been sent to the correct institution.Contact Support for more information.R72A dishonored return was not processed within the required time frame.Contact Support for more information.R73The receiving bank is confirming that the original return was processed within the required time frame.No action needed.R74A previously improperly processed return has since been corrected.No action needed.R75This is a response to rejection code R67. The receiving bank is contesting an improper dishonor of a return entry by the originating bank.No action needed.R76This is a response to rejection code R69, in which the originating bank indicated field errors.No action needed.R77This is a response to rejection code R62, indicating that the receiving bank has either already returned the incorrect payment and the reversal, or it cannot recover the funds from the recipient as specified by R62.Contact Support for more information.R80Coding errors exist in the IAT entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R81The receiving bank doesn’t participate in the IAT program.Use an alternative bank account or payment method.R82The foreign receiving bank’s identification is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.R83The foreign receiving bank cannot complete the payment.Contact Support for more information.R84The entry hasn’t been processed by the designated gateway.Contact Support for more information.R85An outbound international payment has been incorrectly coded.Contact Support for more information. R01The account has insufficient funds to complete the purchase.Reach out to the account holder to address the issue, and resubmit the payment once funds are available. R01 R01 The account has insufficient funds to complete the purchase. Reach out to the account holder to address the issue, and resubmit the payment once funds are available. R02The account is closed.Obtain new account information and resubmit the payment. R02 R02 The account is closed. Obtain new account information and resubmit the payment. R03The account number or routing information doesn’t match any accounts at the receiving bank.Confirm the payment information and resubmit the payment. R03 R03 The account number or routing information doesn’t match any accounts at the receiving bank. Confirm the payment information and resubmit the payment. R04The account number provided is incorrect.Correct the account number and resubmit the payment. R04 R04 The account number provided is incorrect. Correct the account number and resubmit the payment. R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.Contact Support for more information. R05 R05 A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account. Contact Support for more information. R06The originating bank returned the payment.Contact Support for more information. R06 R06 The originating bank returned the payment. Contact Support for more information. R07The customer revoked the authorization of the payment.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period. R07 R07 The customer revoked the authorization of the payment. Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period. R08The account holder placed a stop payment order on this specific payment.Contact the account holder to resolve the issue. R08 R08 The account holder placed a stop payment order on this specific payment. Contact the account holder to resolve the issue. R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.Resubmit the payment once the funds are collected. R09 R09 The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment. Resubmit the payment once the funds are collected. R10The customer stated that the payment was not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period. R10 R10 The customer stated that the payment was not authorized. Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period. R11A truncation (check-clearing) error occurred.Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information. R11 R11 A truncation (check-clearing) error occurred. Confirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information. R12The customer changed banks and the account has been transferred to another receiving bank.Confirm the payment information and resubmit the payment. R12 R12 The customer changed banks and the account has been transferred to another receiving bank. Confirm the payment information and resubmit the payment. R13The ACH routing number is incorrect.Correct the routing number and resubmit the payment. R13 R13 The ACH routing number is incorrect. Correct the routing number and resubmit the payment. R14The representative payee is deceased or cannot perform duties.Obtain a new representative payee and update records. R14 R14 The representative payee is deceased or cannot perform duties. Obtain a new representative payee and update records. R15The beneficiary or account holder is deceased.Obtain new account information and resubmit the payment. R15 R15 The beneficiary or account holder is deceased. Obtain new account information and resubmit the payment. R16The account is frozen due to legal action or bank policy.Obtain new account information and resubmit the payment. R16 R16 The account is frozen due to legal action or bank policy. Obtain new account information and resubmit the payment. R17Entries contain invalid formatting or data.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R17 R17 Entries contain invalid formatting or data. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R18Payment was initiated with an incorrect effective entry date.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R18 R18 Payment was initiated with an incorrect effective entry date. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R19Amount entered in the Amount field is invalid.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R19 R19 Amount entered in the Amount field is invalid. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R20Policies or regulations prevent ACH payments on this account.Use an alternative bank account or payment method. R20 R20 Policies or regulations prevent ACH payments on this account. Use an alternative bank account or payment method. R21Company ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R21 R21 Company ID information is incorrect or outdated. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R22Individual ID information is incorrect or outdated.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R22 R22 Individual ID information is incorrect or outdated. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R23The receiving bank refused the credit entry.Contact Support for more information. R23 R23 The receiving bank refused the credit entry. Contact Support for more information. R24The same payment was submitted more than once.Confirm whether it’s a true duplicate and proceed accordingly. R24 R24 The same payment was submitted more than once. Confirm whether it’s a true duplicate and proceed accordingly. R25The addenda record is incorrect or out of sequence.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R25 R25 The addenda record is incorrect or out of sequence. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R26A required field is missing information.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R26 R26 A required field is missing information. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R27Trace numbers submitted are not consistent with the trace numbers in the addenda record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R27 R27 Trace numbers submitted are not consistent with the trace numbers in the addenda record. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R28The check digit in the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R28 R28 The check digit in the routing number is incorrect. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R29The corporate account holder notified the receiving bank that the payment is not authorized.Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period. R29 R29 The corporate account holder notified the receiving bank that the payment is not authorized. Confirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period. R30The receiving bank does not participate in the check truncation program.Use an alternative bank account or payment method. R30 R30 The receiving bank does not participate in the check truncation program. Use an alternative bank account or payment method. R31The receiving bank has asked the originating bank if it can return the corporate credit or debit card or Corporate Trade Exchange (CTX) payment format, and the originating bank has agreed.Contact Support for more information. R31 R31 The receiving bank has asked the originating bank if it can return the corporate credit or debit card or Corporate Trade Exchange (CTX) payment format, and the originating bank has agreed. Contact Support for more information. R32The receiving bank is not able to settle the entry for various reasons.Advise the customer to contact their bank for more information. R32 R32 The receiving bank is not able to settle the entry for various reasons. Advise the customer to contact their bank for more information. R33The receiving bank has returned the entry for a lost, destroyed, or damaged check (XCK entry).Advise the customer to contact their bank for more information. R33 R33 The receiving bank has returned the entry for a lost, destroyed, or damaged check (XCK entry). Advise the customer to contact their bank for more information. R34A federal or state regulator has limited the receiving bank’s ability to process ACH payments.Advise the customer to contact their bank for more information. R34 R34 A federal or state regulator has limited the receiving bank’s ability to process ACH payments. Advise the customer to contact their bank for more information. R35A debit entry has been improperly submitted.Advise the customer to contact their bank for more information. R35 R35 A debit entry has been improperly submitted. Advise the customer to contact their bank for more information. R36A credit entry has been improperly submitted.Advise the customer to contact their bank for more information. R36 R36 A credit entry has been improperly submitted. Advise the customer to contact their bank for more information. R37A duplicate payment was attempted by presenting the source document related to an existing ACH payment for processing.Validate whether the payment is a duplicate and proceed accordingly. R37 R37 A duplicate payment was attempted by presenting the source document related to an existing ACH payment for processing. Validate whether the payment is a duplicate and proceed accordingly. R38The receiving account holder requests to stop payment on a check that’s been converted into an electronic payment.Contact the account holder to resolve the issue. R38 R38 The receiving account holder requests to stop payment on a check that’s been converted into an electronic payment. Contact the account holder to resolve the issue. R39The source document related to the ACH payment is incorrect or inadequate.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R39 R39 The source document related to the ACH payment is incorrect or inadequate. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R40A federal government agency has returned an automated enrollment entry (ENR entry).Contact Support for more information. R40 R40 A federal government agency has returned an automated enrollment entry (ENR entry). Contact Support for more information. R41Transaction code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R41 R41 Transaction code is incorrect. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R42The check digit at the end of the routing number is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R42 R42 The check digit at the end of the routing number is incorrect. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R43Receiving bank account number is incorrect.Correct the account number and resubmit the payment. R43 R43 Receiving bank account number is incorrect. Correct the account number and resubmit the payment. R44Individual identification number provided doesn’t match the ID number on record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R44 R44 Individual identification number provided doesn’t match the ID number on record. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R45Account holder’s name is incorrect or misspelled.Correct the account holder's name and resubmit the payment. R45 R45 Account holder’s name is incorrect or misspelled. Correct the account holder's name and resubmit the payment. R46Representative payee indicator code is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R46 R46 Representative payee indicator code is incorrect. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R47The same ENR has been submitted more than once.Validate whether the payment is a duplicate and proceed accordingly. R47 R47 The same ENR has been submitted more than once. Validate whether the payment is a duplicate and proceed accordingly. R50The receiving bank is either in a state that doesn’t allow digital payments or requires canceled checks to be returned.Contact Support for more information. R50 R50 The receiving bank is either in a state that doesn’t allow digital payments or requires canceled checks to be returned. Contact Support for more information. R51Item related to RCK entry is ineligible or RCK entry is improper.Contact Support for more information. R51 R51 Item related to RCK entry is ineligible or RCK entry is improper. Contact Support for more information. R52The account holder places a stop order on a bounced check that’s being reprocessed electronically.Contact the account holder to resolve the issue. R52 R52 The account holder places a stop order on a bounced check that’s being reprocessed electronically. Contact the account holder to resolve the issue. R53Both the original payment and its corresponding RCK entry have been submitted, resulting in a duplicate payment.Validate whether the payment is a duplicate and proceed accordingly. R53 R53 Both the original payment and its corresponding RCK entry have been submitted, resulting in a duplicate payment. Validate whether the payment is a duplicate and proceed accordingly. R61A reversed payment has been sent to the incorrect institution.Correct the routing number and resubmit the payment. R61 R61 A reversed payment has been sent to the incorrect institution. Correct the routing number and resubmit the payment. R62A debit entry was sent in error or needs to be reversed.No action needed. R62 R62 A debit entry was sent in error or needs to be reversed. No action needed. R63The dollar amount specified in the payment is wrong.Correct the amount and resubmit the payment. R63 R63 The dollar amount specified in the payment is wrong. Correct the amount and resubmit the payment. R64The individual ID number in the return payment doesn’t match the one in the original entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R64 R64 The individual ID number in the return payment doesn’t match the one in the original entry. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R65The transaction code is not correct for the type of payment.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R65 R65 The transaction code is not correct for the type of payment. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R66The company ID in the payment doesn’t match the ID number in the batch header record.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R66 R66 The company ID in the payment doesn’t match the ID number in the batch header record. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R67The return entry was already processed, resulting in a duplicate.No action needed. R67 R67 The return entry was already processed, resulting in a duplicate. No action needed. R68The return was not processed within the required time frame.No action needed. R68 R68 The return was not processed within the required time frame. No action needed. R69One or more fields contain incorrect information as entered by the originating bank.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R69 R69 One or more fields contain incorrect information as entered by the originating bank. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R70A valid return entry was not processed as it should have been, or a return was not requested by the originating bank.Contact Support for more information. R70 R70 A valid return entry was not processed as it should have been, or a return was not requested by the originating bank. Contact Support for more information. R71A dishonored return entry has not been sent to the correct institution.Contact Support for more information. R71 R71 A dishonored return entry has not been sent to the correct institution. Contact Support for more information. R72A dishonored return was not processed within the required time frame.Contact Support for more information. R72 R72 A dishonored return was not processed within the required time frame. Contact Support for more information. R73The receiving bank is confirming that the original return was processed within the required time frame.No action needed. R73 R73 The receiving bank is confirming that the original return was processed within the required time frame. No action needed. R74A previously improperly processed return has since been corrected.No action needed. R74 R74 A previously improperly processed return has since been corrected. No action needed. R75This is a response to rejection code R67. The receiving bank is contesting an improper dishonor of a return entry by the originating bank.No action needed. R75 R75 This is a response to rejection code R67. The receiving bank is contesting an improper dishonor of a return entry by the originating bank. No action needed. R76This is a response to rejection code R69, in which the originating bank indicated field errors.No action needed. R76 R76 This is a response to rejection code R69, in which the originating bank indicated field errors. No action needed. R77This is a response to rejection code R62, indicating that the receiving bank has either already returned the incorrect payment and the reversal, or it cannot recover the funds from the recipient as specified by R62.Contact Support for more information. R77 R77 This is a response to rejection code R62, indicating that the receiving bank has either already returned the incorrect payment and the reversal, or it cannot recover the funds from the recipient as specified by R62. Contact Support for more information. R80Coding errors exist in the IAT entry.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R80 R80 Coding errors exist in the IAT entry. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R81The receiving bank doesn’t participate in the IAT program.Use an alternative bank account or payment method. R81 R81 The receiving bank doesn’t participate in the IAT program. Use an alternative bank account or payment method. R82The foreign receiving bank’s identification is incorrect.Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R82 R82 The foreign receiving bank’s identification is incorrect. Confirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information. R83The foreign receiving bank cannot complete the payment.Contact Support for more information. R83 R83 The foreign receiving bank cannot complete the payment. Contact Support for more information. R84The entry hasn’t been processed by the designated gateway.Contact Support for more information. R84 R84 The entry hasn’t been processed by the designated gateway. Contact Support for more information. R85An outbound international payment has been incorrectly coded.Contact Support for more information. R85 R85 An outbound international payment has been incorrectly coded. Contact Support for more information. Prevent ACH Returns [https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns#prevent-ach-returns](https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns#prevent-ach-returns) Verify account information: Ensure that all account details, including routing and account numbers, are accurate and current before initiating payments. Use verification tools: Implement tools, such as Plaid, to confirm the validity of account details. This helps avoid payments to closed or invalid accounts. Monitor funding: Regularly check account balances to confirm sufficient funds are available prior to initiating ACH payments. Strengthen authorization protocols: Secure explicit customer approvals for recurring payments and periodically update these authorizations as needed. Verify account information: Ensure that all account details, including routing and account numbers, are accurate and current before initiating payments. Verify account information: Use verification tools: Implement tools, such as Plaid, to confirm the validity of account details. This helps avoid payments to closed or invalid accounts. Use verification tools: Monitor funding: Regularly check account balances to confirm sufficient funds are available prior to initiating ACH payments. Monitor funding: Strengthen authorization protocols: Secure explicit customer approvals for recurring payments and periodically update these authorizations as needed. Strengthen authorization protocols: Last updated on October 17, 2024 October 17, 2024 TimingStatement Descriptors [Timing](https://docs.tilled.com/docs/payments/bank-to-bank/timing) [Statement Descriptors](https://docs.tilled.com/docs/payments/statement-descriptors)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/statement-descriptors",
    "title": "Tilled",
    "content": "Statement Descriptors Statement descriptors clarify payments on customer statements. By using clear, accurate descriptors, businesses can help customers recognize transactions, reducing the likelihood of disputes. Descriptors for card payments will always contain a “Pay*” prefix whereas descriptors for bank-to-bank payments will not. For example, a statement descriptor of “PBJ Pay” will show up as: USD card: Pay*PBJ Pay CAD card: NBX*PBJ Pay Bank-to-bank: PBJ Pay Statement Descriptor Requirements A complete statement descriptor must meet the following requirements: Reflects the merchant’s Doing Business As (DBA) name Contains only Latin characters Contains between 1 and 20 characters: Descriptors for card payments have a 20-character limit, including the required Pay* prefix Descriptors for bank-to-bank payments have a 12-character limit Doesn’t contain any of the following special characters: <, >, \\, ', \", * Contains more than a single common term or common website URL; a website URL is acceptable only if it provides a clear and accurate description of a transaction on a customer’s statement Manage Statement Descriptors Configure statement descriptor The merchant will be prompted to configure their default statement descriptor when completing their merchant application. A dynamic descriptor can also be configured by setting a statement_descriptor_suffix in the Payment IntentsAPI. When provided, this dynamic descriptor overrides the merchant’s default descriptor. View statement descriptor To view a merchant’s statement descriptor in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the General widget for the desired payment method If a dynamic statement descriptor is being used, the descriptor can be viewed within the Payment Details page. Update statement descriptor To update a merchant’s statement descriptor, email support@tilled.com with the new descriptor.Last updated on March 3, 2025ACH ReturnsTerminal Readers Statement Descriptors Statement descriptors clarify payments on customer statements. By using clear, accurate descriptors, businesses can help customers recognize transactions, reducing the likelihood of disputes. Descriptors for card payments will always contain a “Pay*” prefix whereas descriptors for bank-to-bank payments will not. For example, a statement descriptor of “PBJ Pay” will show up as: USD card: Pay*PBJ Pay CAD card: NBX*PBJ Pay Bank-to-bank: PBJ Pay Descriptors for card payments will always contain a “Pay*” prefix whereas descriptors for bank-to-bank payments will not. For example, a statement descriptor of “PBJ Pay” will show up as: USD card: Pay*PBJ Pay CAD card: NBX*PBJ Pay Bank-to-bank: PBJ Pay USD card: Pay*PBJ Pay USD card: CAD card: NBX*PBJ Pay CAD card: Bank-to-bank: PBJ Pay Bank-to-bank: Statement Descriptor Requirements [https://docs.tilled.com/docs/payments/statement-descriptors#statement-descriptor-requirements](https://docs.tilled.com/docs/payments/statement-descriptors#statement-descriptor-requirements) A complete statement descriptor must meet the following requirements: Reflects the merchant’s Doing Business As (DBA) name Contains only Latin characters Contains between 1 and 20 characters: Descriptors for card payments have a 20-character limit, including the required Pay* prefix Descriptors for bank-to-bank payments have a 12-character limit Doesn’t contain any of the following special characters: <, >, \\, ', \", * Contains more than a single common term or common website URL; a website URL is acceptable only if it provides a clear and accurate description of a transaction on a customer’s statement Reflects the merchant’s Doing Business As (DBA) name Contains only Latin characters Contains between 1 and 20 characters: Descriptors for card payments have a 20-character limit, including the required Pay* prefix Descriptors for bank-to-bank payments have a 12-character limit Descriptors for card payments have a 20-character limit, including the required Pay* prefix Descriptors for bank-to-bank payments have a 12-character limit Descriptors for card payments have a 20-character limit, including the required Pay* prefix Descriptors for bank-to-bank payments have a 12-character limit Doesn’t contain any of the following special characters: <, >, \\, ', \", * < > \\ ' \" * Contains more than a single common term or common website URL; a website URL is acceptable only if it provides a clear and accurate description of a transaction on a customer’s statement Manage Statement Descriptors [https://docs.tilled.com/docs/payments/statement-descriptors#manage-statement-descriptors](https://docs.tilled.com/docs/payments/statement-descriptors#manage-statement-descriptors) Configure statement descriptor [https://docs.tilled.com/docs/payments/statement-descriptors#configure-statement-descriptor](https://docs.tilled.com/docs/payments/statement-descriptors#configure-statement-descriptor) The merchant will be prompted to configure their default statement descriptor when completing their merchant application. A dynamic descriptor can also be configured by setting a statement_descriptor_suffix in the Payment IntentsAPI. When provided, this dynamic descriptor overrides the merchant’s default descriptor. statement_descriptor_suffix [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API View statement descriptor [https://docs.tilled.com/docs/payments/statement-descriptors#view-statement-descriptor](https://docs.tilled.com/docs/payments/statement-descriptors#view-statement-descriptor) To view a merchant’s statement descriptor in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the General widget for the desired payment method Navigate to Merchants Merchants Select the respective merchant Select the Processing Details tab Processing Details Locate the General widget for the desired payment method General If a dynamic statement descriptor is being used, the descriptor can be viewed within the Payment Details page. Update statement descriptor [https://docs.tilled.com/docs/payments/statement-descriptors#update-statement-descriptor](https://docs.tilled.com/docs/payments/statement-descriptors#update-statement-descriptor) To update a merchant’s statement descriptor, email support@tilled.com with the new descriptor. [support@tilled.com](mailto:support@tilled.com) Last updated on March 3, 2025 March 3, 2025 ACH ReturnsTerminal Readers [ACH Returns](https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns) [Terminal Readers](https://docs.tilled.com/docs/terminal-readers)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/terminal-readers",
    "title": "Tilled",
    "content": "Terminal Readers Learn how to manage PAX and Valor terminal readers, including: Setting up and activating a terminal reader Maintaining connectivity and managing Wi-Fi or hotspot configurations Performing manual tasks such as batching and resetting the terminal reader Troubleshooting common hardware-related issues ℹ️The Paysafe PAX solution is currently in beta. Additional resources On-Device TippingReceiptsManual Capture Paysafe PAX Terminal ReadersConfigure printed receipts on PAX terminal readerPrinted receipts can be configured directly from the Payments app on the PAX terminal reader.Disable or enable Customer/Merchant printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsOpen the Handpoint Payments AppSelect the Settings iconSelect “Printing Options”Toggle “Automatic Printing” on or offUpdate the font size on printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsGo to the Device Settings (password: pax9876@@ or 9876)Select “Display”Select “Font Size”Select the desired sizeUpdating the font size will impact the font size on the device and on printed receipts.Change the printer roll in the PAX A920 or A920 ProThe PAX A920 includes a built-in printer for printing receipts with a thermal paper roll. To change the printer roll:On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing awayRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paperNow your card reader is ready to produce receipts after a transactionChange the printer roll in the PAX A80The PAX A80 includes an in-built printer for printing receipts with a thermal paper roll. To change the printer roll:On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casingRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paperConnect PAX terminal reader to WiFi or iPhone hotspotTo connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspotTurn on the terminal reader by pressing and holding the power button for 3-5 secondsUse the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon namesSelect the toggle switch to enable Wi-FiChoose the desired Wi-Fi network or iPhone hotspotEnter the Wi-Fi password (case sensitive)Tips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to OnConnect PAX A920 or A920 Pro terminal reader to a cellular networkTo install and configure a mini-SIM in your PAX A920 or A920 Pro terminal reader:1. Insert the mini-SIMLocate the battery cover slide latch on the back of the card readerPush the latch to the right and open the battery coverRemove the battery case by lifting it from the bottomTake out the battery by lifting it from the bottomInsert the SIM card into the SIM1 card slot on the left-hand side of the terminal2. Enable cellular connectivityTurn on the terminal reader and access the settings (password: pax9876@@ or 9876)Select More and then tap Cellular NetworksCheck the box near Data roaming3. Configure preferred network settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksTap Preferred Network Type and select 4G PreferredEnsure 3G/4G is not selected as the primary network in the terminal settings4. Verify SIM APN settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksSelect Access Point NamesConfirm that the SIM APN settings are correctly configuredRecommendations for using mini-SIMsEnsure the SIM card has an active data plan to facilitate transaction processing.If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available.PAX terminal reader and Handpoint Payment App passwordsYour PAX devices uses two types of passwords for different purposes:PAX terminal reader passwordThe terminal reader password is required to configure key terminal reader settings, such as Wi-Fi. This is a default password set by the manufacturer and cannot be changed by the merchant.The default terminal reader password is either pax9876@@ or 9876.Handpoint Payment App passwordWhen activating the Handpoint Payment App for the first time, merchants are prompted to create a 4-digit passcode for the app.To change your Handpoint Payment App password:Tap the Settings cogwheel in the Payments AppSelect “Security Options”Update your passwordIf you forget your password, contact support@tilled.com for assistance.Troubleshooting your PAX terminal readersERROR MESSAGEDESCRIPTIONNEXT STEPSReader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance.Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance.Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com.Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance.White-list URLs for PAX terminal readersIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.gw1.handpoint.com: port 443gw2.handpoint.com: port 443gw3.handpoint.com: port 443gw4.handpoint.com: port 443tm.handpoint.com: port 443cloud.handpoint.com: port 443hipos.handpoint.com: port 443express.handpoint.com: port 443merchant.handpoint.com: port 443txnfeed.handpoint.com: port 443network.handpoint.com: port 4433.14.9.119: port 88 (PAX OS OTA services)supl.google.com/: port 7275 (GPS assistant location for high precision positioning)*.izatcloud.net/: port 80 (GPS chipset firmware)*.paxstore.us: ports 80, 443 (PAXStore US services)*.amazonaws.com: port 443 (PAXStore cloud file service)*.paxsaas.com: port 8089 (Airviewer server and cloud messaging)rki.pax.us: port 33519 (Remote Key Injection)*.qq.com: port 443 (GPS geo-location services) TSYS Valor Terminal ReadersActivate Valor terminal readerOccasionally, you may need to activate the developer terminal reader. Tilled's Integrations team will send you an Activation Code. If you have not received an activation code for your terminal reader, please contact us at integrations@tilled.com.Steps to activate a terminal readerBefore activating the terminal reader, ensure it is connected to WiFi. Once connected, follow these steps:Select the Star menu (located at the bottom-left corner of the homescreen)Use the down arrow to navigate to the next screen of menu itemsSelect 6. Download PackageWhen prompted, the screen will display “Enter EPI ID” Enter the Activation Code as follows:Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to completeOnce activation is complete, the terminal reader will display “Waiting... Valor Connect”Automatically batch payments on Valor terminal readerValor terminal readers are set to automatically close the daily batch at 7:30 PM EST. For this process to occur, the terminal reader must be turned on and connected to the internet at that time. Failing to meet this condition will prevent the batch from closing automatically, potentially missing the cutoff for next-day funding and causing delays in receiving funds.Recommendations:Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST.If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in this article for step-by-step guidance on performing a manual batch.Charge Valor terminal readerThe charging port is located on the left side of the terminal reader. When charging properly, the orange light next to the charging port will stay on. If the orange light does not stay on, the terminal reader is not charging properly and you should try using a different charger.Charging recommendationsUse the charging cable that the terminal reader came withCharge the terminal reader whenever possible, as the battery drains quicklyCheck that the orange light stays on while chargingConnect Valor terminal reader to WiFi or iPhone hotspotTo connect to WiFi or iPhone hotspotDisconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. Comm ConfigSelect 1. WifiChoose the desired Wi-Fi network or iPhone hotspotSelect ConfigureEnter the Wi-Fi password (case sensitive)Tap OK to confirm the password or Cancel to return to the previous screenSelect ConnectTips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to OnManage Valor Connect modeValor Connect enables merchants to initiate transactions from their point-of-sale and collect payments using a terminal reader. Always ensure the terminal reader is in Valor Connect mode when processing payments to streamline reconciliation. Payments made outside this mode will still be settled and paid to the merchant; however, they will not be reported on in the API or Dashboard, making reconciliation more challenging.To accept card-present transactions, the terminal reader must be in Valor Connect mode. When the terminal reader is in this mode, the screen displays the message \"Waiting… Valor Connect\". This indicates that the terminal reader is ready to receive transactions from the point-of-sale.Disconnect terminal reader from Valor ConnectTo update the WiFi settings on the terminal reader, the terminal reader must first be disconnected from Valor Connect mode. To disconnect:From the \"Waiting… Valor Connect\" screen, press the red X on the keyboardSelect Yes to disconnect from Valor ConnectReconnect terminal reader to Valor ConnectTo resume accepting card-present transactions, the terminal reader needs to be reconnected to Valor Connect. To reconnect:From the main screen, tap the Star menuSelect 10. Start VC from the menuTap Yes to confirmAllow a few seconds for the connection process to completeOnce successfully connected, the terminal reader screen will display \"Waiting… Valor Connect\".Manually batch payments on Valor terminal readerTo manually batch a terminal reader:Disconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. SettlementEnter the password (last 4 digits of your activation code)Select Yes on the confirmation promptThe terminal reader will now attempt to:Settle the current batchPrint a Batch SummaryPrint a Batch Closed confirmation Once the payments have been batched, reconnect to Valor Connect to continue collecting payments.Turn Valor terminal reader on/offTo power the device on or off, press and hold the power button located at the bottom left of the keyboard.Reset a Valor terminal reader Tap the the Main menu (three horizontal lines, located at the bottom of the homescreen)Select 2. Host UtilityEnter the password (last 4 digits of your activation code)Select 1. Reset TerminalEnter the Valor master password: 82567729Select No to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose Yes insteadWhite-list URLs for Valor terminal readersIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.txnlive.valorpaytech.com: port 678952.3.127.18654.196.180.13652.205.40.220Last updated on February 3, 2025Statement DescriptorsBilling Terminal Readers Learn how to manage PAX and Valor terminal readers, including: Setting up and activating a terminal reader Maintaining connectivity and managing Wi-Fi or hotspot configurations Performing manual tasks such as batching and resetting the terminal reader Troubleshooting common hardware-related issues Setting up and activating a terminal reader Maintaining connectivity and managing Wi-Fi or hotspot configurations Performing manual tasks such as batching and resetting the terminal reader Troubleshooting common hardware-related issues ℹ️The Paysafe PAX solution is currently in beta. ℹ️ The Paysafe PAX solution is currently in beta. The Paysafe PAX solution is currently in beta. The Paysafe PAX solution is currently in beta. Additional resources Additional resources On-Device TippingReceiptsManual Capture [On-Device Tipping](https://docs.tilled.com/docs/payments/card/on-device-tipping) On-Device Tipping [Receipts](https://docs.tilled.com/docs/payments/card/receipts) Receipts [Manual Capture](https://docs.tilled.com/docs/payments/card/manual-capture) Manual Capture Paysafe PAX Terminal ReadersConfigure printed receipts on PAX terminal readerPrinted receipts can be configured directly from the Payments app on the PAX terminal reader.Disable or enable Customer/Merchant printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsOpen the Handpoint Payments AppSelect the Settings iconSelect “Printing Options”Toggle “Automatic Printing” on or offUpdate the font size on printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsGo to the Device Settings (password: pax9876@@ or 9876)Select “Display”Select “Font Size”Select the desired sizeUpdating the font size will impact the font size on the device and on printed receipts.Change the printer roll in the PAX A920 or A920 ProThe PAX A920 includes a built-in printer for printing receipts with a thermal paper roll. To change the printer roll:On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing awayRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paperNow your card reader is ready to produce receipts after a transactionChange the printer roll in the PAX A80The PAX A80 includes an in-built printer for printing receipts with a thermal paper roll. To change the printer roll:On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casingRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paperConnect PAX terminal reader to WiFi or iPhone hotspotTo connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspotTurn on the terminal reader by pressing and holding the power button for 3-5 secondsUse the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon namesSelect the toggle switch to enable Wi-FiChoose the desired Wi-Fi network or iPhone hotspotEnter the Wi-Fi password (case sensitive)Tips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to OnConnect PAX A920 or A920 Pro terminal reader to a cellular networkTo install and configure a mini-SIM in your PAX A920 or A920 Pro terminal reader:1. Insert the mini-SIMLocate the battery cover slide latch on the back of the card readerPush the latch to the right and open the battery coverRemove the battery case by lifting it from the bottomTake out the battery by lifting it from the bottomInsert the SIM card into the SIM1 card slot on the left-hand side of the terminal2. Enable cellular connectivityTurn on the terminal reader and access the settings (password: pax9876@@ or 9876)Select More and then tap Cellular NetworksCheck the box near Data roaming3. Configure preferred network settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksTap Preferred Network Type and select 4G PreferredEnsure 3G/4G is not selected as the primary network in the terminal settings4. Verify SIM APN settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksSelect Access Point NamesConfirm that the SIM APN settings are correctly configuredRecommendations for using mini-SIMsEnsure the SIM card has an active data plan to facilitate transaction processing.If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available.PAX terminal reader and Handpoint Payment App passwordsYour PAX devices uses two types of passwords for different purposes:PAX terminal reader passwordThe terminal reader password is required to configure key terminal reader settings, such as Wi-Fi. This is a default password set by the manufacturer and cannot be changed by the merchant.The default terminal reader password is either pax9876@@ or 9876.Handpoint Payment App passwordWhen activating the Handpoint Payment App for the first time, merchants are prompted to create a 4-digit passcode for the app.To change your Handpoint Payment App password:Tap the Settings cogwheel in the Payments AppSelect “Security Options”Update your passwordIf you forget your password, contact support@tilled.com for assistance.Troubleshooting your PAX terminal readersERROR MESSAGEDESCRIPTIONNEXT STEPSReader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance.Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance.Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com.Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance.White-list URLs for PAX terminal readersIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.gw1.handpoint.com: port 443gw2.handpoint.com: port 443gw3.handpoint.com: port 443gw4.handpoint.com: port 443tm.handpoint.com: port 443cloud.handpoint.com: port 443hipos.handpoint.com: port 443express.handpoint.com: port 443merchant.handpoint.com: port 443txnfeed.handpoint.com: port 443network.handpoint.com: port 4433.14.9.119: port 88 (PAX OS OTA services)supl.google.com/: port 7275 (GPS assistant location for high precision positioning)*.izatcloud.net/: port 80 (GPS chipset firmware)*.paxstore.us: ports 80, 443 (PAXStore US services)*.amazonaws.com: port 443 (PAXStore cloud file service)*.paxsaas.com: port 8089 (Airviewer server and cloud messaging)rki.pax.us: port 33519 (Remote Key Injection)*.qq.com: port 443 (GPS geo-location services) Paysafe PAX Terminal Readers Configure printed receipts on PAX terminal readerPrinted receipts can be configured directly from the Payments app on the PAX terminal reader.Disable or enable Customer/Merchant printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsOpen the Handpoint Payments AppSelect the Settings iconSelect “Printing Options”Toggle “Automatic Printing” on or offUpdate the font size on printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsGo to the Device Settings (password: pax9876@@ or 9876)Select “Display”Select “Font Size”Select the desired sizeUpdating the font size will impact the font size on the device and on printed receipts.Change the printer roll in the PAX A920 or A920 ProThe PAX A920 includes a built-in printer for printing receipts with a thermal paper roll. To change the printer roll:On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing awayRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paperNow your card reader is ready to produce receipts after a transactionChange the printer roll in the PAX A80The PAX A80 includes an in-built printer for printing receipts with a thermal paper roll. To change the printer roll:On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casingRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paper Configure printed receipts on PAX terminal reader Configure printed receipts on PAX terminal reader [https://docs.tilled.com/docs/terminal-readers#faq-configure-printed-receipts-on-pax-terminal-reader](https://docs.tilled.com/docs/terminal-readers#faq-configure-printed-receipts-on-pax-terminal-reader) Printed receipts can be configured directly from the Payments app on the PAX terminal reader.Disable or enable Customer/Merchant printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsOpen the Handpoint Payments AppSelect the Settings iconSelect “Printing Options”Toggle “Automatic Printing” on or offUpdate the font size on printed receiptsTurn on the terminal reader by pressing and holding the power button for 3-5 secondsGo to the Device Settings (password: pax9876@@ or 9876)Select “Display”Select “Font Size”Select the desired sizeUpdating the font size will impact the font size on the device and on printed receipts.Change the printer roll in the PAX A920 or A920 ProThe PAX A920 includes a built-in printer for printing receipts with a thermal paper roll. To change the printer roll:On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing awayRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paperNow your card reader is ready to produce receipts after a transactionChange the printer roll in the PAX A80The PAX A80 includes an in-built printer for printing receipts with a thermal paper roll. To change the printer roll:On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casingRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paper Printed receipts can be configured directly from the Payments app on the PAX terminal reader. Disable or enable Customer/Merchant printed receipts Disable or enable Customer/Merchant printed receipts Turn on the terminal reader by pressing and holding the power button for 3-5 secondsOpen the Handpoint Payments AppSelect the Settings iconSelect “Printing Options”Toggle “Automatic Printing” on or off Turn on the terminal reader by pressing and holding the power button for 3-5 seconds Open the Handpoint Payments App Select the Settings icon Select “Printing Options” “Printing Options” Toggle “Automatic Printing” on or off “Automatic Printing” Update the font size on printed receipts Update the font size on printed receipts Turn on the terminal reader by pressing and holding the power button for 3-5 secondsGo to the Device Settings (password: pax9876@@ or 9876)Select “Display”Select “Font Size”Select the desired size Turn on the terminal reader by pressing and holding the power button for 3-5 seconds Go to the Device Settings (password: pax9876@@ or 9876) pax9876@@ 9876 Select “Display” “Display” Select “Font Size” “Font Size” Select the desired size Updating the font size will impact the font size on the device and on printed receipts. Change the printer roll in the PAX A920 or A920 Pro Change the printer roll in the PAX A920 or A920 Pro The PAX A920 includes a built-in printer for printing receipts with a thermal paper roll. To change the printer roll: On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing awayRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paper On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing away Remove the paper roll Insert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the top Pull out approximately 2 inches of the paper and close the lid securely until it snaps into place Tear off any excess paper Now your card reader is ready to produce receipts after a transaction Change the printer roll in the PAX A80 Change the printer roll in the PAX A80 The PAX A80 includes an in-built printer for printing receipts with a thermal paper roll. To change the printer roll: On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casingRemove the paper rollInsert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the topPull out approximately 2 inches of the paper and close the lid securely until it snaps into placeTear off any excess paper On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casing Remove the paper roll Insert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the top Pull out approximately 2 inches of the paper and close the lid securely until it snaps into place Tear off any excess paper Connect PAX terminal reader to WiFi or iPhone hotspotTo connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspotTurn on the terminal reader by pressing and holding the power button for 3-5 secondsUse the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon namesSelect the toggle switch to enable Wi-FiChoose the desired Wi-Fi network or iPhone hotspotEnter the Wi-Fi password (case sensitive)Tips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to On Connect PAX terminal reader to WiFi or iPhone hotspot Connect PAX terminal reader to WiFi or iPhone hotspot [https://docs.tilled.com/docs/terminal-readers#faq-connect-pax-terminal-reader-to-wifi-or-iphone-hotspot](https://docs.tilled.com/docs/terminal-readers#faq-connect-pax-terminal-reader-to-wifi-or-iphone-hotspot) To connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspotTurn on the terminal reader by pressing and holding the power button for 3-5 secondsUse the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon namesSelect the toggle switch to enable Wi-FiChoose the desired Wi-Fi network or iPhone hotspotEnter the Wi-Fi password (case sensitive)Tips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to On To connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspot To connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspot Turn on the terminal reader by pressing and holding the power button for 3-5 secondsUse the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon namesSelect the toggle switch to enable Wi-FiChoose the desired Wi-Fi network or iPhone hotspotEnter the Wi-Fi password (case sensitive) Turn on the terminal reader by pressing and holding the power button for 3-5 seconds Use the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon names Select the toggle switch to enable Wi-Fi Choose the desired Wi-Fi network or iPhone hotspot Enter the Wi-Fi password (case sensitive) Tips for connecting to iPhone hotspot Tips for connecting to iPhone hotspot Terminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings. Maximize Compatibility To enable Maximize Compatibility on the iPhone hotspot: Maximize Compatibility Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to On Access the iPhone's Settings Settings Tap on Personal Hotspot Personal Hotspot Ensure that the Maximize Compatibility option is switched to On Maximize Compatibility On Connect PAX A920 or A920 Pro terminal reader to a cellular networkTo install and configure a mini-SIM in your PAX A920 or A920 Pro terminal reader:1. Insert the mini-SIMLocate the battery cover slide latch on the back of the card readerPush the latch to the right and open the battery coverRemove the battery case by lifting it from the bottomTake out the battery by lifting it from the bottomInsert the SIM card into the SIM1 card slot on the left-hand side of the terminal2. Enable cellular connectivityTurn on the terminal reader and access the settings (password: pax9876@@ or 9876)Select More and then tap Cellular NetworksCheck the box near Data roaming3. Configure preferred network settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksTap Preferred Network Type and select 4G PreferredEnsure 3G/4G is not selected as the primary network in the terminal settings4. Verify SIM APN settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksSelect Access Point NamesConfirm that the SIM APN settings are correctly configuredRecommendations for using mini-SIMsEnsure the SIM card has an active data plan to facilitate transaction processing.If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available. Connect PAX A920 or A920 Pro terminal reader to a cellular network Connect PAX A920 or A920 Pro terminal reader to a cellular network [https://docs.tilled.com/docs/terminal-readers#faq-connect-pax-a920-or-a920-pro-terminal-reader-to-a-cellular-network](https://docs.tilled.com/docs/terminal-readers#faq-connect-pax-a920-or-a920-pro-terminal-reader-to-a-cellular-network) To install and configure a mini-SIM in your PAX A920 or A920 Pro terminal reader:1. Insert the mini-SIMLocate the battery cover slide latch on the back of the card readerPush the latch to the right and open the battery coverRemove the battery case by lifting it from the bottomTake out the battery by lifting it from the bottomInsert the SIM card into the SIM1 card slot on the left-hand side of the terminal2. Enable cellular connectivityTurn on the terminal reader and access the settings (password: pax9876@@ or 9876)Select More and then tap Cellular NetworksCheck the box near Data roaming3. Configure preferred network settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksTap Preferred Network Type and select 4G PreferredEnsure 3G/4G is not selected as the primary network in the terminal settings4. Verify SIM APN settingsAccess the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksSelect Access Point NamesConfirm that the SIM APN settings are correctly configuredRecommendations for using mini-SIMsEnsure the SIM card has an active data plan to facilitate transaction processing.If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available. To install and configure a mini-SIM in your PAX A920 or A920 Pro terminal reader: 1. Insert the mini-SIM 1. Insert the mini-SIM Locate the battery cover slide latch on the back of the card readerPush the latch to the right and open the battery coverRemove the battery case by lifting it from the bottomTake out the battery by lifting it from the bottomInsert the SIM card into the SIM1 card slot on the left-hand side of the terminal Locate the battery cover slide latch on the back of the card reader Push the latch to the right and open the battery cover Remove the battery case by lifting it from the bottom Take out the battery by lifting it from the bottom Insert the SIM card into the SIM1 card slot on the left-hand side of the terminal SIM1 card slot 2. Enable cellular connectivity 2. Enable cellular connectivity Turn on the terminal reader and access the settings (password: pax9876@@ or 9876)Select More and then tap Cellular NetworksCheck the box near Data roaming Turn on the terminal reader and access the settings (password: pax9876@@ or 9876) pax9876@@ 9876 Select More and then tap Cellular Networks More Cellular Networks Check the box near Data roaming Data roaming 3. Configure preferred network settings 3. Configure preferred network settings Access the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksTap Preferred Network Type and select 4G PreferredEnsure 3G/4G is not selected as the primary network in the terminal settings Access the terminal reader settings (password: pax9876@@ or 9876) pax9876@@ 9876 Navigate to Wireless->Networks->Mobile Networks Wireless Networks Mobile Networks Tap Preferred Network Type and select 4G Preferred Preferred Network Type 4G Preferred Ensure 3G/4G is not selected as the primary network in the terminal settings 3G/4G 4. Verify SIM APN settings 4. Verify SIM APN settings Access the terminal reader settings (password: pax9876@@ or 9876)Navigate to Wireless->Networks->Mobile NetworksSelect Access Point NamesConfirm that the SIM APN settings are correctly configured Access the terminal reader settings (password: pax9876@@ or 9876) pax9876@@ 9876 Navigate to Wireless->Networks->Mobile Networks Wireless Networks Mobile Networks Select Access Point Names Access Point Names Confirm that the SIM APN settings are correctly configured Recommendations for using mini-SIMs Recommendations for using mini-SIMs Ensure the SIM card has an active data plan to facilitate transaction processing.If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available. Ensure the SIM card has an active data plan to facilitate transaction processing. If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available. PAX terminal reader and Handpoint Payment App passwordsYour PAX devices uses two types of passwords for different purposes:PAX terminal reader passwordThe terminal reader password is required to configure key terminal reader settings, such as Wi-Fi. This is a default password set by the manufacturer and cannot be changed by the merchant.The default terminal reader password is either pax9876@@ or 9876.Handpoint Payment App passwordWhen activating the Handpoint Payment App for the first time, merchants are prompted to create a 4-digit passcode for the app.To change your Handpoint Payment App password:Tap the Settings cogwheel in the Payments AppSelect “Security Options”Update your passwordIf you forget your password, contact support@tilled.com for assistance. PAX terminal reader and Handpoint Payment App passwords PAX terminal reader and Handpoint Payment App passwords [https://docs.tilled.com/docs/terminal-readers#faq-pax-terminal-reader-and-handpoint-payment-app-passwords](https://docs.tilled.com/docs/terminal-readers#faq-pax-terminal-reader-and-handpoint-payment-app-passwords) Your PAX devices uses two types of passwords for different purposes:PAX terminal reader passwordThe terminal reader password is required to configure key terminal reader settings, such as Wi-Fi. This is a default password set by the manufacturer and cannot be changed by the merchant.The default terminal reader password is either pax9876@@ or 9876.Handpoint Payment App passwordWhen activating the Handpoint Payment App for the first time, merchants are prompted to create a 4-digit passcode for the app.To change your Handpoint Payment App password:Tap the Settings cogwheel in the Payments AppSelect “Security Options”Update your passwordIf you forget your password, contact support@tilled.com for assistance. Your PAX devices uses two types of passwords for different purposes: PAX terminal reader password PAX terminal reader password The terminal reader password is required to configure key terminal reader settings, such as Wi-Fi. This is a default password set by the manufacturer and cannot be changed by the merchant. The default terminal reader password is either pax9876@@ or 9876. pax9876@@ 9876 Handpoint Payment App password Handpoint Payment App password When activating the Handpoint Payment App for the first time, merchants are prompted to create a 4-digit passcode for the app. To change your Handpoint Payment App password: Tap the Settings cogwheel in the Payments AppSelect “Security Options”Update your password Tap the Settings cogwheel in the Payments App Settings Select “Security Options” “Security Options” Update your password If you forget your password, contact support@tilled.com for assistance. [support@tilled.com](mailto:support@tilled.com) Troubleshooting your PAX terminal readersERROR MESSAGEDESCRIPTIONNEXT STEPSReader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance.Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance.Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com.Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance. Troubleshooting your PAX terminal readers Troubleshooting your PAX terminal readers [https://docs.tilled.com/docs/terminal-readers#faq-troubleshooting-your-pax-terminal-readers](https://docs.tilled.com/docs/terminal-readers#faq-troubleshooting-your-pax-terminal-readers) ERROR MESSAGEDESCRIPTIONNEXT STEPSReader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance.Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance.Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com.Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance. ERROR MESSAGEDESCRIPTIONNEXT STEPSReader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance.Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance.Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com.Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance. ERROR MESSAGEDESCRIPTIONNEXT STEPS ERROR MESSAGEDESCRIPTIONNEXT STEPS ERROR MESSAGE ERROR MESSAGE DESCRIPTION DESCRIPTION NEXT STEPS NEXT STEPS Reader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance.Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance.Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com.Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance. Reader Not AssignedThe terminal has not been assigned to your account.Contact support@tilled.com for assistance. Reader Not Assigned The terminal has not been assigned to your account. Contact support@tilled.com for assistance. [support@tilled.com](mailto:support@tilled.com) Server Not AvailableYour internet connection is unstable or unavailable.Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance. Server Not Available Your internet connection is unstable or unavailable. Restart your router. If the issue persists and only impacts your terminal reader, contact support@tilled.com for assistance. [support@tilled.com](mailto:support@tilled.com) Failed Card Reader AuthenticationThe terminal cannot authenticate the card reader.Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com. Failed Card Reader Authentication The terminal cannot authenticate the card reader. Restart your POS application. If the issue persists:Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATAIf the issue continues, contact support@tilled.com. Go to terminal reader settings (password: pax9876@@ or 9876)Navigate to Apps → Handpoint → StorageSelect CLEAR DATA Go to terminal reader settings (password: pax9876@@ or 9876) pax9876@@ 9876 Navigate to Apps → Handpoint → Storage Apps Handpoint Storage Select CLEAR DATA CLEAR DATA [support@tilled.com](mailto:support@tilled.com) Cloud Connection UnavailableThe terminal cannot connect to the cloud.Contact support@tilled.com for assistance. Cloud Connection Unavailable The terminal cannot connect to the cloud. Contact support@tilled.com for assistance. [support@tilled.com](mailto:support@tilled.com) White-list URLs for PAX terminal readersIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.gw1.handpoint.com: port 443gw2.handpoint.com: port 443gw3.handpoint.com: port 443gw4.handpoint.com: port 443tm.handpoint.com: port 443cloud.handpoint.com: port 443hipos.handpoint.com: port 443express.handpoint.com: port 443merchant.handpoint.com: port 443txnfeed.handpoint.com: port 443network.handpoint.com: port 4433.14.9.119: port 88 (PAX OS OTA services)supl.google.com/: port 7275 (GPS assistant location for high precision positioning)*.izatcloud.net/: port 80 (GPS chipset firmware)*.paxstore.us: ports 80, 443 (PAXStore US services)*.amazonaws.com: port 443 (PAXStore cloud file service)*.paxsaas.com: port 8089 (Airviewer server and cloud messaging)rki.pax.us: port 33519 (Remote Key Injection)*.qq.com: port 443 (GPS geo-location services) White-list URLs for PAX terminal readers White-list URLs for PAX terminal readers [https://docs.tilled.com/docs/terminal-readers#faq-white-list-urls-for-pax-terminal-readers](https://docs.tilled.com/docs/terminal-readers#faq-white-list-urls-for-pax-terminal-readers) If you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.gw1.handpoint.com: port 443gw2.handpoint.com: port 443gw3.handpoint.com: port 443gw4.handpoint.com: port 443tm.handpoint.com: port 443cloud.handpoint.com: port 443hipos.handpoint.com: port 443express.handpoint.com: port 443merchant.handpoint.com: port 443txnfeed.handpoint.com: port 443network.handpoint.com: port 4433.14.9.119: port 88 (PAX OS OTA services)supl.google.com/: port 7275 (GPS assistant location for high precision positioning)*.izatcloud.net/: port 80 (GPS chipset firmware)*.paxstore.us: ports 80, 443 (PAXStore US services)*.amazonaws.com: port 443 (PAXStore cloud file service)*.paxsaas.com: port 8089 (Airviewer server and cloud messaging)rki.pax.us: port 33519 (Remote Key Injection)*.qq.com: port 443 (GPS geo-location services) If you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required. gw1.handpoint.com: port 443gw2.handpoint.com: port 443gw3.handpoint.com: port 443gw4.handpoint.com: port 443tm.handpoint.com: port 443cloud.handpoint.com: port 443hipos.handpoint.com: port 443express.handpoint.com: port 443merchant.handpoint.com: port 443txnfeed.handpoint.com: port 443network.handpoint.com: port 4433.14.9.119: port 88 (PAX OS OTA services)supl.google.com/: port 7275 (GPS assistant location for high precision positioning)*.izatcloud.net/: port 80 (GPS chipset firmware)*.paxstore.us: ports 80, 443 (PAXStore US services)*.amazonaws.com: port 443 (PAXStore cloud file service)*.paxsaas.com: port 8089 (Airviewer server and cloud messaging)rki.pax.us: port 33519 (Remote Key Injection)*.qq.com: port 443 (GPS geo-location services) gw1.handpoint.com: port 443 gw2.handpoint.com: port 443 gw3.handpoint.com: port 443 gw4.handpoint.com: port 443 tm.handpoint.com: port 443 cloud.handpoint.com: port 443 hipos.handpoint.com: port 443 express.handpoint.com: port 443 merchant.handpoint.com: port 443 txnfeed.handpoint.com: port 443 network.handpoint.com: port 443 3.14.9.119: port 88 (PAX OS OTA services) supl.google.com/: port 7275 (GPS assistant location for high precision positioning) *.izatcloud.net/: port 80 (GPS chipset firmware) *.paxstore.us: ports 80, 443 (PAXStore US services) *.amazonaws.com: port 443 (PAXStore cloud file service) *.paxsaas.com: port 8089 (Airviewer server and cloud messaging) rki.pax.us: port 33519 (Remote Key Injection) *.qq.com: port 443 (GPS geo-location services) TSYS Valor Terminal ReadersActivate Valor terminal readerOccasionally, you may need to activate the developer terminal reader. Tilled's Integrations team will send you an Activation Code. If you have not received an activation code for your terminal reader, please contact us at integrations@tilled.com.Steps to activate a terminal readerBefore activating the terminal reader, ensure it is connected to WiFi. Once connected, follow these steps:Select the Star menu (located at the bottom-left corner of the homescreen)Use the down arrow to navigate to the next screen of menu itemsSelect 6. Download PackageWhen prompted, the screen will display “Enter EPI ID” Enter the Activation Code as follows:Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to completeOnce activation is complete, the terminal reader will display “Waiting... Valor Connect”Automatically batch payments on Valor terminal readerValor terminal readers are set to automatically close the daily batch at 7:30 PM EST. For this process to occur, the terminal reader must be turned on and connected to the internet at that time. Failing to meet this condition will prevent the batch from closing automatically, potentially missing the cutoff for next-day funding and causing delays in receiving funds.Recommendations:Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST.If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in this article for step-by-step guidance on performing a manual batch.Charge Valor terminal readerThe charging port is located on the left side of the terminal reader. When charging properly, the orange light next to the charging port will stay on. If the orange light does not stay on, the terminal reader is not charging properly and you should try using a different charger.Charging recommendationsUse the charging cable that the terminal reader came withCharge the terminal reader whenever possible, as the battery drains quicklyCheck that the orange light stays on while chargingConnect Valor terminal reader to WiFi or iPhone hotspotTo connect to WiFi or iPhone hotspotDisconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. Comm ConfigSelect 1. WifiChoose the desired Wi-Fi network or iPhone hotspotSelect ConfigureEnter the Wi-Fi password (case sensitive)Tap OK to confirm the password or Cancel to return to the previous screenSelect ConnectTips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to OnManage Valor Connect modeValor Connect enables merchants to initiate transactions from their point-of-sale and collect payments using a terminal reader. Always ensure the terminal reader is in Valor Connect mode when processing payments to streamline reconciliation. Payments made outside this mode will still be settled and paid to the merchant; however, they will not be reported on in the API or Dashboard, making reconciliation more challenging.To accept card-present transactions, the terminal reader must be in Valor Connect mode. When the terminal reader is in this mode, the screen displays the message \"Waiting… Valor Connect\". This indicates that the terminal reader is ready to receive transactions from the point-of-sale.Disconnect terminal reader from Valor ConnectTo update the WiFi settings on the terminal reader, the terminal reader must first be disconnected from Valor Connect mode. To disconnect:From the \"Waiting… Valor Connect\" screen, press the red X on the keyboardSelect Yes to disconnect from Valor ConnectReconnect terminal reader to Valor ConnectTo resume accepting card-present transactions, the terminal reader needs to be reconnected to Valor Connect. To reconnect:From the main screen, tap the Star menuSelect 10. Start VC from the menuTap Yes to confirmAllow a few seconds for the connection process to completeOnce successfully connected, the terminal reader screen will display \"Waiting… Valor Connect\".Manually batch payments on Valor terminal readerTo manually batch a terminal reader:Disconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. SettlementEnter the password (last 4 digits of your activation code)Select Yes on the confirmation promptThe terminal reader will now attempt to:Settle the current batchPrint a Batch SummaryPrint a Batch Closed confirmation Once the payments have been batched, reconnect to Valor Connect to continue collecting payments.Turn Valor terminal reader on/offTo power the device on or off, press and hold the power button located at the bottom left of the keyboard.Reset a Valor terminal reader Tap the the Main menu (three horizontal lines, located at the bottom of the homescreen)Select 2. Host UtilityEnter the password (last 4 digits of your activation code)Select 1. Reset TerminalEnter the Valor master password: 82567729Select No to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose Yes insteadWhite-list URLs for Valor terminal readersIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.txnlive.valorpaytech.com: port 678952.3.127.18654.196.180.13652.205.40.220 TSYS Valor Terminal Readers Activate Valor terminal readerOccasionally, you may need to activate the developer terminal reader. Tilled's Integrations team will send you an Activation Code. If you have not received an activation code for your terminal reader, please contact us at integrations@tilled.com.Steps to activate a terminal readerBefore activating the terminal reader, ensure it is connected to WiFi. Once connected, follow these steps:Select the Star menu (located at the bottom-left corner of the homescreen)Use the down arrow to navigate to the next screen of menu itemsSelect 6. Download PackageWhen prompted, the screen will display “Enter EPI ID” Enter the Activation Code as follows:Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to completeOnce activation is complete, the terminal reader will display “Waiting... Valor Connect” Activate Valor terminal reader Activate Valor terminal reader [https://docs.tilled.com/docs/terminal-readers#faq-activate-valor-terminal-reader](https://docs.tilled.com/docs/terminal-readers#faq-activate-valor-terminal-reader) Occasionally, you may need to activate the developer terminal reader. Tilled's Integrations team will send you an Activation Code. If you have not received an activation code for your terminal reader, please contact us at integrations@tilled.com.Steps to activate a terminal readerBefore activating the terminal reader, ensure it is connected to WiFi. Once connected, follow these steps:Select the Star menu (located at the bottom-left corner of the homescreen)Use the down arrow to navigate to the next screen of menu itemsSelect 6. Download PackageWhen prompted, the screen will display “Enter EPI ID” Enter the Activation Code as follows:Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to completeOnce activation is complete, the terminal reader will display “Waiting... Valor Connect” Occasionally, you may need to activate the developer terminal reader. Tilled's Integrations team will send you an Activation Code. If you have not received an activation code for your terminal reader, please contact us at integrations@tilled.com. Tilled's [integrations@tilled.com](mailto:integrations@tilled.com) Steps to activate a terminal reader Steps to activate a terminal reader Before activating the terminal reader, ensure it is connected to WiFi. Once connected, follow these steps: Select the Star menu (located at the bottom-left corner of the homescreen)Use the down arrow to navigate to the next screen of menu itemsSelect 6. Download PackageWhen prompted, the screen will display “Enter EPI ID” Enter the Activation Code as follows:Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to completeOnce activation is complete, the terminal reader will display “Waiting... Valor Connect” Select the Star menu (located at the bottom-left corner of the homescreen) Star Use the down arrow to navigate to the next screen of menu items down arrow Select 6. Download Package 6. Download Package When prompted, the screen will display “Enter EPI ID” Enter the Activation Code as follows:Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to complete “Enter EPI ID” Input the Activation Code (also referred to as the EPI ID) and tap OKAfter tapping OK the terminal reader will begin downloading the software and provisioning the deviceThis process may take a few seconds to complete Input the Activation Code (also referred to as the EPI ID) and tap OK OK After tapping OK the terminal reader will begin downloading the software and provisioning the device OK This process may take a few seconds to complete Once activation is complete, the terminal reader will display “Waiting... Valor Connect” “Waiting... Valor Connect” Automatically batch payments on Valor terminal readerValor terminal readers are set to automatically close the daily batch at 7:30 PM EST. For this process to occur, the terminal reader must be turned on and connected to the internet at that time. Failing to meet this condition will prevent the batch from closing automatically, potentially missing the cutoff for next-day funding and causing delays in receiving funds.Recommendations:Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST.If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in this article for step-by-step guidance on performing a manual batch. Automatically batch payments on Valor terminal reader Automatically batch payments on Valor terminal reader [https://docs.tilled.com/docs/terminal-readers#faq-automatically-batch-payments-on-valor-terminal-reader](https://docs.tilled.com/docs/terminal-readers#faq-automatically-batch-payments-on-valor-terminal-reader) Valor terminal readers are set to automatically close the daily batch at 7:30 PM EST. For this process to occur, the terminal reader must be turned on and connected to the internet at that time. Failing to meet this condition will prevent the batch from closing automatically, potentially missing the cutoff for next-day funding and causing delays in receiving funds.Recommendations:Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST.If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in this article for step-by-step guidance on performing a manual batch. Valor terminal readers are set to automatically close the daily batch at 7:30 PM EST. For this process to occur, the terminal reader must be turned on and connected to the internet at that time. Failing to meet this condition will prevent the batch from closing automatically, potentially missing the cutoff for next-day funding and causing delays in receiving funds. Recommendations: Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST.If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in this article for step-by-step guidance on performing a manual batch. Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST. If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in this article for step-by-step guidance on performing a manual batch. [this article](https://docs.tilled.com/docs/terminal-readers#faq-manually-batch-payments-on-valor-terminal-reader) Charge Valor terminal readerThe charging port is located on the left side of the terminal reader. When charging properly, the orange light next to the charging port will stay on. If the orange light does not stay on, the terminal reader is not charging properly and you should try using a different charger.Charging recommendationsUse the charging cable that the terminal reader came withCharge the terminal reader whenever possible, as the battery drains quicklyCheck that the orange light stays on while charging Charge Valor terminal reader Charge Valor terminal reader [https://docs.tilled.com/docs/terminal-readers#faq-charge-valor-terminal-reader](https://docs.tilled.com/docs/terminal-readers#faq-charge-valor-terminal-reader) The charging port is located on the left side of the terminal reader. When charging properly, the orange light next to the charging port will stay on. If the orange light does not stay on, the terminal reader is not charging properly and you should try using a different charger.Charging recommendationsUse the charging cable that the terminal reader came withCharge the terminal reader whenever possible, as the battery drains quicklyCheck that the orange light stays on while charging The charging port is located on the left side of the terminal reader. When charging properly, the orange light next to the charging port will stay on. If the orange light does not stay on, the terminal reader is not charging properly and you should try using a different charger. Charging recommendations Charging recommendations Use the charging cable that the terminal reader came withCharge the terminal reader whenever possible, as the battery drains quicklyCheck that the orange light stays on while charging Use the charging cable that the terminal reader came with Charge the terminal reader whenever possible, as the battery drains quickly Check that the orange light stays on while charging Connect Valor terminal reader to WiFi or iPhone hotspotTo connect to WiFi or iPhone hotspotDisconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. Comm ConfigSelect 1. WifiChoose the desired Wi-Fi network or iPhone hotspotSelect ConfigureEnter the Wi-Fi password (case sensitive)Tap OK to confirm the password or Cancel to return to the previous screenSelect ConnectTips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to On Connect Valor terminal reader to WiFi or iPhone hotspot Connect Valor terminal reader to WiFi or iPhone hotspot [https://docs.tilled.com/docs/terminal-readers#faq-connect-valor-terminal-reader-to-wifi-or-iphone-hotspot](https://docs.tilled.com/docs/terminal-readers#faq-connect-valor-terminal-reader-to-wifi-or-iphone-hotspot) To connect to WiFi or iPhone hotspotDisconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. Comm ConfigSelect 1. WifiChoose the desired Wi-Fi network or iPhone hotspotSelect ConfigureEnter the Wi-Fi password (case sensitive)Tap OK to confirm the password or Cancel to return to the previous screenSelect ConnectTips for connecting to iPhone hotspotTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings.To enable Maximize Compatibility on the iPhone hotspot:Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to On To connect to WiFi or iPhone hotspot To connect to WiFi or iPhone hotspot Disconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. Comm ConfigSelect 1. WifiChoose the desired Wi-Fi network or iPhone hotspotSelect ConfigureEnter the Wi-Fi password (case sensitive)Tap OK to confirm the password or Cancel to return to the previous screenSelect Connect Disconnect from Valor Connect mode Valor Connect mode Select the Star menu (located at the bottom-left corner of the homescreen) Star Select 2. Comm Config 2. Comm Config Select 1. Wifi 1. Wifi Choose the desired Wi-Fi network or iPhone hotspot Select Configure Configure Enter the Wi-Fi password (case sensitive) Tap OK to confirm the password or Cancel to return to the previous screen OK Cancel Select Connect Connect Tips for connecting to iPhone hotspot Tips for connecting to iPhone hotspot Terminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the Maximize Compatibility setting is activated in the iPhone's Personal Hotspot settings. Maximize Compatibility To enable Maximize Compatibility on the iPhone hotspot: Maximize Compatibility Access the iPhone's SettingsTap on Personal HotspotEnsure that the Maximize Compatibility option is switched to On Access the iPhone's Settings Settings Tap on Personal Hotspot Personal Hotspot Ensure that the Maximize Compatibility option is switched to On Maximize Compatibility On Manage Valor Connect modeValor Connect enables merchants to initiate transactions from their point-of-sale and collect payments using a terminal reader. Always ensure the terminal reader is in Valor Connect mode when processing payments to streamline reconciliation. Payments made outside this mode will still be settled and paid to the merchant; however, they will not be reported on in the API or Dashboard, making reconciliation more challenging.To accept card-present transactions, the terminal reader must be in Valor Connect mode. When the terminal reader is in this mode, the screen displays the message \"Waiting… Valor Connect\". This indicates that the terminal reader is ready to receive transactions from the point-of-sale.Disconnect terminal reader from Valor ConnectTo update the WiFi settings on the terminal reader, the terminal reader must first be disconnected from Valor Connect mode. To disconnect:From the \"Waiting… Valor Connect\" screen, press the red X on the keyboardSelect Yes to disconnect from Valor ConnectReconnect terminal reader to Valor ConnectTo resume accepting card-present transactions, the terminal reader needs to be reconnected to Valor Connect. To reconnect:From the main screen, tap the Star menuSelect 10. Start VC from the menuTap Yes to confirmAllow a few seconds for the connection process to completeOnce successfully connected, the terminal reader screen will display \"Waiting… Valor Connect\". Manage Valor Connect mode Manage Valor Connect mode [https://docs.tilled.com/docs/terminal-readers#faq-manage-valor-connect-mode](https://docs.tilled.com/docs/terminal-readers#faq-manage-valor-connect-mode) Valor Connect enables merchants to initiate transactions from their point-of-sale and collect payments using a terminal reader. Always ensure the terminal reader is in Valor Connect mode when processing payments to streamline reconciliation. Payments made outside this mode will still be settled and paid to the merchant; however, they will not be reported on in the API or Dashboard, making reconciliation more challenging.To accept card-present transactions, the terminal reader must be in Valor Connect mode. When the terminal reader is in this mode, the screen displays the message \"Waiting… Valor Connect\". This indicates that the terminal reader is ready to receive transactions from the point-of-sale.Disconnect terminal reader from Valor ConnectTo update the WiFi settings on the terminal reader, the terminal reader must first be disconnected from Valor Connect mode. To disconnect:From the \"Waiting… Valor Connect\" screen, press the red X on the keyboardSelect Yes to disconnect from Valor ConnectReconnect terminal reader to Valor ConnectTo resume accepting card-present transactions, the terminal reader needs to be reconnected to Valor Connect. To reconnect:From the main screen, tap the Star menuSelect 10. Start VC from the menuTap Yes to confirmAllow a few seconds for the connection process to completeOnce successfully connected, the terminal reader screen will display \"Waiting… Valor Connect\". Valor Connect enables merchants to initiate transactions from their point-of-sale and collect payments using a terminal reader. Always ensure the terminal reader is in Valor Connect mode when processing payments to streamline reconciliation. Payments made outside this mode will still be settled and paid to the merchant; however, they will not be reported on in the API or Dashboard, making reconciliation more challenging. To accept card-present transactions, the terminal reader must be in Valor Connect mode. When the terminal reader is in this mode, the screen displays the message \"Waiting… Valor Connect\". This indicates that the terminal reader is ready to receive transactions from the point-of-sale. Valor Connect mode \"Waiting… Valor Connect\" Disconnect terminal reader from Valor Connect Disconnect terminal reader from Valor Connect To update the WiFi settings on the terminal reader, the terminal reader must first be disconnected from Valor Connect mode. To disconnect: From the \"Waiting… Valor Connect\" screen, press the red X on the keyboardSelect Yes to disconnect from Valor Connect From the \"Waiting… Valor Connect\" screen, press the red X on the keyboard \"Waiting… Valor Connect\" X Select Yes to disconnect from Valor Connect Yes Reconnect terminal reader to Valor Connect Reconnect terminal reader to Valor Connect To resume accepting card-present transactions, the terminal reader needs to be reconnected to Valor Connect. To reconnect: From the main screen, tap the Star menuSelect 10. Start VC from the menuTap Yes to confirmAllow a few seconds for the connection process to complete From the main screen, tap the Star menu Star Select 10. Start VC from the menu 10. Start VC Tap Yes to confirm Yes Allow a few seconds for the connection process to complete Once successfully connected, the terminal reader screen will display \"Waiting… Valor Connect\". \"Waiting… Valor Connect\" Manually batch payments on Valor terminal readerTo manually batch a terminal reader:Disconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. SettlementEnter the password (last 4 digits of your activation code)Select Yes on the confirmation promptThe terminal reader will now attempt to:Settle the current batchPrint a Batch SummaryPrint a Batch Closed confirmation Once the payments have been batched, reconnect to Valor Connect to continue collecting payments. Manually batch payments on Valor terminal reader Manually batch payments on Valor terminal reader [https://docs.tilled.com/docs/terminal-readers#faq-manually-batch-payments-on-valor-terminal-reader](https://docs.tilled.com/docs/terminal-readers#faq-manually-batch-payments-on-valor-terminal-reader) To manually batch a terminal reader:Disconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. SettlementEnter the password (last 4 digits of your activation code)Select Yes on the confirmation promptThe terminal reader will now attempt to:Settle the current batchPrint a Batch SummaryPrint a Batch Closed confirmation Once the payments have been batched, reconnect to Valor Connect to continue collecting payments. To manually batch a terminal reader: Disconnect from Valor Connect modeSelect the Star menu (located at the bottom-left corner of the homescreen)Select 2. SettlementEnter the password (last 4 digits of your activation code)Select Yes on the confirmation prompt Disconnect from Valor Connect mode Valor Connect mode Select the Star menu (located at the bottom-left corner of the homescreen) Star Select 2. Settlement 2. Settlement Enter the password (last 4 digits of your activation code) Select Yes on the confirmation prompt Yes The terminal reader will now attempt to: Settle the current batchPrint a Batch SummaryPrint a Batch Closed confirmation Settle the current batch Print a Batch Summary Print a Batch Closed confirmation Once the payments have been batched, reconnect to Valor Connect to continue collecting payments. Valor Connect Turn Valor terminal reader on/offTo power the device on or off, press and hold the power button located at the bottom left of the keyboard. Turn Valor terminal reader on/off Turn Valor terminal reader on/off [https://docs.tilled.com/docs/terminal-readers#faq-turn-valor-terminal-reader-onoff](https://docs.tilled.com/docs/terminal-readers#faq-turn-valor-terminal-reader-onoff) To power the device on or off, press and hold the power button located at the bottom left of the keyboard. Reset a Valor terminal reader Tap the the Main menu (three horizontal lines, located at the bottom of the homescreen)Select 2. Host UtilityEnter the password (last 4 digits of your activation code)Select 1. Reset TerminalEnter the Valor master password: 82567729Select No to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose Yes instead Reset a Valor terminal reader Reset a Valor terminal reader [https://docs.tilled.com/docs/terminal-readers#faq-reset-a-valor-terminal-reader](https://docs.tilled.com/docs/terminal-readers#faq-reset-a-valor-terminal-reader) Tap the the Main menu (three horizontal lines, located at the bottom of the homescreen)Select 2. Host UtilityEnter the password (last 4 digits of your activation code)Select 1. Reset TerminalEnter the Valor master password: 82567729Select No to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose Yes instead Tap the the Main menu (three horizontal lines, located at the bottom of the homescreen)Select 2. Host UtilityEnter the password (last 4 digits of your activation code)Select 1. Reset TerminalEnter the Valor master password: 82567729Select No to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose Yes instead Tap the the Main menu (three horizontal lines, located at the bottom of the homescreen) Main Select 2. Host Utility 2. Host Utility Enter the password (last 4 digits of your activation code) Select 1. Reset Terminal 1. Reset Terminal Enter the Valor master password: 82567729 Select No to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose Yes instead No Yes White-list URLs for Valor terminal readersIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.txnlive.valorpaytech.com: port 678952.3.127.18654.196.180.13652.205.40.220 White-list URLs for Valor terminal readers White-list URLs for Valor terminal readers [https://docs.tilled.com/docs/terminal-readers#faq-white-list-urls-for-valor-terminal-readers](https://docs.tilled.com/docs/terminal-readers#faq-white-list-urls-for-valor-terminal-readers) If you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.txnlive.valorpaytech.com: port 678952.3.127.18654.196.180.13652.205.40.220 If you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required. txnlive.valorpaytech.com: port 678952.3.127.18654.196.180.13652.205.40.220 txnlive.valorpaytech.com: port 6789 52.3.127.186 54.196.180.136 52.205.40.220 Last updated on February 3, 2025 February 3, 2025 Statement DescriptorsBilling [Statement Descriptors](https://docs.tilled.com/docs/payments/statement-descriptors) [Billing](https://docs.tilled.com/docs/merchant-billing)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchant-billing",
    "title": "Tilled",
    "content": "Merchant Billing Merchant billing is the process by which fees are calculated and charged to a merchant based on their payment and account activity within a set billing cycle, such as daily, weekly, or monthly. Billing includes fees for processing payments, account maintenance, and additional charges, as defined by the merchant’s pricing. Fee Collection A merchant’s payout type determines how merchant fees are collected: Net payout: Fees are taken directly from the merchant’s payout before it is deposited. Gross payout: Fees are withdrawn directly from the merchant’s bank account. Billing Frequency A merchant’s billing frequency refers to how often the merchant is billed for fees. Paysafe - Flex BillingMerchants can be set up on daily, weekly, or monthly billing: Daily billing is the default for flat-rate pricing Weekly billing is the default for interchange++ pricing The billing day for weekly and monthly billing can be customized and will include any fees incurred since the last billing date.Paysafe - Processor BillingDaily billing is the default for all merchants. Monthly billing requires Risk team approval; if approved, merchants will be billed on the last day of the month.TSYSMonthly billing is the only option for merchants, occurring around the 10th of each month and covering any fees incurred in the previous calendar month. Manage billing frequency Updating the billing frequency through the Dashboard is exclusive to merchants on Flex Billing. For merchants on Processor Billing, please email support@tilled.com. To view and update a merchant’s billing frequency in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method and click the Edit icon Select the desired billing frequency and anchor day, if applicable Click the Save Billing and Payout Schedule button FAQsWhich day of the month are monthly account fees billed?The monthly account fee is posted to the account on the last day of the month. The specific billing day depends on the merchant's billing schedule.How do I interpret TSYS's monthly statement?TSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period.Quick facts about the merchant statementTSYS mails the statement directly to the merchant by the 10th of each month.The branding is generic - there is no mention of Tilled or the software platform.TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support.Understanding the merchant statementThe merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement:Plan SummaryThe Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include:Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount.News For YouThis section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you.DepositsThe Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing.FeesHere, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account.Last updated on March 10, 2025Terminal ReadersPayouts Merchant Billing Merchant billing is the process by which fees are calculated and charged to a merchant based on their payment and account activity within a set billing cycle, such as daily, weekly, or monthly. Billing includes fees for processing payments, account maintenance, and additional charges, as defined by the merchant’s pricing. [merchant’s pricing](https://docs.tilled.com/docs/merchants/merchant-pricing) Fee Collection [https://docs.tilled.com/docs/merchant-billing#fee-collection](https://docs.tilled.com/docs/merchant-billing#fee-collection) A merchant’s payout type determines how merchant fees are collected: [payout type](https://docs.tilled.com/docs/payouts#payout-type) Net payout: Fees are taken directly from the merchant’s payout before it is deposited. Gross payout: Fees are withdrawn directly from the merchant’s bank account. Net payout: Fees are taken directly from the merchant’s payout before it is deposited. Net payout: Gross payout: Fees are withdrawn directly from the merchant’s bank account. Gross payout: Billing Frequency [https://docs.tilled.com/docs/merchant-billing#billing-frequency](https://docs.tilled.com/docs/merchant-billing#billing-frequency) A merchant’s billing frequency refers to how often the merchant is billed for fees. Paysafe - Flex BillingMerchants can be set up on daily, weekly, or monthly billing: Daily billing is the default for flat-rate pricing Weekly billing is the default for interchange++ pricing The billing day for weekly and monthly billing can be customized and will include any fees incurred since the last billing date.Paysafe - Processor BillingDaily billing is the default for all merchants. Monthly billing requires Risk team approval; if approved, merchants will be billed on the last day of the month.TSYSMonthly billing is the only option for merchants, occurring around the 10th of each month and covering any fees incurred in the previous calendar month. Paysafe - Flex Billing Paysafe - Flex Billing Merchants can be set up on daily, weekly, or monthly billing: Daily billing is the default for flat-rate pricing Weekly billing is the default for interchange++ pricing Daily billing is the default for flat-rate pricing Weekly billing is the default for interchange++ pricing The billing day for weekly and monthly billing can be customized and will include any fees incurred since the last billing date. Paysafe - Processor Billing Paysafe - Processor Billing Daily billing is the default for all merchants. Monthly billing requires Risk team approval; if approved, merchants will be billed on the last day of the month. TSYS TSYS Monthly billing is the only option for merchants, occurring around the 10th of each month and covering any fees incurred in the previous calendar month. Manage billing frequency [https://docs.tilled.com/docs/merchant-billing#manage-billing-frequency](https://docs.tilled.com/docs/merchant-billing#manage-billing-frequency) Updating the billing frequency through the Dashboard is exclusive to merchants on Flex Billing. For merchants on Processor Billing, please email support@tilled.com. [support@tilled.com](mailto:support@tilled.com) To view and update a merchant’s billing frequency in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method and click the Edit icon Select the desired billing frequency and anchor day, if applicable Click the Save Billing and Payout Schedule button Navigate to Merchants Merchants Select the respective merchant Select the Processing Details tab Processing Details Locate the Billing & Payout Schedule widget for the desired payment method and click the Edit icon Billing & Payout Schedule Edit Select the desired billing frequency and anchor day, if applicable Click the Save Billing and Payout Schedule button Save Billing and Payout Schedule FAQsWhich day of the month are monthly account fees billed?The monthly account fee is posted to the account on the last day of the month. The specific billing day depends on the merchant's billing schedule.How do I interpret TSYS's monthly statement?TSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period.Quick facts about the merchant statementTSYS mails the statement directly to the merchant by the 10th of each month.The branding is generic - there is no mention of Tilled or the software platform.TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support.Understanding the merchant statementThe merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement:Plan SummaryThe Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include:Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount.News For YouThis section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you.DepositsThe Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing.FeesHere, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account. FAQsWhich day of the month are monthly account fees billed?The monthly account fee is posted to the account on the last day of the month. The specific billing day depends on the merchant's billing schedule.How do I interpret TSYS's monthly statement?TSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period.Quick facts about the merchant statementTSYS mails the statement directly to the merchant by the 10th of each month.The branding is generic - there is no mention of Tilled or the software platform.TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support.Understanding the merchant statementThe merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement:Plan SummaryThe Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include:Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount.News For YouThis section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you.DepositsThe Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing.FeesHere, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account. FAQs Which day of the month are monthly account fees billed?The monthly account fee is posted to the account on the last day of the month. The specific billing day depends on the merchant's billing schedule. Which day of the month are monthly account fees billed? Which day of the month are monthly account fees billed? [https://docs.tilled.com/docs/merchant-billing#faq-which-day-of-the-month-are-monthly-account-fees-billed](https://docs.tilled.com/docs/merchant-billing#faq-which-day-of-the-month-are-monthly-account-fees-billed) The monthly account fee is posted to the account on the last day of the month. The specific billing day depends on the merchant's billing schedule. How do I interpret TSYS's monthly statement?TSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period.Quick facts about the merchant statementTSYS mails the statement directly to the merchant by the 10th of each month.The branding is generic - there is no mention of Tilled or the software platform.TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support.Understanding the merchant statementThe merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement:Plan SummaryThe Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include:Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount.News For YouThis section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you.DepositsThe Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing.FeesHere, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account. How do I interpret TSYS's monthly statement? How do I interpret TSYS's monthly statement? [https://docs.tilled.com/docs/merchant-billing#faq-how-do-i-interpret-tsyss-monthly-statement](https://docs.tilled.com/docs/merchant-billing#faq-how-do-i-interpret-tsyss-monthly-statement) TSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period.Quick facts about the merchant statementTSYS mails the statement directly to the merchant by the 10th of each month.The branding is generic - there is no mention of Tilled or the software platform.TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support.Understanding the merchant statementThe merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement:Plan SummaryThe Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include:Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount.News For YouThis section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you.DepositsThe Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing.FeesHere, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account. TSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period. Quick facts about the merchant statement Quick facts about the merchant statement TSYS mails the statement directly to the merchant by the 10th of each month.The branding is generic - there is no mention of Tilled or the software platform.TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support. TSYS mails the statement directly to the merchant by the 10th of each month. The branding is generic - there is no mention of Tilled or the software platform. Tilled TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support. Tilled Understanding the merchant statement Understanding the merchant statement The merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement: Plan Summary Plan Summary The Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include: Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount. Base P/I (Per Item): This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed. Base P/I (Per Item): Base Rate: This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount. Base Rate: News For You News For You This section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you. Deposits Deposits The Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing. Fees Fees Here, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account. Last updated on March 10, 2025 March 10, 2025 Terminal ReadersPayouts [Terminal Readers](https://docs.tilled.com/docs/terminal-readers) [Payouts](https://docs.tilled.com/docs/payouts)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payouts",
    "title": "Tilled",
    "content": "Payouts Payouts represent any deposits and withdrawals against a merchant’s bank account. Merchant payout details are accessible in the Payouts tab of the Dashboard and can also be retrieved via the PayoutsAPI endpoint. Payout Speed A merchant’s payout speed indicates the interval between a transaction’s settlement and the initiation of the payout, typically denoted as T+X days. T signifies the day of transaction settlement, while X represents the days until the funds are available for payout. PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5NDF (Next Day Funding)Payment initiated and payout is sentFunds arrive in merchant's bank accountT+0Payment initiatedPayment settles and payout is sentFunds arrive in merchant's bank accountT+1Payment initiatedPayment settlesPayout is sentFunds arrive in merchant's bank account View payout speed To view a merchant’s payout speed in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method Payout Type Tilled supports both gross and net payouts, depending on the merchant’s processor and payment method: For online payments processed through Paysafe, gross and net funding are available. For online and in-person payments processed through TSYS, only gross funding is available. For bank-to-bank payments, only net funding is available. Net payouts In net payouts, processing fees are deducted from the gross charge amount before depositing funds into the merchant’s account. The merchant receives the net amount, which is the charge amount minus the processing fees. In this case, the processing fees are deducted automatically, and the merchant doesn’t need to separately pay the fees. For example, if a customer makes a $100 purchase and the processing fee is 2%, the merchant would receive the net amount of $98 directly, with the $2 processing fee already deducted. Gross payouts In gross payouts, the merchant receives the full amount of the payments processed. Processing fees are deducted separately from the merchant’s bank account. For example, if a customer makes a $100 purchase and the processing fee is 2%, the merchant would receive the full $100, and the processing fee of $2 would be billed separately. View payout type To view a merchant’s payout type in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method Payout Frequency A merchant’s payout frequency refers to how often funds are paid out to their bank account. By default, all merchants are set up for daily payouts (excluding weekends). Manage payout frequency Updating the payout frequency through the Dashboard is exclusive to merchants on Flex Billing. For merchants on Processor Billing, please email support@tilled.com. To view and update a merchant’s payout frequency in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method and click the Edit icon Select the desired payout frequency and anchor day, if applicable Click the Save Billing and Payout Schedule button Payout States DASHBOARD STATUSAPI STATUSDESCRIPTIONpendingpendingFunds are accumulating but the payout has not been initiated. paidpaidThe payout has been initiated. Funds will be deposited in the merchant's bank account.withdrawnpaid A negative payout, also known as a collection, has been initiated. Funds will be withdrawn from the merchant's bank account.failedfailedThe payout attempt failed. The payout will be automatically retried. FAQsA payout was initiated but hasn't arrived in the merchant's bank account. Where is it?If the merchant expected a payout and it was sent less than 5 business days ago, the payout is currently being processed by the bank. Banks can delay processing due to weekends and holidays. Once the bank finishes processing the payout, the funds will be deposited into the merchant's account automatically.A payout hasn't been initiated. Why is that?A merchant's payout may be delayed for the following reasons:Minimum account balance: The merchant's account balance doesn't meet the minimum payout amount of $5.00.Payout speed: Due to the merchant's payout speed, their funds have not been released.Funding hold: A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant.How do disputes, refunds, and ach returns impact the merchant payout?Disputes, refunds, and ACH returns each affect a merchant's payout differently, as they represent funds being pulled back from a previously processed transaction. Here’s a breakdown of how each impacts the payout amount:Disputes: When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees.Refunds: When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account.ACH Returns: An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account.Fees associated with disputes, refunds, and ACH returns will continue to be collected based on the merchant’s billing schedule.The Payout Details page includes a 'Balance Carried Forward'. What is that?The 'Balance Carried Forward' on the Payout Details page represents any funds from a previous payout cycle that were not included in that payout, often due to timing issues. This can happen for several reasons:Unsettled funds: Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period.Negative balances: If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it.Last updated on March 10, 2025BillingDisputes Payouts Payouts represent any deposits and withdrawals against a merchant’s bank account. Merchant payout details are accessible in the Payouts tab of the Dashboard and can also be retrieved via the PayoutsAPI endpoint. Payouts [PayoutsAPI](https://docs.tilled.com/api-reference#tag/payouts) API Payout Speed [https://docs.tilled.com/docs/payouts#payout-speed](https://docs.tilled.com/docs/payouts#payout-speed) A merchant’s payout speed indicates the interval between a transaction’s settlement and the initiation of the payout, typically denoted as T+X days. T signifies the day of transaction settlement, while X represents the days until the funds are available for payout. T+X T X PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5NDF (Next Day Funding)Payment initiated and payout is sentFunds arrive in merchant's bank accountT+0Payment initiatedPayment settles and payout is sentFunds arrive in merchant's bank accountT+1Payment initiatedPayment settlesPayout is sentFunds arrive in merchant's bank account PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5 PAYOUT SPEEDDAY 1DAY 2DAY 3DAY 4DAY 5 PAYOUT SPEED PAYOUT SPEED DAY 1 DAY 1 DAY 2 DAY 2 DAY 3 DAY 3 DAY 4 DAY 4 DAY 5 DAY 5 NDF (Next Day Funding)Payment initiated and payout is sentFunds arrive in merchant's bank accountT+0Payment initiatedPayment settles and payout is sentFunds arrive in merchant's bank accountT+1Payment initiatedPayment settlesPayout is sentFunds arrive in merchant's bank account NDF (Next Day Funding)Payment initiated and payout is sentFunds arrive in merchant's bank account NDF (Next Day Funding) Payment initiated and payout is sent Funds arrive in merchant's bank account T+0Payment initiatedPayment settles and payout is sentFunds arrive in merchant's bank account T+0 Payment initiated Payment settles and payout is sent Funds arrive in merchant's bank account T+1Payment initiatedPayment settlesPayout is sentFunds arrive in merchant's bank account T+1 Payment initiated Payment settles Payout is sent Funds arrive in merchant's bank account View payout speed [https://docs.tilled.com/docs/payouts#view-payout-speed](https://docs.tilled.com/docs/payouts#view-payout-speed) To view a merchant’s payout speed in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method Navigate to Merchants Merchants Select the respective merchant Select the Processing Details tab Processing Details Locate the Billing & Payout Schedule widget for the desired payment method Billing & Payout Schedule Payout Type [https://docs.tilled.com/docs/payouts#payout-type](https://docs.tilled.com/docs/payouts#payout-type) Tilled supports both gross and net payouts, depending on the merchant’s processor and payment method: For online payments processed through Paysafe, gross and net funding are available. For online and in-person payments processed through TSYS, only gross funding is available. For bank-to-bank payments, only net funding is available. Tilled supports both gross and net payouts, depending on the merchant’s processor and payment method: Tilled For online payments processed through Paysafe, gross and net funding are available. For online and in-person payments processed through TSYS, only gross funding is available. For bank-to-bank payments, only net funding is available. For online payments processed through Paysafe, gross and net funding are available. For online and in-person payments processed through TSYS, only gross funding is available. For bank-to-bank payments, only net funding is available. Net payouts [https://docs.tilled.com/docs/payouts#net-payouts](https://docs.tilled.com/docs/payouts#net-payouts) In net payouts, processing fees are deducted from the gross charge amount before depositing funds into the merchant’s account. The merchant receives the net amount, which is the charge amount minus the processing fees. In this case, the processing fees are deducted automatically, and the merchant doesn’t need to separately pay the fees. For example, if a customer makes a $100 purchase and the processing fee is 2%, the merchant would receive the net amount of $98 directly, with the $2 processing fee already deducted. Gross payouts [https://docs.tilled.com/docs/payouts#gross-payouts](https://docs.tilled.com/docs/payouts#gross-payouts) In gross payouts, the merchant receives the full amount of the payments processed. Processing fees are deducted separately from the merchant’s bank account. For example, if a customer makes a $100 purchase and the processing fee is 2%, the merchant would receive the full $100, and the processing fee of $2 would be billed separately. View payout type [https://docs.tilled.com/docs/payouts#view-payout-type](https://docs.tilled.com/docs/payouts#view-payout-type) To view a merchant’s payout type in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method Navigate to Merchants Merchants Select the respective merchant Select the Processing Details tab Processing Details Locate the Billing & Payout Schedule widget for the desired payment method Billing & Payout Schedule Payout Frequency [https://docs.tilled.com/docs/payouts#payout-frequency](https://docs.tilled.com/docs/payouts#payout-frequency) A merchant’s payout frequency refers to how often funds are paid out to their bank account. By default, all merchants are set up for daily payouts (excluding weekends). Manage payout frequency [https://docs.tilled.com/docs/payouts#manage-payout-frequency](https://docs.tilled.com/docs/payouts#manage-payout-frequency) Updating the payout frequency through the Dashboard is exclusive to merchants on Flex Billing. For merchants on Processor Billing, please email support@tilled.com. [support@tilled.com](mailto:support@tilled.com) To view and update a merchant’s payout frequency in the Dashboard: Navigate to Merchants Select the respective merchant Select the Processing Details tab Locate the Billing & Payout Schedule widget for the desired payment method and click the Edit icon Select the desired payout frequency and anchor day, if applicable Click the Save Billing and Payout Schedule button Navigate to Merchants Merchants Select the respective merchant Select the Processing Details tab Processing Details Locate the Billing & Payout Schedule widget for the desired payment method and click the Edit icon Billing & Payout Schedule Edit Select the desired payout frequency and anchor day, if applicable Click the Save Billing and Payout Schedule button Save Billing and Payout Schedule Payout States [https://docs.tilled.com/docs/payouts#payout-states](https://docs.tilled.com/docs/payouts#payout-states) DASHBOARD STATUSAPI STATUSDESCRIPTIONpendingpendingFunds are accumulating but the payout has not been initiated. paidpaidThe payout has been initiated. Funds will be deposited in the merchant's bank account.withdrawnpaid A negative payout, also known as a collection, has been initiated. Funds will be withdrawn from the merchant's bank account.failedfailedThe payout attempt failed. The payout will be automatically retried. DASHBOARD STATUSAPI STATUSDESCRIPTION DASHBOARD STATUSAPI STATUSDESCRIPTION DASHBOARD STATUS DASHBOARD STATUS API STATUS API STATUS DESCRIPTION DESCRIPTION pendingpendingFunds are accumulating but the payout has not been initiated. paidpaidThe payout has been initiated. Funds will be deposited in the merchant's bank account.withdrawnpaid A negative payout, also known as a collection, has been initiated. Funds will be withdrawn from the merchant's bank account.failedfailedThe payout attempt failed. The payout will be automatically retried. pendingpendingFunds are accumulating but the payout has not been initiated. pending pending pending pending Funds are accumulating but the payout has not been initiated. paidpaidThe payout has been initiated. Funds will be deposited in the merchant's bank account. paid paid paid paid The payout has been initiated. Funds will be deposited in the merchant's bank account. withdrawnpaid A negative payout, also known as a collection, has been initiated. Funds will be withdrawn from the merchant's bank account. withdrawn withdrawn paid paid A negative payout, also known as a collection, has been initiated. Funds will be withdrawn from the merchant's bank account. failedfailedThe payout attempt failed. The payout will be automatically retried. failed failed failed failed The payout attempt failed. The payout will be automatically retried. FAQsA payout was initiated but hasn't arrived in the merchant's bank account. Where is it?If the merchant expected a payout and it was sent less than 5 business days ago, the payout is currently being processed by the bank. Banks can delay processing due to weekends and holidays. Once the bank finishes processing the payout, the funds will be deposited into the merchant's account automatically.A payout hasn't been initiated. Why is that?A merchant's payout may be delayed for the following reasons:Minimum account balance: The merchant's account balance doesn't meet the minimum payout amount of $5.00.Payout speed: Due to the merchant's payout speed, their funds have not been released.Funding hold: A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant.How do disputes, refunds, and ach returns impact the merchant payout?Disputes, refunds, and ACH returns each affect a merchant's payout differently, as they represent funds being pulled back from a previously processed transaction. Here’s a breakdown of how each impacts the payout amount:Disputes: When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees.Refunds: When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account.ACH Returns: An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account.Fees associated with disputes, refunds, and ACH returns will continue to be collected based on the merchant’s billing schedule.The Payout Details page includes a 'Balance Carried Forward'. What is that?The 'Balance Carried Forward' on the Payout Details page represents any funds from a previous payout cycle that were not included in that payout, often due to timing issues. This can happen for several reasons:Unsettled funds: Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period.Negative balances: If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it. FAQs A payout was initiated but hasn't arrived in the merchant's bank account. Where is it?If the merchant expected a payout and it was sent less than 5 business days ago, the payout is currently being processed by the bank. Banks can delay processing due to weekends and holidays. Once the bank finishes processing the payout, the funds will be deposited into the merchant's account automatically. A payout was initiated but hasn't arrived in the merchant's bank account. Where is it? A payout was initiated but hasn't arrived in the merchant's bank account. Where is it? [https://docs.tilled.com/docs/payouts#faq-a-payout-was-initiated-but-hasnt-arrived-in-the-merchants-bank-account-where-is-it](https://docs.tilled.com/docs/payouts#faq-a-payout-was-initiated-but-hasnt-arrived-in-the-merchants-bank-account-where-is-it) If the merchant expected a payout and it was sent less than 5 business days ago, the payout is currently being processed by the bank. Banks can delay processing due to weekends and holidays. Once the bank finishes processing the payout, the funds will be deposited into the merchant's account automatically. A payout hasn't been initiated. Why is that?A merchant's payout may be delayed for the following reasons:Minimum account balance: The merchant's account balance doesn't meet the minimum payout amount of $5.00.Payout speed: Due to the merchant's payout speed, their funds have not been released.Funding hold: A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant. A payout hasn't been initiated. Why is that? A payout hasn't been initiated. Why is that? [https://docs.tilled.com/docs/payouts#faq-a-payout-hasnt-been-initiated-why-is-that](https://docs.tilled.com/docs/payouts#faq-a-payout-hasnt-been-initiated-why-is-that) A merchant's payout may be delayed for the following reasons:Minimum account balance: The merchant's account balance doesn't meet the minimum payout amount of $5.00.Payout speed: Due to the merchant's payout speed, their funds have not been released.Funding hold: A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant. Minimum account balance: The merchant's account balance doesn't meet the minimum payout amount of $5.00.Payout speed: Due to the merchant's payout speed, their funds have not been released.Funding hold: A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant. Minimum account balance: The merchant's account balance doesn't meet the minimum payout amount of $5.00. Minimum account balance: Payout speed: Due to the merchant's payout speed, their funds have not been released. Payout speed: [payout speed](https://docs.tilled.com/docs/payouts#payout-speed) Funding hold: A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant. Funding hold: How do disputes, refunds, and ach returns impact the merchant payout?Disputes, refunds, and ACH returns each affect a merchant's payout differently, as they represent funds being pulled back from a previously processed transaction. Here’s a breakdown of how each impacts the payout amount:Disputes: When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees.Refunds: When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account.ACH Returns: An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account.Fees associated with disputes, refunds, and ACH returns will continue to be collected based on the merchant’s billing schedule. How do disputes, refunds, and ach returns impact the merchant payout? How do disputes, refunds, and ach returns impact the merchant payout? [https://docs.tilled.com/docs/payouts#faq-how-do-disputes-refunds-and-ach-returns-impact-the-merchant-payout](https://docs.tilled.com/docs/payouts#faq-how-do-disputes-refunds-and-ach-returns-impact-the-merchant-payout) Disputes, refunds, and ACH returns each affect a merchant's payout differently, as they represent funds being pulled back from a previously processed transaction. Here’s a breakdown of how each impacts the payout amount:Disputes: When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees.Refunds: When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account.ACH Returns: An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account.Fees associated with disputes, refunds, and ACH returns will continue to be collected based on the merchant’s billing schedule. Disputes: When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees.Refunds: When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account.ACH Returns: An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account. Disputes: When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees. Disputes: Refunds: When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account. Refunds: ACH Returns: An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account. ACH Returns: The Payout Details page includes a 'Balance Carried Forward'. What is that?The 'Balance Carried Forward' on the Payout Details page represents any funds from a previous payout cycle that were not included in that payout, often due to timing issues. This can happen for several reasons:Unsettled funds: Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period.Negative balances: If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it. The Payout Details page includes a 'Balance Carried Forward'. What is that? The Payout Details page includes a 'Balance Carried Forward'. What is that? [https://docs.tilled.com/docs/payouts#faq-the-payout-details-page-includes-a-balance-carried-forward-what-is-that](https://docs.tilled.com/docs/payouts#faq-the-payout-details-page-includes-a-balance-carried-forward-what-is-that) The 'Balance Carried Forward' on the Payout Details page represents any funds from a previous payout cycle that were not included in that payout, often due to timing issues. This can happen for several reasons:Unsettled funds: Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period.Negative balances: If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it. Unsettled funds: Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period.Negative balances: If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it. Unsettled funds: Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period. Unsettled funds: Negative balances: If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it. Negative balances: Last updated on March 10, 2025 March 10, 2025 BillingDisputes [Billing](https://docs.tilled.com/docs/merchant-billing) [Disputes](https://docs.tilled.com/docs/disputes)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/disputes",
    "title": "Tilled",
    "content": "Disputes Disputes occur when a customer challenges a payment on their credit card statement. A customer may challenge a payment for various reasons: Misunderstanding: Customer may not recognize a transaction due to unclear statement descriptors. Unauthorized charge: Customer may claim the transaction wasn’t authorized. Dissatisfaction: Customer is unhappy with the product or service received. Merchants can manage disputes through the Dashboard. Alternatively, a custom dispute management experience can be built using the DisputesAPI. Dispute Lifecycle Payment processedA purchase or payment is processed on a cardholder’s account.Dispute initiationIf the cardholder does not recognize the transaction or is dissatisfied, they can initiate a dispute through their bank.InvestigationThe bank reviews the dispute and requests information from the merchant to verify the transaction’s validity. The disputed amount is deducted from the merchant’s account balance, along with any associated fees.At this stage the dispute status will update to X days to respond in the Dashboard.Evidence submissionOnce the dispute has been posted to the merchant’s account, the merchant has 9 business days to respond with compelling evidence that supports their case.To submit evidence through the Dashboard: Navigate to Disputes and select the desired dispute Click on Respond to Dispute in the alert banner Upload compelling evidence Click the Submit button Alternatively, dispute evidence can be submitted using the Create Dispute EvidenceAPI endpoint. Once submitted, the dispute status will update to under_review.If evidence is not provided by the evidence due date, the dispute will be automatically accepted and the dispute status will update to deadline missed in the dashboard.ResolutionThe bank evaluates the merchant’s response and supporting evidence before making a final decision. If the dispute is ruled in favor of the merchant, the funds are reversed and the merchant’s account balance is restored. However, if the dispute is upheld, the funds remain debited from the account balance.Depending on the outcome, the dispute status will update to won or lost. Compelling Evidence “Compelling evidence” for disputes includes any documentation that proves a customer authorized the transaction and received the goods or services as agreed. This evidence varies by product and dispute reason but commonly includes: Proof of delivery: This can include shipment tracking information, delivery confirmation, or signed receipts from the customer acknowledging receipt of the goods or services. Customer communication: Any correspondence or communication with the customer that demonstrates their satisfaction with the transaction, such as emails, chat logs, or support tickets. Transaction records: Detailed records of the transaction, including invoices, receipts, order forms, or any other relevant documentation that clearly shows the purchase was authorized and completed by the customer. Product or service descriptions: Descriptions or specifications of the product or service offered, including pricing, features, terms, and conditions, to establish that the customer was aware of what they were purchasing. Contracts or agreements: If applicable, contracts or agreements between the merchant and the customer that outline the terms of the transaction, refund policies, or any other relevant terms and conditions. Proof of identity: In cases where identity verification is crucial, providing evidence that verifies the customer’s identity, such as government-issued identification documents or authentication records. If a single card has multiple disputed payments, the bank will require separate submission packets for each payment. Dispute States The dispute status is updated throughout the dispute lifecycle. You can actively monitor these updates by setting up webhooks or configuring your email preferences to receive real-time notifications about key status changes. Email notifications are sent when action is required from the merchant and upon dispute resolution. DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPSX days to respondwarning_needs_responseCustomer is inquiring about the transaction. This is known as a retrieval or inquiry.Evidence is submitted automatically on behalf of the merchant. Most disputes will skip this status.inquiry under reviewwarning_under_reviewEvidence has been submitted in response to the inquiry.No action needed.inquiry closedwarning_closedIf a chargeback was not opened within 120 days of the inquiry, the inquiry will be closed.No action needed.deadline missedwarning_closedMerchant did not submit evidence in response to the inquiry prior to the evidence due date.No action needed.X days to respondneeds_responseCustomer has officially disputed the transaction. This is known as a chargeback.Merchant needs to submit evidence.under reviewunder_reviewMerchant has submitted evidence in response to the dispute.No action needed.wonwonThe dispute has been won and a reversal was initiated.No action needed.lostlostThe dispute was lost.No action needed.deadline missedclosedMerchant did not submit evidence in response to the dispute prior to the evidence due date.No action needed. Prevent Disputes Merchants can take various steps to protect themselves from disputes: Utilize clear statement descriptors: Ensure statement descriptors are clear and concise to minimize customer confusion and prevent disputes from unrecognized charges. Provide detailed descriptions: Offer comprehensive information on products and services to set accurate expectations and reduce misunderstandings. Resolve customer issues promptly: Address and resolve customer concerns quickly to avoid escalations to dispute filings. Verify AVS and CVV for online transactions: Confirm the cardholder’s presence by verifying the address (AVS) and Card Verification Value (CVV), reducing the risk of fraud-related disputes. By default, AVS and CVV checks must pass to process a payment through Tilled. Define refund policies and Terms of Service clearly: Effectively communicate your policies to help customers understand their options, preventing disputes related to policy misunderstandings. Last updated on October 1, 2024PayoutsReporting Disputes Disputes occur when a customer challenges a payment on their credit card statement. A customer may challenge a payment for various reasons: Misunderstanding: Customer may not recognize a transaction due to unclear statement descriptors. Unauthorized charge: Customer may claim the transaction wasn’t authorized. Dissatisfaction: Customer is unhappy with the product or service received. Misunderstanding: Customer may not recognize a transaction due to unclear statement descriptors. Misunderstanding: Unauthorized charge: Customer may claim the transaction wasn’t authorized. Unauthorized charge: Dissatisfaction: Customer is unhappy with the product or service received. Dissatisfaction: Merchants can manage disputes through the Dashboard. Alternatively, a custom dispute management experience can be built using the DisputesAPI. [DisputesAPI](https://docs.tilled.com/api-reference#tag/disputes) API Dispute Lifecycle [https://docs.tilled.com/docs/disputes#dispute-lifecycle](https://docs.tilled.com/docs/disputes#dispute-lifecycle) Payment processedA purchase or payment is processed on a cardholder’s account.Dispute initiationIf the cardholder does not recognize the transaction or is dissatisfied, they can initiate a dispute through their bank.InvestigationThe bank reviews the dispute and requests information from the merchant to verify the transaction’s validity. The disputed amount is deducted from the merchant’s account balance, along with any associated fees.At this stage the dispute status will update to X days to respond in the Dashboard.Evidence submissionOnce the dispute has been posted to the merchant’s account, the merchant has 9 business days to respond with compelling evidence that supports their case.To submit evidence through the Dashboard: Navigate to Disputes and select the desired dispute Click on Respond to Dispute in the alert banner Upload compelling evidence Click the Submit button Alternatively, dispute evidence can be submitted using the Create Dispute EvidenceAPI endpoint. Once submitted, the dispute status will update to under_review.If evidence is not provided by the evidence due date, the dispute will be automatically accepted and the dispute status will update to deadline missed in the dashboard.ResolutionThe bank evaluates the merchant’s response and supporting evidence before making a final decision. If the dispute is ruled in favor of the merchant, the funds are reversed and the merchant’s account balance is restored. However, if the dispute is upheld, the funds remain debited from the account balance.Depending on the outcome, the dispute status will update to won or lost. Payment processed [https://docs.tilled.com/docs/disputes#payment-processed](https://docs.tilled.com/docs/disputes#payment-processed) A purchase or payment is processed on a cardholder’s account. Dispute initiation [https://docs.tilled.com/docs/disputes#dispute-initiation](https://docs.tilled.com/docs/disputes#dispute-initiation) If the cardholder does not recognize the transaction or is dissatisfied, they can initiate a dispute through their bank. Investigation [https://docs.tilled.com/docs/disputes#investigation](https://docs.tilled.com/docs/disputes#investigation) The bank reviews the dispute and requests information from the merchant to verify the transaction’s validity. The disputed amount is deducted from the merchant’s account balance, along with any associated fees. At this stage the dispute status will update to X days to respond in the Dashboard. X days to respond Evidence submission [https://docs.tilled.com/docs/disputes#evidence-submission](https://docs.tilled.com/docs/disputes#evidence-submission) Once the dispute has been posted to the merchant’s account, the merchant has 9 business days to respond with compelling evidence that supports their case. [compelling evidence](https://docs.tilled.com/docs/disputes#compelling-evidence) To submit evidence through the Dashboard: Navigate to Disputes and select the desired dispute Click on Respond to Dispute in the alert banner Upload compelling evidence Click the Submit button Navigate to Disputes and select the desired dispute Disputes Click on Respond to Dispute in the alert banner Respond to Dispute Upload compelling evidence Click the Submit button Submit Alternatively, dispute evidence can be submitted using the Create Dispute EvidenceAPI endpoint. Once submitted, the dispute status will update to under_review. [Create Dispute EvidenceAPI](https://docs.tilled.com/api-reference#tag/disputes/post/v1/disputes/%7Bid%7D) API under_review If evidence is not provided by the evidence due date, the dispute will be automatically accepted and the dispute status will update to deadline missed in the dashboard. deadline missed Resolution [https://docs.tilled.com/docs/disputes#resolution](https://docs.tilled.com/docs/disputes#resolution) The bank evaluates the merchant’s response and supporting evidence before making a final decision. If the dispute is ruled in favor of the merchant, the funds are reversed and the merchant’s account balance is restored. However, if the dispute is upheld, the funds remain debited from the account balance. Depending on the outcome, the dispute status will update to won or lost. won lost Compelling Evidence [https://docs.tilled.com/docs/disputes#compelling-evidence](https://docs.tilled.com/docs/disputes#compelling-evidence) “Compelling evidence” for disputes includes any documentation that proves a customer authorized the transaction and received the goods or services as agreed. This evidence varies by product and dispute reason but commonly includes: Proof of delivery: This can include shipment tracking information, delivery confirmation, or signed receipts from the customer acknowledging receipt of the goods or services. Customer communication: Any correspondence or communication with the customer that demonstrates their satisfaction with the transaction, such as emails, chat logs, or support tickets. Transaction records: Detailed records of the transaction, including invoices, receipts, order forms, or any other relevant documentation that clearly shows the purchase was authorized and completed by the customer. Product or service descriptions: Descriptions or specifications of the product or service offered, including pricing, features, terms, and conditions, to establish that the customer was aware of what they were purchasing. Contracts or agreements: If applicable, contracts or agreements between the merchant and the customer that outline the terms of the transaction, refund policies, or any other relevant terms and conditions. Proof of identity: In cases where identity verification is crucial, providing evidence that verifies the customer’s identity, such as government-issued identification documents or authentication records. Proof of delivery: This can include shipment tracking information, delivery confirmation, or signed receipts from the customer acknowledging receipt of the goods or services. Proof of delivery: Customer communication: Any correspondence or communication with the customer that demonstrates their satisfaction with the transaction, such as emails, chat logs, or support tickets. Customer communication: Transaction records: Detailed records of the transaction, including invoices, receipts, order forms, or any other relevant documentation that clearly shows the purchase was authorized and completed by the customer. Transaction records: Product or service descriptions: Descriptions or specifications of the product or service offered, including pricing, features, terms, and conditions, to establish that the customer was aware of what they were purchasing. Product or service descriptions: Contracts or agreements: If applicable, contracts or agreements between the merchant and the customer that outline the terms of the transaction, refund policies, or any other relevant terms and conditions. Contracts or agreements: Proof of identity: In cases where identity verification is crucial, providing evidence that verifies the customer’s identity, such as government-issued identification documents or authentication records. Proof of identity: If a single card has multiple disputed payments, the bank will require separate submission packets for each payment. Dispute States [https://docs.tilled.com/docs/disputes#dispute-states](https://docs.tilled.com/docs/disputes#dispute-states) The dispute status is updated throughout the dispute lifecycle. You can actively monitor these updates by setting up webhooks or configuring your email preferences to receive real-time notifications about key status changes. Email notifications are sent when action is required from the merchant and upon dispute resolution. DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPSX days to respondwarning_needs_responseCustomer is inquiring about the transaction. This is known as a retrieval or inquiry.Evidence is submitted automatically on behalf of the merchant. Most disputes will skip this status.inquiry under reviewwarning_under_reviewEvidence has been submitted in response to the inquiry.No action needed.inquiry closedwarning_closedIf a chargeback was not opened within 120 days of the inquiry, the inquiry will be closed.No action needed.deadline missedwarning_closedMerchant did not submit evidence in response to the inquiry prior to the evidence due date.No action needed.X days to respondneeds_responseCustomer has officially disputed the transaction. This is known as a chargeback.Merchant needs to submit evidence.under reviewunder_reviewMerchant has submitted evidence in response to the dispute.No action needed.wonwonThe dispute has been won and a reversal was initiated.No action needed.lostlostThe dispute was lost.No action needed.deadline missedclosedMerchant did not submit evidence in response to the dispute prior to the evidence due date.No action needed. DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPS DASHBOARD STATUSAPI STATUSDESCRIPTIONNEXT STEPS DASHBOARD STATUS DASHBOARD STATUS API STATUS API STATUS DESCRIPTION DESCRIPTION NEXT STEPS NEXT STEPS X days to respondwarning_needs_responseCustomer is inquiring about the transaction. This is known as a retrieval or inquiry.Evidence is submitted automatically on behalf of the merchant. Most disputes will skip this status.inquiry under reviewwarning_under_reviewEvidence has been submitted in response to the inquiry.No action needed.inquiry closedwarning_closedIf a chargeback was not opened within 120 days of the inquiry, the inquiry will be closed.No action needed.deadline missedwarning_closedMerchant did not submit evidence in response to the inquiry prior to the evidence due date.No action needed.X days to respondneeds_responseCustomer has officially disputed the transaction. This is known as a chargeback.Merchant needs to submit evidence.under reviewunder_reviewMerchant has submitted evidence in response to the dispute.No action needed.wonwonThe dispute has been won and a reversal was initiated.No action needed.lostlostThe dispute was lost.No action needed.deadline missedclosedMerchant did not submit evidence in response to the dispute prior to the evidence due date.No action needed. X days to respondwarning_needs_responseCustomer is inquiring about the transaction. This is known as a retrieval or inquiry.Evidence is submitted automatically on behalf of the merchant. Most disputes will skip this status. X days to respond X days to respond warning_needs_response warning_needs_response Customer is inquiring about the transaction. This is known as a retrieval or inquiry. Evidence is submitted automatically on behalf of the merchant. Most disputes will skip this status. inquiry under reviewwarning_under_reviewEvidence has been submitted in response to the inquiry.No action needed. inquiry under review inquiry under review warning_under_review warning_under_review Evidence has been submitted in response to the inquiry. No action needed. inquiry closedwarning_closedIf a chargeback was not opened within 120 days of the inquiry, the inquiry will be closed.No action needed. inquiry closed inquiry closed warning_closed warning_closed If a chargeback was not opened within 120 days of the inquiry, the inquiry will be closed. No action needed. deadline missedwarning_closedMerchant did not submit evidence in response to the inquiry prior to the evidence due date.No action needed. deadline missed deadline missed warning_closed warning_closed Merchant did not submit evidence in response to the inquiry prior to the evidence due date. No action needed. X days to respondneeds_responseCustomer has officially disputed the transaction. This is known as a chargeback.Merchant needs to submit evidence. X days to respond X days to respond needs_response needs_response Customer has officially disputed the transaction. This is known as a chargeback. Merchant needs to submit evidence. under reviewunder_reviewMerchant has submitted evidence in response to the dispute.No action needed. under review under review under_review under_review Merchant has submitted evidence in response to the dispute. No action needed. wonwonThe dispute has been won and a reversal was initiated.No action needed. won won won won The dispute has been won and a reversal was initiated. No action needed. lostlostThe dispute was lost.No action needed. lost lost lost lost The dispute was lost. No action needed. deadline missedclosedMerchant did not submit evidence in response to the dispute prior to the evidence due date.No action needed. deadline missed deadline missed closed closed Merchant did not submit evidence in response to the dispute prior to the evidence due date. No action needed. Prevent Disputes [https://docs.tilled.com/docs/disputes#prevent-disputes](https://docs.tilled.com/docs/disputes#prevent-disputes) Merchants can take various steps to protect themselves from disputes: Utilize clear statement descriptors: Ensure statement descriptors are clear and concise to minimize customer confusion and prevent disputes from unrecognized charges. Provide detailed descriptions: Offer comprehensive information on products and services to set accurate expectations and reduce misunderstandings. Resolve customer issues promptly: Address and resolve customer concerns quickly to avoid escalations to dispute filings. Verify AVS and CVV for online transactions: Confirm the cardholder’s presence by verifying the address (AVS) and Card Verification Value (CVV), reducing the risk of fraud-related disputes. By default, AVS and CVV checks must pass to process a payment through Tilled. Define refund policies and Terms of Service clearly: Effectively communicate your policies to help customers understand their options, preventing disputes related to policy misunderstandings. Utilize clear statement descriptors: Ensure statement descriptors are clear and concise to minimize customer confusion and prevent disputes from unrecognized charges. Utilize clear statement descriptors: Provide detailed descriptions: Offer comprehensive information on products and services to set accurate expectations and reduce misunderstandings. Provide detailed descriptions: Resolve customer issues promptly: Address and resolve customer concerns quickly to avoid escalations to dispute filings. Resolve customer issues promptly: Verify AVS and CVV for online transactions: Confirm the cardholder’s presence by verifying the address (AVS) and Card Verification Value (CVV), reducing the risk of fraud-related disputes. By default, AVS and CVV checks must pass to process a payment through Tilled. Verify AVS and CVV for online transactions: Tilled Define refund policies and Terms of Service clearly: Effectively communicate your policies to help customers understand their options, preventing disputes related to policy misunderstandings. Define refund policies and Terms of Service clearly: Last updated on October 1, 2024 October 1, 2024 PayoutsReporting [Payouts](https://docs.tilled.com/docs/payouts) [Reporting](https://docs.tilled.com/docs/reporting)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/reporting",
    "title": "Tilled",
    "content": "Reporting Tilled's preconfigured reports help you manage business operations and reconcile account activity. Use the table below to identify the most suitable report for your specific task. TASKSUGGESTED REPORTView payment activityAnalyze payment failuresPaymentsView all fees applied to the merchant accountView fees that have not yet been billedMerchant FeesReconcile a payoutView details for multiple payoutsView merchant fees billedPayoutsView dispute activityAnalyze dispute win ratesDisputesView summary of a merchant's processing activityCompare processing activity across merchantsProcessing SummaryAnalyze interchange costsOptimize merchant pricingInterchange Details Generate a Report DashboardAPITo download a preconfigured report via the Dashboard:Navigate to the Reports pageLocate the report you wish to download and click the Generate Report buttonApply report filters and click the Generate Report buttonClick the Download icon once the report has completed downloadingReport customizationReports can be filtered by account, timezone, and date range. Column selection options are also available for certain reports.Account filterReports can be downloaded for a single account or across your entire portfolio.Timezone filter - coming soonReports downloaded through the Dashboard default to the user's local timezone. Soon, users will have the ability to adjust the timezone to Pacific, Mountain, Central, or Eastern time.Date range filterReports can be filtered on predefined date ranges or a custom date selection. The selected dates are inclusive. For example, selecting a date range of January 1, 2025 – January 31, 2025 will include data from 12:00 a.m. on January 1 through 11:59 p.m. on January 31 in the respective time zone.Custom columns - coming soonUsers can customize the columns in the Payments and Payout Details reports. Available options include default columns, all columns, or custom columns. If custom columns are selected, users can choose which data to include in the report. Selected columns will be saved and automatically applied the next time the report is downloaded. Report Details Payments report ℹ️The report details below reflect upcoming changes to Tilled's downloadable Payments report, expected to be released in April 2025. The Payments report is useful for tracking payment activity and analyzing payment failures. If generating via the Create a Report RunAPI endpoint, set type = payments_summary_2. Default columns FIELDDETAILSmerchant_account_idUnique merchant account idmerchantMerchant nametransaction_dateDate transaction was processedtransaction_typeType of transaction, such as a charge or refundpayment_methodPayment method used for the transactiontransaction_idUnique charge or refund idtransaction_statusStatus of the charge or refundfailure_codeFailure code, if payment failedfailure_descriptionFailure description, if payment failedauthorizedAmount authorizedcapturedAmount capturedfeesTotal amount of associated feesnetNet amount of the payment; net = captured minus fees plus tips*related_charge_idRelated charge id, if payment was a refundpayout_idUnique payout idpayout_dateDate payout was initiated *Accounts processing in-person payments can include the tip amount when customizing report columns. Payout Details report ℹ️The report details below reflect upcoming changes to Tilled's downloadable Payout Details report, expected to be released in March 2025. The Payout Details report is useful for reconciling individual transactions within a payout. If generating via the Create a Report RunAPI endpoint, set type = payouts_detail_1. Default columns FIELDDESCRIPTIONmerchant_account_idUnique merchant account idmerchantMerchant namepayout_dateDate payout was initiatedpayout_idUnique payout idtransaction_dateDate transaction was processedpayment_methodPayment method associated with the transactionsource_idUnique source idtransaction_typeType of transaction, such as a charge, refund, dispute, or adjustmentdescriptionDetailed description of the transactiongrossGross amount of the transactionfeesTotal fees withdrawn from the payout that are associated with the transactionnetNet amount of the transaction; net = gross minus fees Payout Summary report ℹ️The report details below reflect Tilled's new downloadable Payout Summary report, expected to be released in March 2025. The Payout Summary report is useful for tracking payout activity and reconciling bank deposits. If generating via the Create a Report RunAPI endpoint, set type = payouts_summary_3. Available columns FIELDDESCRIPTIONmerchant_account_idUnique merchant account idmerchantMerchant namepayout_dateDate payout was initiatedpayout_idUnique payout idgrossSum of all transactions associated with the payout, include charges, refunds, disputes, and adjustmentsfeesTotal fees withdrawn from the payoutnetPayout amount deposited or withdrawn from the merchant's bank account; net = gross minus fees Merchant Fees report The Merchant Fees report is useful for tracking posted fees, analyzing total processing costs, and understanding the amount due in the merchant’s next billing cycle. If generating via the Create a Report RunAPI endpoint, set type = fees_summary_1. FIELDDESCRIPTIONmerchant_nameMerchant nameaccount_idUnique merchant account idbalance_transaction_idUnique balance transaction idbalance_transaction_created_atDate the fee was createdsource_idUnique id of fee source, such as the charge or refund idsource_typeSource of balance transaction, such as the charge or refundpayout_idUnique payout idamountAmount of the feedescriptionFee descriptionfee_typeFee type, such as discount, transaction, or pass-throughfee_subtypeFee subtype, such as the pass-through fee typepayment_method_typePayment method used for the transactioncard_brandCard brand, if applicablepayment_intent_idUnique id of the payment intentcharge_amount_capturedAmount captured Interchange Details report ℹ️The report details below reflect upcoming changes to Tilled's downloadable Interchange Details report, expected to be released in March 2025. The Interchange Details report is useful for analyzing interchange costs and identifying factors that impact interchange qualification. If generating via the Create a Report RunAPI endpoint, set type = interchange_detail_2. Factors impacting interchange costs Payment method: Online payments generally have higher interchange costs than in-person payments. Funding type: Credit cards typically cost more to process than debit cards. Card type: Consumer and international cards often incur higher rates than business or commercial cards. Settlement time: Transactions settled more than two days after authorization may result in higher costs. Level 2/3 data: Payments missing level 2/3 data qualify only for level 1 rates. AVS/CVV data: Incorrect or missing avs/cvv data can lead to higher interchange fees. Merchant category code: Certain MCCs are subject to higher interchange rates. Available columns FIELDDESCRIPTIONsoftware_platformSoftware platform namemerchantMerchant namemerchant_account_idUnique merchant account idmccMerchant category codeprocessorProcessor through which payment was routedtransaction_idUnique charge or refund idtransaction_typeType of transactionpayment_methodPayment method type, such as online or in-persontransaction_dateDate transaction was processedsettlement_dateDate transaction settledfunding_typeCard funding type, such as debit or creditcard_brandCard brandcard_binCard BINinterchange_programInterchange programavs_address_checkResults of the AVS address checkavs_zip_checkResults of the AVS zip code checkcvvResults of the CVV/CVC checklevel_2_3Level 2/3 details, if providedinterchange_discount_rateInterchange discount rate; the rate does not include any markupsinterchange_transaction_feeInterchange transaction fee; the amount does not include any markupstransaction_amountAmount of the charge or refund Processing Summary report The Processing Summary report is useful for comparing processing activity across merchants. If generating via the Create a Report RunAPI endpoint, set type = processing_summary_1. FIELDDETAILSmerchant_nameMerchant nameaccount_idUnique merchant account IDstart_atStart date of the selected time periodend_atEnd date of the selected time periodsucceeded_charge_volumeVolume of successful chargessucceeded_charge_countNumber of successful chargesfailed_charge_volumeVolume of failed chargesfailed_charge_countNumber of failed chargessucceeded_refund_volumeVolume of successful refundssucceeded_refund_countNumber of successful refundswon_dispute_volumeVolume of disputes, where dispute was ruled in favor of the merchantwon_dispute_countNumber of disputes, where dispute was ruled in favor of the merchantlost_dispute_volumeVolume of disputes, where dispute was ruled in favor of the cardholderlost_dispute_countNumber of disputes, where dispute was ruled in favor of the cardholdertotal_dispute_volumeTotal volume of disputestotal_dispute_countTotal number of disputescharge_fee_volumeVolume of charge-related feesrefund_fee_volumeVolume of refund-related feesdispute_fee_volumeVolume of dispute-related feesadministrative_fee_volumeVolume of administrative-related fees Disputes report The Disputes report is useful for analyzing dispute activity, including dispute reasons. If generating via the Create a Report RunAPI endpoint, set type = disputes_summary_1. FIELDDETAILSaccount_idUnique merchant account idmerchant_nameMerchant namedispute_idUnique dispute idcreated_atDate dispute was createdcurrencyCurrency of the original paymentdispute_amountAmount being disputed by the cardholderreason_descriptionReason for the dispute, as provided by the cardholderstatusStatus of the dispute when the report is generatedclosing_atDeadline to submit evidence in response to the disputereversed_atDate dispute was reversed, if applicablecharge_idUnique id of the original paymentcharge_amount_capturedAmount of the original paymentcharge_refundedWhether the payment was refundedamount_refundedAmount of the refund, if payment was refunded FAQsHow do I reconcile a merchant payout?Payouts can be reconciled directly in the Dashboard or using a CSV report.Reconcile using the DashboardNavigate to the Payouts pageSelect the payout you want to reconcileReview transactions associated with the payoutReconcile using a CSV reportGenerate a Payout reportOpen the CSV file (assuming you are using Excel for the following steps)Select the Custom Sort optionSort by payout ID, followed by source IDReview transactions associated with the payoutAre commission reports available in the Dashboard?Commission reports are not currently available in the Dashboard. For more details, refer to our Commissions guide.How do I determine whether a payment has been batched?The batch status is not currently exposed in the Dashboard or API. To determine the batch status manually, you can compare the captured_at property of a charge with the most recent batch time.const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime;How do I retrieve all transactions associated with a single payout via the API?To retrieve all transactions associated with a single payout, use the List all Balance TransactionsAPI endpoint and pass the payout_id in the query parameters.Last updated on March 10, 2025DisputesCommissions Reporting Tilled's preconfigured reports help you manage business operations and reconcile account activity. Use the table below to identify the most suitable report for your specific task. Tilled's TASKSUGGESTED REPORTView payment activityAnalyze payment failuresPaymentsView all fees applied to the merchant accountView fees that have not yet been billedMerchant FeesReconcile a payoutView details for multiple payoutsView merchant fees billedPayoutsView dispute activityAnalyze dispute win ratesDisputesView summary of a merchant's processing activityCompare processing activity across merchantsProcessing SummaryAnalyze interchange costsOptimize merchant pricingInterchange Details TASKSUGGESTED REPORT TASKSUGGESTED REPORT TASK TASK SUGGESTED REPORT SUGGESTED REPORT View payment activityAnalyze payment failuresPaymentsView all fees applied to the merchant accountView fees that have not yet been billedMerchant FeesReconcile a payoutView details for multiple payoutsView merchant fees billedPayoutsView dispute activityAnalyze dispute win ratesDisputesView summary of a merchant's processing activityCompare processing activity across merchantsProcessing SummaryAnalyze interchange costsOptimize merchant pricingInterchange Details View payment activityAnalyze payment failuresPayments View payment activityAnalyze payment failures View payment activityAnalyze payment failures View payment activity Analyze payment failures Payments View all fees applied to the merchant accountView fees that have not yet been billedMerchant Fees View all fees applied to the merchant accountView fees that have not yet been billed View all fees applied to the merchant accountView fees that have not yet been billed View all fees applied to the merchant account View fees that have not yet been billed Merchant Fees Reconcile a payoutView details for multiple payoutsView merchant fees billedPayouts Reconcile a payoutView details for multiple payoutsView merchant fees billed Reconcile a payoutView details for multiple payoutsView merchant fees billed Reconcile a payout View details for multiple payouts View merchant fees billed Payouts View dispute activityAnalyze dispute win ratesDisputes View dispute activityAnalyze dispute win rates View dispute activityAnalyze dispute win rates View dispute activity Analyze dispute win rates Disputes View summary of a merchant's processing activityCompare processing activity across merchantsProcessing Summary View summary of a merchant's processing activityCompare processing activity across merchants View summary of a merchant's processing activityCompare processing activity across merchants View summary of a merchant's processing activity Compare processing activity across merchants Processing Summary Analyze interchange costsOptimize merchant pricingInterchange Details Analyze interchange costsOptimize merchant pricing Analyze interchange costsOptimize merchant pricing Analyze interchange costs Optimize merchant pricing Interchange Details Generate a Report [https://docs.tilled.com/docs/reporting#generate-a-report](https://docs.tilled.com/docs/reporting#generate-a-report) DashboardAPITo download a preconfigured report via the Dashboard:Navigate to the Reports pageLocate the report you wish to download and click the Generate Report buttonApply report filters and click the Generate Report buttonClick the Download icon once the report has completed downloadingReport customizationReports can be filtered by account, timezone, and date range. Column selection options are also available for certain reports.Account filterReports can be downloaded for a single account or across your entire portfolio.Timezone filter - coming soonReports downloaded through the Dashboard default to the user's local timezone. Soon, users will have the ability to adjust the timezone to Pacific, Mountain, Central, or Eastern time.Date range filterReports can be filtered on predefined date ranges or a custom date selection. The selected dates are inclusive. For example, selecting a date range of January 1, 2025 – January 31, 2025 will include data from 12:00 a.m. on January 1 through 11:59 p.m. on January 31 in the respective time zone.Custom columns - coming soonUsers can customize the columns in the Payments and Payout Details reports. Available options include default columns, all columns, or custom columns. If custom columns are selected, users can choose which data to include in the report. Selected columns will be saved and automatically applied the next time the report is downloaded. DashboardAPI [Dashboard](https://docs.tilled.com/docs/reporting#dashboard) [API](https://docs.tilled.com/docs/reporting#api) To download a preconfigured report via the Dashboard:Navigate to the Reports pageLocate the report you wish to download and click the Generate Report buttonApply report filters and click the Generate Report buttonClick the Download icon once the report has completed downloadingReport customizationReports can be filtered by account, timezone, and date range. Column selection options are also available for certain reports.Account filterReports can be downloaded for a single account or across your entire portfolio.Timezone filter - coming soonReports downloaded through the Dashboard default to the user's local timezone. Soon, users will have the ability to adjust the timezone to Pacific, Mountain, Central, or Eastern time.Date range filterReports can be filtered on predefined date ranges or a custom date selection. The selected dates are inclusive. For example, selecting a date range of January 1, 2025 – January 31, 2025 will include data from 12:00 a.m. on January 1 through 11:59 p.m. on January 31 in the respective time zone.Custom columns - coming soonUsers can customize the columns in the Payments and Payout Details reports. Available options include default columns, all columns, or custom columns. If custom columns are selected, users can choose which data to include in the report. Selected columns will be saved and automatically applied the next time the report is downloaded. To download a preconfigured report via the Dashboard: Navigate to the Reports pageLocate the report you wish to download and click the Generate Report buttonApply report filters and click the Generate Report buttonClick the Download icon once the report has completed downloading Navigate to the Reports page Reports Locate the report you wish to download and click the Generate Report button Generate Report Apply report filters and click the Generate Report button Generate Report Click the Download icon once the report has completed downloading Download Report customization Reports can be filtered by account, timezone, and date range. Column selection options are also available for certain reports. Account filter Account filter Reports can be downloaded for a single account or across your entire portfolio. Timezone filter - coming soon Timezone filter coming soon Reports downloaded through the Dashboard default to the user's local timezone. Soon, users will have the ability to adjust the timezone to Pacific, Mountain, Central, or Eastern time. Date range filter Date range filter Reports can be filtered on predefined date ranges or a custom date selection. The selected dates are inclusive. For example, selecting a date range of January 1, 2025 – January 31, 2025 will include data from 12:00 a.m. on January 1 through 11:59 p.m. on January 31 in the respective time zone. Custom columns - coming soon Custom columns coming soon Users can customize the columns in the Payments and Payout Details reports. Available options include default columns, all columns, or custom columns. If custom columns are selected, users can choose which data to include in the report. Selected columns will be saved and automatically applied the next time the report is downloaded. Report Details [https://docs.tilled.com/docs/reporting#report-details](https://docs.tilled.com/docs/reporting#report-details) Payments report [https://docs.tilled.com/docs/reporting#payments-report](https://docs.tilled.com/docs/reporting#payments-report) ℹ️The report details below reflect upcoming changes to Tilled's downloadable Payments report, expected to be released in April 2025. ℹ️ The report details below reflect upcoming changes to Tilled's downloadable Payments report, expected to be released in April 2025. The report details below reflect upcoming changes to Tilled's downloadable Payments report, expected to be released in April 2025. The report details below reflect upcoming changes to Tilled's downloadable Payments report, expected to be released in April 2025. Tilled's The Payments report is useful for tracking payment activity and analyzing payment failures. If generating via the Create a Report RunAPI endpoint, set type = payments_summary_2. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type payments_summary_2 Default columns Default columns FIELDDETAILSmerchant_account_idUnique merchant account idmerchantMerchant nametransaction_dateDate transaction was processedtransaction_typeType of transaction, such as a charge or refundpayment_methodPayment method used for the transactiontransaction_idUnique charge or refund idtransaction_statusStatus of the charge or refundfailure_codeFailure code, if payment failedfailure_descriptionFailure description, if payment failedauthorizedAmount authorizedcapturedAmount capturedfeesTotal amount of associated feesnetNet amount of the payment; net = captured minus fees plus tips*related_charge_idRelated charge id, if payment was a refundpayout_idUnique payout idpayout_dateDate payout was initiated FIELDDETAILS FIELDDETAILS FIELD FIELD DETAILS DETAILS merchant_account_idUnique merchant account idmerchantMerchant nametransaction_dateDate transaction was processedtransaction_typeType of transaction, such as a charge or refundpayment_methodPayment method used for the transactiontransaction_idUnique charge or refund idtransaction_statusStatus of the charge or refundfailure_codeFailure code, if payment failedfailure_descriptionFailure description, if payment failedauthorizedAmount authorizedcapturedAmount capturedfeesTotal amount of associated feesnetNet amount of the payment; net = captured minus fees plus tips*related_charge_idRelated charge id, if payment was a refundpayout_idUnique payout idpayout_dateDate payout was initiated merchant_account_idUnique merchant account id merchant_account_id merchant_account_id Unique merchant account id merchantMerchant name merchant merchant Merchant name transaction_dateDate transaction was processed transaction_date transaction_date Date transaction was processed transaction_typeType of transaction, such as a charge or refund transaction_type transaction_type Type of transaction, such as a charge or refund payment_methodPayment method used for the transaction payment_method payment_method Payment method used for the transaction transaction_idUnique charge or refund id transaction_id transaction_id Unique charge or refund id transaction_statusStatus of the charge or refund transaction_status transaction_status Status of the charge or refund failure_codeFailure code, if payment failed failure_code failure_code Failure code, if payment failed failure_descriptionFailure description, if payment failed failure_description failure_description Failure description, if payment failed authorizedAmount authorized authorized authorized Amount authorized capturedAmount captured captured captured Amount captured feesTotal amount of associated fees fees fees Total amount of associated fees netNet amount of the payment; net = captured minus fees plus tips* net net Net amount of the payment; net = captured minus fees plus tips* net captured fees tips related_charge_idRelated charge id, if payment was a refund related_charge_id related_charge_id Related charge id, if payment was a refund payout_idUnique payout id payout_id payout_id Unique payout id payout_dateDate payout was initiated payout_date payout_date Date payout was initiated *Accounts processing in-person payments can include the tip amount when customizing report columns. Payout Details report [https://docs.tilled.com/docs/reporting#payout-details-report](https://docs.tilled.com/docs/reporting#payout-details-report) ℹ️The report details below reflect upcoming changes to Tilled's downloadable Payout Details report, expected to be released in March 2025. ℹ️ The report details below reflect upcoming changes to Tilled's downloadable Payout Details report, expected to be released in March 2025. The report details below reflect upcoming changes to Tilled's downloadable Payout Details report, expected to be released in March 2025. The report details below reflect upcoming changes to Tilled's downloadable Payout Details report, expected to be released in March 2025. Tilled's The Payout Details report is useful for reconciling individual transactions within a payout. If generating via the Create a Report RunAPI endpoint, set type = payouts_detail_1. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type payouts_detail_1 Default columns Default columns FIELDDESCRIPTIONmerchant_account_idUnique merchant account idmerchantMerchant namepayout_dateDate payout was initiatedpayout_idUnique payout idtransaction_dateDate transaction was processedpayment_methodPayment method associated with the transactionsource_idUnique source idtransaction_typeType of transaction, such as a charge, refund, dispute, or adjustmentdescriptionDetailed description of the transactiongrossGross amount of the transactionfeesTotal fees withdrawn from the payout that are associated with the transactionnetNet amount of the transaction; net = gross minus fees FIELDDESCRIPTION FIELDDESCRIPTION FIELD FIELD DESCRIPTION DESCRIPTION merchant_account_idUnique merchant account idmerchantMerchant namepayout_dateDate payout was initiatedpayout_idUnique payout idtransaction_dateDate transaction was processedpayment_methodPayment method associated with the transactionsource_idUnique source idtransaction_typeType of transaction, such as a charge, refund, dispute, or adjustmentdescriptionDetailed description of the transactiongrossGross amount of the transactionfeesTotal fees withdrawn from the payout that are associated with the transactionnetNet amount of the transaction; net = gross minus fees merchant_account_idUnique merchant account id merchant_account_id merchant_account_id Unique merchant account id merchantMerchant name merchant merchant Merchant name payout_dateDate payout was initiated payout_date payout_date Date payout was initiated payout_idUnique payout id payout_id payout_id Unique payout id transaction_dateDate transaction was processed transaction_date transaction_date Date transaction was processed payment_methodPayment method associated with the transaction payment_method payment_method Payment method associated with the transaction source_idUnique source id source_id source_id Unique source id transaction_typeType of transaction, such as a charge, refund, dispute, or adjustment transaction_type transaction_type Type of transaction, such as a charge, refund, dispute, or adjustment descriptionDetailed description of the transaction description description Detailed description of the transaction grossGross amount of the transaction gross gross Gross amount of the transaction feesTotal fees withdrawn from the payout that are associated with the transaction fees fees Total fees withdrawn from the payout that are associated with the transaction netNet amount of the transaction; net = gross minus fees net net Net amount of the transaction; net = gross minus fees net gross fees Payout Summary report [https://docs.tilled.com/docs/reporting#payout-summary-report](https://docs.tilled.com/docs/reporting#payout-summary-report) ℹ️The report details below reflect Tilled's new downloadable Payout Summary report, expected to be released in March 2025. ℹ️ The report details below reflect Tilled's new downloadable Payout Summary report, expected to be released in March 2025. The report details below reflect Tilled's new downloadable Payout Summary report, expected to be released in March 2025. The report details below reflect Tilled's new downloadable Payout Summary report, expected to be released in March 2025. Tilled's The Payout Summary report is useful for tracking payout activity and reconciling bank deposits. If generating via the Create a Report RunAPI endpoint, set type = payouts_summary_3. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type payouts_summary_3 Available columns Available columns FIELDDESCRIPTIONmerchant_account_idUnique merchant account idmerchantMerchant namepayout_dateDate payout was initiatedpayout_idUnique payout idgrossSum of all transactions associated with the payout, include charges, refunds, disputes, and adjustmentsfeesTotal fees withdrawn from the payoutnetPayout amount deposited or withdrawn from the merchant's bank account; net = gross minus fees FIELDDESCRIPTION FIELDDESCRIPTION FIELD FIELD DESCRIPTION DESCRIPTION merchant_account_idUnique merchant account idmerchantMerchant namepayout_dateDate payout was initiatedpayout_idUnique payout idgrossSum of all transactions associated with the payout, include charges, refunds, disputes, and adjustmentsfeesTotal fees withdrawn from the payoutnetPayout amount deposited or withdrawn from the merchant's bank account; net = gross minus fees merchant_account_idUnique merchant account id merchant_account_id merchant_account_id Unique merchant account id merchantMerchant name merchant merchant Merchant name payout_dateDate payout was initiated payout_date payout_date Date payout was initiated payout_idUnique payout id payout_id payout_id Unique payout id grossSum of all transactions associated with the payout, include charges, refunds, disputes, and adjustments gross gross Sum of all transactions associated with the payout, include charges, refunds, disputes, and adjustments feesTotal fees withdrawn from the payout fees fees Total fees withdrawn from the payout netPayout amount deposited or withdrawn from the merchant's bank account; net = gross minus fees net net Payout amount deposited or withdrawn from the merchant's bank account; net = gross minus fees net gross fees Merchant Fees report [https://docs.tilled.com/docs/reporting#merchant-fees-report](https://docs.tilled.com/docs/reporting#merchant-fees-report) The Merchant Fees report is useful for tracking posted fees, analyzing total processing costs, and understanding the amount due in the merchant’s next billing cycle. If generating via the Create a Report RunAPI endpoint, set type = fees_summary_1. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type fees_summary_1 FIELDDESCRIPTIONmerchant_nameMerchant nameaccount_idUnique merchant account idbalance_transaction_idUnique balance transaction idbalance_transaction_created_atDate the fee was createdsource_idUnique id of fee source, such as the charge or refund idsource_typeSource of balance transaction, such as the charge or refundpayout_idUnique payout idamountAmount of the feedescriptionFee descriptionfee_typeFee type, such as discount, transaction, or pass-throughfee_subtypeFee subtype, such as the pass-through fee typepayment_method_typePayment method used for the transactioncard_brandCard brand, if applicablepayment_intent_idUnique id of the payment intentcharge_amount_capturedAmount captured FIELDDESCRIPTION FIELDDESCRIPTION FIELD FIELD DESCRIPTION DESCRIPTION merchant_nameMerchant nameaccount_idUnique merchant account idbalance_transaction_idUnique balance transaction idbalance_transaction_created_atDate the fee was createdsource_idUnique id of fee source, such as the charge or refund idsource_typeSource of balance transaction, such as the charge or refundpayout_idUnique payout idamountAmount of the feedescriptionFee descriptionfee_typeFee type, such as discount, transaction, or pass-throughfee_subtypeFee subtype, such as the pass-through fee typepayment_method_typePayment method used for the transactioncard_brandCard brand, if applicablepayment_intent_idUnique id of the payment intentcharge_amount_capturedAmount captured merchant_nameMerchant name merchant_name merchant_name Merchant name account_idUnique merchant account id account_id account_id Unique merchant account id balance_transaction_idUnique balance transaction id balance_transaction_id balance_transaction_id Unique balance transaction id balance_transaction_created_atDate the fee was created balance_transaction_created_at balance_transaction_created_at Date the fee was created source_idUnique id of fee source, such as the charge or refund id source_id source_id Unique id of fee source, such as the charge or refund id source_typeSource of balance transaction, such as the charge or refund source_type source_type Source of balance transaction, such as the charge or refund payout_idUnique payout id payout_id payout_id Unique payout id amountAmount of the fee amount amount Amount of the fee descriptionFee description description description Fee description fee_typeFee type, such as discount, transaction, or pass-through fee_type fee_type Fee type, such as discount, transaction, or pass-through fee_subtypeFee subtype, such as the pass-through fee type fee_subtype fee_subtype Fee subtype, such as the pass-through fee type payment_method_typePayment method used for the transaction payment_method_type payment_method_type Payment method used for the transaction card_brandCard brand, if applicable card_brand card_brand Card brand, if applicable payment_intent_idUnique id of the payment intent payment_intent_id payment_intent_id Unique id of the payment intent charge_amount_capturedAmount captured charge_amount_captured charge_amount_captured Amount captured Interchange Details report [https://docs.tilled.com/docs/reporting#interchange-details-report](https://docs.tilled.com/docs/reporting#interchange-details-report) ℹ️The report details below reflect upcoming changes to Tilled's downloadable Interchange Details report, expected to be released in March 2025. ℹ️ The report details below reflect upcoming changes to Tilled's downloadable Interchange Details report, expected to be released in March 2025. The report details below reflect upcoming changes to Tilled's downloadable Interchange Details report, expected to be released in March 2025. The report details below reflect upcoming changes to Tilled's downloadable Interchange Details report, expected to be released in March 2025. Tilled's The Interchange Details report is useful for analyzing interchange costs and identifying factors that impact interchange qualification. If generating via the Create a Report RunAPI endpoint, set type = interchange_detail_2. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type interchange_detail_2 Factors impacting interchange costs Factors impacting interchange costs Payment method: Online payments generally have higher interchange costs than in-person payments. Funding type: Credit cards typically cost more to process than debit cards. Card type: Consumer and international cards often incur higher rates than business or commercial cards. Settlement time: Transactions settled more than two days after authorization may result in higher costs. Level 2/3 data: Payments missing level 2/3 data qualify only for level 1 rates. AVS/CVV data: Incorrect or missing avs/cvv data can lead to higher interchange fees. Merchant category code: Certain MCCs are subject to higher interchange rates. Payment method: Online payments generally have higher interchange costs than in-person payments. Payment method: Funding type: Credit cards typically cost more to process than debit cards. Funding type: Card type: Consumer and international cards often incur higher rates than business or commercial cards. Card type: Settlement time: Transactions settled more than two days after authorization may result in higher costs. Settlement time: Level 2/3 data: Payments missing level 2/3 data qualify only for level 1 rates. Level 2/3 data: AVS/CVV data: Incorrect or missing avs/cvv data can lead to higher interchange fees. AVS/CVV data: Merchant category code: Certain MCCs are subject to higher interchange rates. Merchant category code: Available columns Available columns FIELDDESCRIPTIONsoftware_platformSoftware platform namemerchantMerchant namemerchant_account_idUnique merchant account idmccMerchant category codeprocessorProcessor through which payment was routedtransaction_idUnique charge or refund idtransaction_typeType of transactionpayment_methodPayment method type, such as online or in-persontransaction_dateDate transaction was processedsettlement_dateDate transaction settledfunding_typeCard funding type, such as debit or creditcard_brandCard brandcard_binCard BINinterchange_programInterchange programavs_address_checkResults of the AVS address checkavs_zip_checkResults of the AVS zip code checkcvvResults of the CVV/CVC checklevel_2_3Level 2/3 details, if providedinterchange_discount_rateInterchange discount rate; the rate does not include any markupsinterchange_transaction_feeInterchange transaction fee; the amount does not include any markupstransaction_amountAmount of the charge or refund FIELDDESCRIPTION FIELDDESCRIPTION FIELD FIELD DESCRIPTION DESCRIPTION software_platformSoftware platform namemerchantMerchant namemerchant_account_idUnique merchant account idmccMerchant category codeprocessorProcessor through which payment was routedtransaction_idUnique charge or refund idtransaction_typeType of transactionpayment_methodPayment method type, such as online or in-persontransaction_dateDate transaction was processedsettlement_dateDate transaction settledfunding_typeCard funding type, such as debit or creditcard_brandCard brandcard_binCard BINinterchange_programInterchange programavs_address_checkResults of the AVS address checkavs_zip_checkResults of the AVS zip code checkcvvResults of the CVV/CVC checklevel_2_3Level 2/3 details, if providedinterchange_discount_rateInterchange discount rate; the rate does not include any markupsinterchange_transaction_feeInterchange transaction fee; the amount does not include any markupstransaction_amountAmount of the charge or refund software_platformSoftware platform name software_platform software_platform Software platform name merchantMerchant name merchant merchant Merchant name merchant_account_idUnique merchant account id merchant_account_id merchant_account_id Unique merchant account id mccMerchant category code mcc mcc Merchant category code processorProcessor through which payment was routed processor processor Processor through which payment was routed transaction_idUnique charge or refund id transaction_id transaction_id Unique charge or refund id transaction_typeType of transaction transaction_type transaction_type Type of transaction payment_methodPayment method type, such as online or in-person payment_method payment_method Payment method type, such as online or in-person transaction_dateDate transaction was processed transaction_date transaction_date Date transaction was processed settlement_dateDate transaction settled settlement_date settlement_date Date transaction settled funding_typeCard funding type, such as debit or credit funding_type funding_type Card funding type, such as debit or credit card_brandCard brand card_brand card_brand Card brand card_binCard BIN card_bin card_bin Card BIN interchange_programInterchange program interchange_program interchange_program Interchange program avs_address_checkResults of the AVS address check avs_address_check avs_address_check Results of the AVS address check avs_zip_checkResults of the AVS zip code check avs_zip_check avs_zip_check Results of the AVS zip code check cvvResults of the CVV/CVC check cvv cvv Results of the CVV/CVC check level_2_3Level 2/3 details, if provided level_2_3 level_2_3 Level 2/3 details, if provided interchange_discount_rateInterchange discount rate; the rate does not include any markups interchange_discount_rate interchange_discount_rate Interchange discount rate; the rate does not include any markups interchange_transaction_feeInterchange transaction fee; the amount does not include any markups interchange_transaction_fee interchange_transaction_fee Interchange transaction fee; the amount does not include any markups transaction_amountAmount of the charge or refund transaction_amount transaction_amount Amount of the charge or refund Processing Summary report [https://docs.tilled.com/docs/reporting#processing-summary-report](https://docs.tilled.com/docs/reporting#processing-summary-report) The Processing Summary report is useful for comparing processing activity across merchants. If generating via the Create a Report RunAPI endpoint, set type = processing_summary_1. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type processing_summary_1 FIELDDETAILSmerchant_nameMerchant nameaccount_idUnique merchant account IDstart_atStart date of the selected time periodend_atEnd date of the selected time periodsucceeded_charge_volumeVolume of successful chargessucceeded_charge_countNumber of successful chargesfailed_charge_volumeVolume of failed chargesfailed_charge_countNumber of failed chargessucceeded_refund_volumeVolume of successful refundssucceeded_refund_countNumber of successful refundswon_dispute_volumeVolume of disputes, where dispute was ruled in favor of the merchantwon_dispute_countNumber of disputes, where dispute was ruled in favor of the merchantlost_dispute_volumeVolume of disputes, where dispute was ruled in favor of the cardholderlost_dispute_countNumber of disputes, where dispute was ruled in favor of the cardholdertotal_dispute_volumeTotal volume of disputestotal_dispute_countTotal number of disputescharge_fee_volumeVolume of charge-related feesrefund_fee_volumeVolume of refund-related feesdispute_fee_volumeVolume of dispute-related feesadministrative_fee_volumeVolume of administrative-related fees FIELDDETAILS FIELDDETAILS FIELD FIELD DETAILS DETAILS merchant_nameMerchant nameaccount_idUnique merchant account IDstart_atStart date of the selected time periodend_atEnd date of the selected time periodsucceeded_charge_volumeVolume of successful chargessucceeded_charge_countNumber of successful chargesfailed_charge_volumeVolume of failed chargesfailed_charge_countNumber of failed chargessucceeded_refund_volumeVolume of successful refundssucceeded_refund_countNumber of successful refundswon_dispute_volumeVolume of disputes, where dispute was ruled in favor of the merchantwon_dispute_countNumber of disputes, where dispute was ruled in favor of the merchantlost_dispute_volumeVolume of disputes, where dispute was ruled in favor of the cardholderlost_dispute_countNumber of disputes, where dispute was ruled in favor of the cardholdertotal_dispute_volumeTotal volume of disputestotal_dispute_countTotal number of disputescharge_fee_volumeVolume of charge-related feesrefund_fee_volumeVolume of refund-related feesdispute_fee_volumeVolume of dispute-related feesadministrative_fee_volumeVolume of administrative-related fees merchant_nameMerchant name merchant_name merchant_name Merchant name account_idUnique merchant account ID account_id account_id Unique merchant account ID start_atStart date of the selected time period start_at start_at Start date of the selected time period end_atEnd date of the selected time period end_at end_at End date of the selected time period succeeded_charge_volumeVolume of successful charges succeeded_charge_volume succeeded_charge_volume Volume of successful charges succeeded_charge_countNumber of successful charges succeeded_charge_count succeeded_charge_count Number of successful charges failed_charge_volumeVolume of failed charges failed_charge_volume failed_charge_volume Volume of failed charges failed_charge_countNumber of failed charges failed_charge_count failed_charge_count Number of failed charges succeeded_refund_volumeVolume of successful refunds succeeded_refund_volume succeeded_refund_volume Volume of successful refunds succeeded_refund_countNumber of successful refunds succeeded_refund_count succeeded_refund_count Number of successful refunds won_dispute_volumeVolume of disputes, where dispute was ruled in favor of the merchant won_dispute_volume won_dispute_volume Volume of disputes, where dispute was ruled in favor of the merchant won_dispute_countNumber of disputes, where dispute was ruled in favor of the merchant won_dispute_count won_dispute_count Number of disputes, where dispute was ruled in favor of the merchant lost_dispute_volumeVolume of disputes, where dispute was ruled in favor of the cardholder lost_dispute_volume lost_dispute_volume Volume of disputes, where dispute was ruled in favor of the cardholder lost_dispute_countNumber of disputes, where dispute was ruled in favor of the cardholder lost_dispute_count lost_dispute_count Number of disputes, where dispute was ruled in favor of the cardholder total_dispute_volumeTotal volume of disputes total_dispute_volume total_dispute_volume Total volume of disputes total_dispute_countTotal number of disputes total_dispute_count total_dispute_count Total number of disputes charge_fee_volumeVolume of charge-related fees charge_fee_volume charge_fee_volume Volume of charge-related fees refund_fee_volumeVolume of refund-related fees refund_fee_volume refund_fee_volume Volume of refund-related fees dispute_fee_volumeVolume of dispute-related fees dispute_fee_volume dispute_fee_volume Volume of dispute-related fees administrative_fee_volumeVolume of administrative-related fees administrative_fee_volume administrative_fee_volume Volume of administrative-related fees Disputes report [https://docs.tilled.com/docs/reporting#disputes-report](https://docs.tilled.com/docs/reporting#disputes-report) The Disputes report is useful for analyzing dispute activity, including dispute reasons. If generating via the Create a Report RunAPI endpoint, set type = disputes_summary_1. [Create a Report RunAPI](https://docs.tilled.com/api-reference#tag/report-runs/POST/v1/report-runs) API type disputes_summary_1 FIELDDETAILSaccount_idUnique merchant account idmerchant_nameMerchant namedispute_idUnique dispute idcreated_atDate dispute was createdcurrencyCurrency of the original paymentdispute_amountAmount being disputed by the cardholderreason_descriptionReason for the dispute, as provided by the cardholderstatusStatus of the dispute when the report is generatedclosing_atDeadline to submit evidence in response to the disputereversed_atDate dispute was reversed, if applicablecharge_idUnique id of the original paymentcharge_amount_capturedAmount of the original paymentcharge_refundedWhether the payment was refundedamount_refundedAmount of the refund, if payment was refunded FIELDDETAILS FIELDDETAILS FIELD FIELD DETAILS DETAILS account_idUnique merchant account idmerchant_nameMerchant namedispute_idUnique dispute idcreated_atDate dispute was createdcurrencyCurrency of the original paymentdispute_amountAmount being disputed by the cardholderreason_descriptionReason for the dispute, as provided by the cardholderstatusStatus of the dispute when the report is generatedclosing_atDeadline to submit evidence in response to the disputereversed_atDate dispute was reversed, if applicablecharge_idUnique id of the original paymentcharge_amount_capturedAmount of the original paymentcharge_refundedWhether the payment was refundedamount_refundedAmount of the refund, if payment was refunded account_idUnique merchant account id account_id account_id Unique merchant account id merchant_nameMerchant name merchant_name merchant_name Merchant name dispute_idUnique dispute id dispute_id dispute_id Unique dispute id created_atDate dispute was created created_at created_at Date dispute was created currencyCurrency of the original payment currency currency Currency of the original payment dispute_amountAmount being disputed by the cardholder dispute_amount dispute_amount Amount being disputed by the cardholder reason_descriptionReason for the dispute, as provided by the cardholder reason_description reason_description Reason for the dispute, as provided by the cardholder statusStatus of the dispute when the report is generated status status Status of the dispute when the report is generated closing_atDeadline to submit evidence in response to the dispute closing_at closing_at Deadline to submit evidence in response to the dispute reversed_atDate dispute was reversed, if applicable reversed_at reversed_at Date dispute was reversed, if applicable charge_idUnique id of the original payment charge_id charge_id Unique id of the original payment charge_amount_capturedAmount of the original payment charge_amount_captured charge_amount_captured Amount of the original payment charge_refundedWhether the payment was refunded charge_refunded charge_refunded Whether the payment was refunded amount_refundedAmount of the refund, if payment was refunded amount_refunded amount_refunded Amount of the refund, if payment was refunded FAQsHow do I reconcile a merchant payout?Payouts can be reconciled directly in the Dashboard or using a CSV report.Reconcile using the DashboardNavigate to the Payouts pageSelect the payout you want to reconcileReview transactions associated with the payoutReconcile using a CSV reportGenerate a Payout reportOpen the CSV file (assuming you are using Excel for the following steps)Select the Custom Sort optionSort by payout ID, followed by source IDReview transactions associated with the payoutAre commission reports available in the Dashboard?Commission reports are not currently available in the Dashboard. For more details, refer to our Commissions guide.How do I determine whether a payment has been batched?The batch status is not currently exposed in the Dashboard or API. To determine the batch status manually, you can compare the captured_at property of a charge with the most recent batch time.const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime;How do I retrieve all transactions associated with a single payout via the API?To retrieve all transactions associated with a single payout, use the List all Balance TransactionsAPI endpoint and pass the payout_id in the query parameters. FAQs How do I reconcile a merchant payout?Payouts can be reconciled directly in the Dashboard or using a CSV report.Reconcile using the DashboardNavigate to the Payouts pageSelect the payout you want to reconcileReview transactions associated with the payoutReconcile using a CSV reportGenerate a Payout reportOpen the CSV file (assuming you are using Excel for the following steps)Select the Custom Sort optionSort by payout ID, followed by source IDReview transactions associated with the payout How do I reconcile a merchant payout? How do I reconcile a merchant payout? [https://docs.tilled.com/docs/reporting#faq-how-do-i-reconcile-a-merchant-payout](https://docs.tilled.com/docs/reporting#faq-how-do-i-reconcile-a-merchant-payout) Payouts can be reconciled directly in the Dashboard or using a CSV report.Reconcile using the DashboardNavigate to the Payouts pageSelect the payout you want to reconcileReview transactions associated with the payoutReconcile using a CSV reportGenerate a Payout reportOpen the CSV file (assuming you are using Excel for the following steps)Select the Custom Sort optionSort by payout ID, followed by source IDReview transactions associated with the payout Reconcile using the Dashboard Reconcile using the Dashboard Navigate to the Payouts pageSelect the payout you want to reconcileReview transactions associated with the payout Navigate to the Payouts page Payouts Select the payout you want to reconcile Review transactions associated with the payout Reconcile using a CSV report Reconcile using a CSV report Generate a Payout reportOpen the CSV file (assuming you are using Excel for the following steps)Select the Custom Sort optionSort by payout ID, followed by source IDReview transactions associated with the payout Generate a Payout report [Generate](https://docs.tilled.com/docs/reporting#generate-a-report) Payout Open the CSV file (assuming you are using Excel for the following steps) Select the Custom Sort option Custom Sort Sort by payout ID, followed by source ID payout ID source ID Review transactions associated with the payout Are commission reports available in the Dashboard?Commission reports are not currently available in the Dashboard. For more details, refer to our Commissions guide. Are commission reports available in the Dashboard? Are commission reports available in the Dashboard? [https://docs.tilled.com/docs/reporting#faq-are-commission-reports-available-in-the-dashboard](https://docs.tilled.com/docs/reporting#faq-are-commission-reports-available-in-the-dashboard) Commission reports are not currently available in the Dashboard. For more details, refer to our Commissions guide. [Commissions guide](https://docs.tilled.com/docs/commissions#commission-reports) How do I determine whether a payment has been batched?The batch status is not currently exposed in the Dashboard or API. To determine the batch status manually, you can compare the captured_at property of a charge with the most recent batch time.const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime; How do I determine whether a payment has been batched? How do I determine whether a payment has been batched? [https://docs.tilled.com/docs/reporting#faq-how-do-i-determine-whether-a-payment-has-been-batched](https://docs.tilled.com/docs/reporting#faq-how-do-i-determine-whether-a-payment-has-been-batched) The batch status is not currently exposed in the Dashboard or API. To determine the batch status manually, you can compare the captured_at property of a charge with the most recent batch time.const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime; The batch status is not currently exposed in the Dashboard or API. To determine the batch status manually, you can compare the captured_at property of a charge with the most recent batch time. captured_at const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime; const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime; const capturedAt = new Date(charge.captured_at); const now = new Date(); // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( new Date() .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time ) : ( new Date() .setDate(now.getDate() - 1) .setUTCHours(18, 59, 0, 0) ); const hasBatched = capturedAt > batchTime; const capturedAt = new Date(charge.captured_at); const capturedAt = new Date ( charge . captured_at ) ; const now = new Date(); const now = new Date ( ) ; // Note: we need this conditional to deal with charges that occur between 11:59PM // Note: we need this conditional to deal with charges that occur between 11:59PM // and 12:00AM // and 12:00AM const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? ( const batchTime = now . getUTCHours ( ) === 18 && now . getMinutes ( ) === 59 ? ( new Date() new Date ( ) .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time . setUTCHours ( 18 , 59 , 0 , 0 ) // 18:59:00 represents an 11:59 EST batch time ) : ( ) : ( new Date() new Date ( ) .setDate(now.getDate() - 1) . setDate ( now . getDate ( ) - 1 ) .setUTCHours(18, 59, 0, 0) . setUTCHours ( 18 , 59 , 0 , 0 ) ); ) ; const hasBatched = capturedAt > batchTime; const hasBatched = capturedAt > batchTime ; How do I retrieve all transactions associated with a single payout via the API?To retrieve all transactions associated with a single payout, use the List all Balance TransactionsAPI endpoint and pass the payout_id in the query parameters. How do I retrieve all transactions associated with a single payout via the API? How do I retrieve all transactions associated with a single payout via the API? [https://docs.tilled.com/docs/reporting#faq-how-do-i-retrieve-all-transactions-associated-with-a-single-payout-via-the-api](https://docs.tilled.com/docs/reporting#faq-how-do-i-retrieve-all-transactions-associated-with-a-single-payout-via-the-api) To retrieve all transactions associated with a single payout, use the List all Balance TransactionsAPI endpoint and pass the payout_id in the query parameters. [List all Balance TransactionsAPI](https://docs.tilled.com/api-reference#tag/balance-transactions/GET/v1/balance-transactions) API payout_id Last updated on March 10, 2025 March 10, 2025 DisputesCommissions [Disputes](https://docs.tilled.com/docs/disputes) [Commissions](https://docs.tilled.com/docs/commissions)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/commissions",
    "title": "Tilled",
    "content": "Commissions Commissions refer to the revenue generated from processing payments with Tilled. Merchant fees eligible for commissions, along with the software platform’s buy-rates and revenue share percentage, are outlined in the software platform’s Payment Processing Agreement. Overview Commission reports Recipients: Reports are emailed to the software platform’s primary commissions contact. Frequency: Reports are sent before the commission payout. Format: Reports are shared as Excel files. Commission payouts Schedule: Commissions are paid on the last day of the month following the month of payment processing activity. For instance, commissions for activity in April are paid on May 31. Method: Commissions are sent via ACH to the bank account provided during onboarding. Calculating commissions The commission equation for each fee type is: software platform commission = (merchant revenue - software platform cost) * software platform revenue share If the merchant’s revenue is less than the software platform’s cost, the software platform is responsible for the full difference. For instance, if the merchant’s revenue is $100 and the software platform’s cost is $150, the software platform is responsible for the $50 difference. Key Terms TERMDEFINITIONSoftware platform’s buy-rateThe software platform’s cost structure as defined in the Schedule A. Also known as a fee schedule.Merchant pricingThe merchant’s cost structure as defined in the merchant application and Dashboard. Also known as a merchant fee schedule.Software platform costThe total cost incurred by the software platform, calculated using their buy-rate.Merchant revenueThe total revenue generated off the merchant, calculated using their pricing. Also known as the gross revenue.Revenue shareThe portion of net revenue (merchant revenue minus software platform’s cost) distributed to the software platform. Commission Report v2 Tilled is introducing a new commission report that uses automated calculations to eliminate manual errors and provide more detailed insights. ℹ️The v2 report is in beta. If you are interested in joining the beta, please reach out to support@tilled.com. Report structure Partner Summary The Partner Summary tab provides an overview of your commission activity, broken down by payment method, including: gross processing volume, merchant and transaction count, total revenue, total costs, and net commissions paid. Merchant Summary The Merchant Summary tab details the revenue, costs, and net commissions by merchant. This view can be filtered by currency, payment method, card brand, fee source, and fee type. This is a flexible, pivot table view where you can adjust filters and columns as needed. Details The Details tab includes all underlying inputs used for commission calculations, including fee information, merchant pricing, and your buy-rates. You can easily audit this data as needed. Glossary The Glossary tab defines every field seen throughout the report.Last updated on February 20, 2025ReportingWhite-Label Commissions Commissions refer to the revenue generated from processing payments with Tilled. Merchant fees eligible for commissions, along with the software platform’s buy-rates and revenue share percentage, are outlined in the software platform’s Payment Processing Agreement. Tilled Overview [https://docs.tilled.com/docs/commissions#overview](https://docs.tilled.com/docs/commissions#overview) Commission reports [https://docs.tilled.com/docs/commissions#commission-reports](https://docs.tilled.com/docs/commissions#commission-reports) Recipients: Reports are emailed to the software platform’s primary commissions contact. Frequency: Reports are sent before the commission payout. Format: Reports are shared as Excel files. Recipients: Reports are emailed to the software platform’s primary commissions contact. Recipients: Frequency: Reports are sent before the commission payout. Frequency: Format: Reports are shared as Excel files. Format: Commission payouts [https://docs.tilled.com/docs/commissions#commission-payouts](https://docs.tilled.com/docs/commissions#commission-payouts) Schedule: Commissions are paid on the last day of the month following the month of payment processing activity. For instance, commissions for activity in April are paid on May 31. Method: Commissions are sent via ACH to the bank account provided during onboarding. Schedule: Commissions are paid on the last day of the month following the month of payment processing activity. For instance, commissions for activity in April are paid on May 31. Schedule: Method: Commissions are sent via ACH to the bank account provided during onboarding. Method: Calculating commissions [https://docs.tilled.com/docs/commissions#calculating-commissions](https://docs.tilled.com/docs/commissions#calculating-commissions) The commission equation for each fee type is: software platform commission = (merchant revenue - software platform cost) * software platform revenue share software platform commission merchant revenue software platform cost software platform revenue share If the merchant’s revenue is less than the software platform’s cost, the software platform is responsible for the full difference. For instance, if the merchant’s revenue is $100 and the software platform’s cost is $150, the software platform is responsible for the $50 difference. Key Terms [https://docs.tilled.com/docs/commissions#key-terms](https://docs.tilled.com/docs/commissions#key-terms) TERMDEFINITIONSoftware platform’s buy-rateThe software platform’s cost structure as defined in the Schedule A. Also known as a fee schedule.Merchant pricingThe merchant’s cost structure as defined in the merchant application and Dashboard. Also known as a merchant fee schedule.Software platform costThe total cost incurred by the software platform, calculated using their buy-rate.Merchant revenueThe total revenue generated off the merchant, calculated using their pricing. Also known as the gross revenue.Revenue shareThe portion of net revenue (merchant revenue minus software platform’s cost) distributed to the software platform. TERMDEFINITION TERMDEFINITION TERM TERM DEFINITION DEFINITION Software platform’s buy-rateThe software platform’s cost structure as defined in the Schedule A. Also known as a fee schedule.Merchant pricingThe merchant’s cost structure as defined in the merchant application and Dashboard. Also known as a merchant fee schedule.Software platform costThe total cost incurred by the software platform, calculated using their buy-rate.Merchant revenueThe total revenue generated off the merchant, calculated using their pricing. Also known as the gross revenue.Revenue shareThe portion of net revenue (merchant revenue minus software platform’s cost) distributed to the software platform. Software platform’s buy-rateThe software platform’s cost structure as defined in the Schedule A. Also known as a fee schedule. Software platform’s buy-rate The software platform’s cost structure as defined in the Schedule A. Also known as a fee schedule. Merchant pricingThe merchant’s cost structure as defined in the merchant application and Dashboard. Also known as a merchant fee schedule. Merchant pricing The merchant’s cost structure as defined in the merchant application and Dashboard. Also known as a merchant fee schedule. Software platform costThe total cost incurred by the software platform, calculated using their buy-rate. Software platform cost The total cost incurred by the software platform, calculated using their buy-rate. Merchant revenueThe total revenue generated off the merchant, calculated using their pricing. Also known as the gross revenue. Merchant revenue The total revenue generated off the merchant, calculated using their pricing. Also known as the gross revenue. Revenue shareThe portion of net revenue (merchant revenue minus software platform’s cost) distributed to the software platform. Revenue share The portion of net revenue (merchant revenue minus software platform’s cost) distributed to the software platform. Commission Report v2 [https://docs.tilled.com/docs/commissions#commission-report-v2](https://docs.tilled.com/docs/commissions#commission-report-v2) Tilled is introducing a new commission report that uses automated calculations to eliminate manual errors and provide more detailed insights. Tilled ℹ️The v2 report is in beta. If you are interested in joining the beta, please reach out to support@tilled.com. ℹ️ The v2 report is in beta. If you are interested in joining the beta, please reach out to support@tilled.com. The v2 report is in beta. If you are interested in joining the beta, please reach out to support@tilled.com. The v2 report is in beta. If you are interested in joining the beta, please reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) Report structure [https://docs.tilled.com/docs/commissions#report-structure](https://docs.tilled.com/docs/commissions#report-structure) Partner Summary Partner Summary The Partner Summary tab provides an overview of your commission activity, broken down by payment method, including: gross processing volume, merchant and transaction count, total revenue, total costs, and net commissions paid. Partner Summary Merchant Summary Merchant Summary The Merchant Summary tab details the revenue, costs, and net commissions by merchant. This view can be filtered by currency, payment method, card brand, fee source, and fee type. This is a flexible, pivot table view where you can adjust filters and columns as needed. Merchant Summary Details Details The Details tab includes all underlying inputs used for commission calculations, including fee information, merchant pricing, and your buy-rates. You can easily audit this data as needed. Details Glossary Glossary The Glossary tab defines every field seen throughout the report. Glossary Last updated on February 20, 2025 February 20, 2025 ReportingWhite-Label [Reporting](https://docs.tilled.com/docs/reporting) [White-Label](https://docs.tilled.com/docs/account-configuration/white-label)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/white-label",
    "title": "Tilled",
    "content": "White-Label Software platforms can white-label Tilled to maintain brand consistency across the merchant journey. White-label settings are applied across all product areas, ensuring zero break-through interactions. White-Label Settings The table below outlines all customizable white-label settings. CONFIGURATIONDESCRIPTIONSubdomainThe Dashboard, merchant application, and payment links are hosted on your custom subdomain. Transactional emails are sent from the paymentsonline.io domain.LogosLight mode logoThe light mode logo is used against light backgrounds, such as the merchant application and transactional emails.Dark mode logoThe dark mode logo is used against dark backgrounds, such as the sidebar navigation in the Dashboard.Brand ColorsPrimary colorThe primary color is used for the sidebar navigation in the Dashboard. A darker color is recommended for optimal contrast.Accent colorThe accent color is used for buttons, hyperlinks, and icons against light backgrounds. A darker color is recommended for optimal contrast.Merchant Support DetailsSupport phoneThe merchant support phone number is exposed in the Dashboard. If a phone number is not provided, Tilled's will be used.Support emailThe merchant support email is exposed in the Dashboard and transactional emails. If a support email is not provided, Tilled's will be used.Help centerThe merchant help center is exposed in the Dashboard and transactional emails. If a merchant help center is not linked, Tilled's will be used. Manage White-Label White-label settings can be easily managed through the Partner Dashboard. Software platforms can: Configure white-label settings Access the white-labeled Dashboard Preview a white-labeled transactional email Configure white-label settings Only Owner and Admin users can edit white-label settings. To configure your white-label settings: Navigate to Account > White-Label Click the Manage White-Label button and select Edit Settings Customize your subdomain, brand colors, support details, and upload your logos Click the Save button Preview white-labeled Dashboard The white-labeled Dashboard is also accessible to anyone by entering the white-labeled domain into a web browser. To preview your white-labeled Dashboard: Navigate to Account > White-Label Click the Manage White-Label button and select Preview Dashboard Login using your credentials Preview white-labeled transactional emails To preview a white-labeled email: Navigate to Account > White-Label Click the Manage White-Label button and select Preview Email FAQsThe white-label settings have been saved, but they're not reflecting in the Dashboard or email previews. How do I troubleshoot this?For white-label settings to be applied, a custom subdomain, logos, and colors must be provided. Double check that each item was provided and update if not.Last updated on March 10, 2025CommissionsUsers White-Label Software platforms can white-label Tilled to maintain brand consistency across the merchant journey. White-label settings are applied across all product areas, ensuring zero break-through interactions. Tilled White-Label Settings [https://docs.tilled.com/docs/account-configuration/white-label#white-label-settings](https://docs.tilled.com/docs/account-configuration/white-label#white-label-settings) The table below outlines all customizable white-label settings. CONFIGURATIONDESCRIPTIONSubdomainThe Dashboard, merchant application, and payment links are hosted on your custom subdomain. Transactional emails are sent from the paymentsonline.io domain.LogosLight mode logoThe light mode logo is used against light backgrounds, such as the merchant application and transactional emails.Dark mode logoThe dark mode logo is used against dark backgrounds, such as the sidebar navigation in the Dashboard.Brand ColorsPrimary colorThe primary color is used for the sidebar navigation in the Dashboard. A darker color is recommended for optimal contrast.Accent colorThe accent color is used for buttons, hyperlinks, and icons against light backgrounds. A darker color is recommended for optimal contrast.Merchant Support DetailsSupport phoneThe merchant support phone number is exposed in the Dashboard. If a phone number is not provided, Tilled's will be used.Support emailThe merchant support email is exposed in the Dashboard and transactional emails. If a support email is not provided, Tilled's will be used.Help centerThe merchant help center is exposed in the Dashboard and transactional emails. If a merchant help center is not linked, Tilled's will be used. CONFIGURATIONDESCRIPTION CONFIGURATIONDESCRIPTION CONFIGURATION CONFIGURATION DESCRIPTION DESCRIPTION SubdomainThe Dashboard, merchant application, and payment links are hosted on your custom subdomain. Transactional emails are sent from the paymentsonline.io domain.LogosLight mode logoThe light mode logo is used against light backgrounds, such as the merchant application and transactional emails.Dark mode logoThe dark mode logo is used against dark backgrounds, such as the sidebar navigation in the Dashboard.Brand ColorsPrimary colorThe primary color is used for the sidebar navigation in the Dashboard. A darker color is recommended for optimal contrast.Accent colorThe accent color is used for buttons, hyperlinks, and icons against light backgrounds. A darker color is recommended for optimal contrast.Merchant Support DetailsSupport phoneThe merchant support phone number is exposed in the Dashboard. If a phone number is not provided, Tilled's will be used.Support emailThe merchant support email is exposed in the Dashboard and transactional emails. If a support email is not provided, Tilled's will be used.Help centerThe merchant help center is exposed in the Dashboard and transactional emails. If a merchant help center is not linked, Tilled's will be used. SubdomainThe Dashboard, merchant application, and payment links are hosted on your custom subdomain. Transactional emails are sent from the paymentsonline.io domain. Subdomain The Dashboard, merchant application, and payment links are hosted on your custom subdomain. Transactional emails are sent from the paymentsonline.io domain. Logos Logos Logos Light mode logoThe light mode logo is used against light backgrounds, such as the merchant application and transactional emails. Light mode logo The light mode logo is used against light backgrounds, such as the merchant application and transactional emails. Dark mode logoThe dark mode logo is used against dark backgrounds, such as the sidebar navigation in the Dashboard. Dark mode logo The dark mode logo is used against dark backgrounds, such as the sidebar navigation in the Dashboard. Brand Colors Brand Colors Brand Colors Primary colorThe primary color is used for the sidebar navigation in the Dashboard. A darker color is recommended for optimal contrast. Primary color The primary color is used for the sidebar navigation in the Dashboard. A darker color is recommended for optimal contrast. Accent colorThe accent color is used for buttons, hyperlinks, and icons against light backgrounds. A darker color is recommended for optimal contrast. Accent color The accent color is used for buttons, hyperlinks, and icons against light backgrounds. A darker color is recommended for optimal contrast. Merchant Support Details Merchant Support Details Merchant Support Details Support phoneThe merchant support phone number is exposed in the Dashboard. If a phone number is not provided, Tilled's will be used. Support phone The merchant support phone number is exposed in the Dashboard. If a phone number is not provided, Tilled's will be used. Tilled's Support emailThe merchant support email is exposed in the Dashboard and transactional emails. If a support email is not provided, Tilled's will be used. Support email The merchant support email is exposed in the Dashboard and transactional emails. If a support email is not provided, Tilled's will be used. Tilled's Help centerThe merchant help center is exposed in the Dashboard and transactional emails. If a merchant help center is not linked, Tilled's will be used. Help center The merchant help center is exposed in the Dashboard and transactional emails. If a merchant help center is not linked, Tilled's will be used. Tilled's Manage White-Label [https://docs.tilled.com/docs/account-configuration/white-label#manage-white-label](https://docs.tilled.com/docs/account-configuration/white-label#manage-white-label) White-label settings can be easily managed through the Partner Dashboard. Software platforms can: Configure white-label settings Access the white-labeled Dashboard Preview a white-labeled transactional email Configure white-label settings Access the white-labeled Dashboard Preview a white-labeled transactional email Configure white-label settings [https://docs.tilled.com/docs/account-configuration/white-label#configure-white-label-settings](https://docs.tilled.com/docs/account-configuration/white-label#configure-white-label-settings) Only Owner and Admin users can edit white-label settings. To configure your white-label settings: Navigate to Account > White-Label Click the Manage White-Label button and select Edit Settings Customize your subdomain, brand colors, support details, and upload your logos Click the Save button Navigate to Account > White-Label Account White-Label Click the Manage White-Label button and select Edit Settings Manage White-Label Edit Settings Customize your subdomain, brand colors, support details, and upload your logos Click the Save button Save Preview white-labeled Dashboard [https://docs.tilled.com/docs/account-configuration/white-label#preview-white-labeled-dashboard](https://docs.tilled.com/docs/account-configuration/white-label#preview-white-labeled-dashboard) The white-labeled Dashboard is also accessible to anyone by entering the white-labeled domain into a web browser. To preview your white-labeled Dashboard: Navigate to Account > White-Label Click the Manage White-Label button and select Preview Dashboard Login using your credentials Navigate to Account > White-Label Account White-Label Click the Manage White-Label button and select Preview Dashboard Manage White-Label Preview Dashboard Login using your credentials Preview white-labeled transactional emails [https://docs.tilled.com/docs/account-configuration/white-label#preview-white-labeled-transactional-emails](https://docs.tilled.com/docs/account-configuration/white-label#preview-white-labeled-transactional-emails) To preview a white-labeled email: Navigate to Account > White-Label Click the Manage White-Label button and select Preview Email Navigate to Account > White-Label Account White-Label Click the Manage White-Label button and select Preview Email Manage White-Label Preview Email FAQsThe white-label settings have been saved, but they're not reflecting in the Dashboard or email previews. How do I troubleshoot this?For white-label settings to be applied, a custom subdomain, logos, and colors must be provided. Double check that each item was provided and update if not. FAQs The white-label settings have been saved, but they're not reflecting in the Dashboard or email previews. How do I troubleshoot this?For white-label settings to be applied, a custom subdomain, logos, and colors must be provided. Double check that each item was provided and update if not. The white-label settings have been saved, but they're not reflecting in the Dashboard or email previews. How do I troubleshoot this? The white-label settings have been saved, but they're not reflecting in the Dashboard or email previews. How do I troubleshoot this? [https://docs.tilled.com/docs/account-configuration/white-label#faq-the-white-label-settings-have-been-saved-but-theyre-not-reflecting-in-the-dashboard-or-email-previews-how-do-i-troubleshoot-this](https://docs.tilled.com/docs/account-configuration/white-label#faq-the-white-label-settings-have-been-saved-but-theyre-not-reflecting-in-the-dashboard-or-email-previews-how-do-i-troubleshoot-this) For white-label settings to be applied, a custom subdomain, logos, and colors must be provided. Double check that each item was provided and update if not. Last updated on March 10, 2025 March 10, 2025 CommissionsUsers [Commissions](https://docs.tilled.com/docs/commissions) [Users](https://docs.tilled.com/docs/account-configuration/users)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/users",
    "title": "Tilled",
    "content": "Users Tilled supports the following user roles: Owner: Full access to all features and settings. Admin: Manages accounts, users, and reports with edit capabilities. Analyst: Primarily view-only access to financial and reporting features. Developer: Focused on technical configurations. View-only: Can view but not modify data. User Permissions Matrix ADMINANALYSTDEVELOPERVIEW ONLYReadUpdateReadUpdateReadUpdateReadUpdateMerchant ManagementMerchant accounts✓✓✓✗✓✓✓✗Pricing templates✓✓✓✗✓✗✓✗ReportingPayments✓✓✓✗✓✓✓✗Payouts✓✓✓✗✓✗✓✗Disputes✓✓✓✓✓✓✓✗CSV reports✓✓✓✓✓✓✓✗AccountMerchant preferences✓✓✓✗✓✗✓✗White-label✓✓✓✗✓✓✓✗Users✓✓✓✗✓✗✓✗User invites✓✓✗✗✗✗✗✗DevelopersAPI keys✓✓✓✗✓✓✗✗Webhook endpoints✓✓✓✗✓✓✗✗ Manage Users DashboardAPI You can manage users for your account and connected accounts, such as software platforms or merchants. To manage users for your account, navigate to Account > Users. To manage users for a connected account, navigate to the list of connected accounts, locate the respective account, and proceed to the Users tab.Invite userTo invite a user:Navigate the Users tab and locate the respective userClick the Invite User buttonEnter the user’s email address and select their roleThe user will receive an email notification to set up their account.Resend user invitationTo resend a user invitation:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Resend InvitationThe user will receive an email notification to set up their account.Update a user's roleTo update a user's role:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Edit RoleSelect the user's new roleClick the Save User buttonThe user's role will be updated immediately.Reassign account ownerTo reassign the account's owner, reach out to support@tilled.com.Delete userTo delete a user:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Revoke AccessThe user's access will be revoked immediately. FAQsHow do I reset my password?To reset your password, click Forgot Password? on the sign in page.Last updated on March 10, 2025White-LabelNotifications Users Tilled supports the following user roles: Tilled Owner: Full access to all features and settings. Admin: Manages accounts, users, and reports with edit capabilities. Analyst: Primarily view-only access to financial and reporting features. Developer: Focused on technical configurations. View-only: Can view but not modify data. Owner: Full access to all features and settings. Owner: Admin: Manages accounts, users, and reports with edit capabilities. Admin: Analyst: Primarily view-only access to financial and reporting features. Analyst: Developer: Focused on technical configurations. Developer: View-only: Can view but not modify data. View-only: User Permissions Matrix [https://docs.tilled.com/docs/account-configuration/users#user-permissions-matrix](https://docs.tilled.com/docs/account-configuration/users#user-permissions-matrix) ADMINANALYSTDEVELOPERVIEW ONLYReadUpdateReadUpdateReadUpdateReadUpdateMerchant ManagementMerchant accounts✓✓✓✗✓✓✓✗Pricing templates✓✓✓✗✓✗✓✗ReportingPayments✓✓✓✗✓✓✓✗Payouts✓✓✓✗✓✗✓✗Disputes✓✓✓✓✓✓✓✗CSV reports✓✓✓✓✓✓✓✗AccountMerchant preferences✓✓✓✗✓✗✓✗White-label✓✓✓✗✓✓✓✗Users✓✓✓✗✓✗✓✗User invites✓✓✗✗✗✗✗✗DevelopersAPI keys✓✓✓✗✓✓✗✗Webhook endpoints✓✓✓✗✓✓✗✗ ADMINANALYSTDEVELOPERVIEW ONLY ADMINANALYSTDEVELOPERVIEW ONLY ADMIN ADMIN ANALYST ANALYST DEVELOPER DEVELOPER VIEW ONLY VIEW ONLY ReadUpdateReadUpdateReadUpdateReadUpdateMerchant ManagementMerchant accounts✓✓✓✗✓✓✓✗Pricing templates✓✓✓✗✓✗✓✗ReportingPayments✓✓✓✗✓✓✓✗Payouts✓✓✓✗✓✗✓✗Disputes✓✓✓✓✓✓✓✗CSV reports✓✓✓✓✓✓✓✗AccountMerchant preferences✓✓✓✗✓✗✓✗White-label✓✓✓✗✓✓✓✗Users✓✓✓✗✓✗✓✗User invites✓✓✗✗✗✗✗✗DevelopersAPI keys✓✓✓✗✓✓✗✗Webhook endpoints✓✓✓✗✓✓✗✗ ReadUpdateReadUpdateReadUpdateReadUpdate Read Update Read Update Read Update Read Update Merchant Management Merchant Management Merchant Management Merchant accounts✓✓✓✗✓✓✓✗ Merchant accounts ✓ ✓ ✓ ✗ ✓ ✓ ✓ ✗ Pricing templates✓✓✓✗✓✗✓✗ Pricing templates ✓ ✓ ✓ ✗ ✓ ✗ ✓ ✗ Reporting Reporting Reporting Payments✓✓✓✗✓✓✓✗ Payments ✓ ✓ ✓ ✗ ✓ ✓ ✓ ✗ Payouts✓✓✓✗✓✗✓✗ Payouts ✓ ✓ ✓ ✗ ✓ ✗ ✓ ✗ Disputes✓✓✓✓✓✓✓✗ Disputes ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✗ CSV reports✓✓✓✓✓✓✓✗ CSV reports ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✗ Account Account Account Merchant preferences✓✓✓✗✓✗✓✗ Merchant preferences ✓ ✓ ✓ ✗ ✓ ✗ ✓ ✗ White-label✓✓✓✗✓✓✓✗ White-label ✓ ✓ ✓ ✗ ✓ ✓ ✓ ✗ Users✓✓✓✗✓✗✓✗ Users ✓ ✓ ✓ ✗ ✓ ✗ ✓ ✗ User invites✓✓✗✗✗✗✗✗ User invites ✓ ✓ ✗ ✗ ✗ ✗ ✗ ✗ Developers Developers Developers API keys✓✓✓✗✓✓✗✗ API keys ✓ ✓ ✓ ✗ ✓ ✓ ✗ ✗ Webhook endpoints✓✓✓✗✓✓✗✗ Webhook endpoints ✓ ✓ ✓ ✗ ✓ ✓ ✗ ✗ Manage Users [https://docs.tilled.com/docs/account-configuration/users#manage-users](https://docs.tilled.com/docs/account-configuration/users#manage-users) DashboardAPI You can manage users for your account and connected accounts, such as software platforms or merchants. To manage users for your account, navigate to Account > Users. To manage users for a connected account, navigate to the list of connected accounts, locate the respective account, and proceed to the Users tab.Invite userTo invite a user:Navigate the Users tab and locate the respective userClick the Invite User buttonEnter the user’s email address and select their roleThe user will receive an email notification to set up their account.Resend user invitationTo resend a user invitation:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Resend InvitationThe user will receive an email notification to set up their account.Update a user's roleTo update a user's role:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Edit RoleSelect the user's new roleClick the Save User buttonThe user's role will be updated immediately.Reassign account ownerTo reassign the account's owner, reach out to support@tilled.com.Delete userTo delete a user:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Revoke AccessThe user's access will be revoked immediately. DashboardAPI [Dashboard](https://docs.tilled.com/docs/account-configuration/users#dashboard) [API](https://docs.tilled.com/docs/account-configuration/users#api) You can manage users for your account and connected accounts, such as software platforms or merchants. To manage users for your account, navigate to Account > Users. To manage users for a connected account, navigate to the list of connected accounts, locate the respective account, and proceed to the Users tab.Invite userTo invite a user:Navigate the Users tab and locate the respective userClick the Invite User buttonEnter the user’s email address and select their roleThe user will receive an email notification to set up their account.Resend user invitationTo resend a user invitation:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Resend InvitationThe user will receive an email notification to set up their account.Update a user's roleTo update a user's role:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Edit RoleSelect the user's new roleClick the Save User buttonThe user's role will be updated immediately.Reassign account ownerTo reassign the account's owner, reach out to support@tilled.com.Delete userTo delete a user:Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Revoke AccessThe user's access will be revoked immediately. You can manage users for your account and connected accounts, such as software platforms or merchants. To manage users for your account, navigate to Account > Users. Account Users To manage users for a connected account, navigate to the list of connected accounts, locate the respective account, and proceed to the Users tab. Users Invite user To invite a user: Navigate the Users tab and locate the respective userClick the Invite User buttonEnter the user’s email address and select their role Navigate the Users tab and locate the respective user Users Click the Invite User button Invite User Enter the user’s email address and select their role The user will receive an email notification to set up their account. Resend user invitation To resend a user invitation: Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Resend Invitation Navigate the Users tab and locate the respective user Users Click the Kebab Menu icon Kebab Menu Select Resend Invitation Resend Invitation The user will receive an email notification to set up their account. Update a user's role To update a user's role: Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Edit RoleSelect the user's new roleClick the Save User button Navigate the Users tab and locate the respective user Users Click the Kebab Menu icon Kebab Menu Select Edit Role Edit Role Select the user's new role Click the Save User button Save User The user's role will be updated immediately. Reassign account owner To reassign the account's owner, reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) Delete user To delete a user: Navigate the Users tab and locate the respective userClick the Kebab Menu iconSelect Revoke Access Navigate the Users tab and locate the respective user Users Click the Kebab Menu icon Kebab Menu Select Revoke Access Revoke Access The user's access will be revoked immediately. FAQsHow do I reset my password?To reset your password, click Forgot Password? on the sign in page. FAQs How do I reset my password?To reset your password, click Forgot Password? on the sign in page. How do I reset my password? How do I reset my password? [https://docs.tilled.com/docs/account-configuration/users#faq-how-do-i-reset-my-password](https://docs.tilled.com/docs/account-configuration/users#faq-how-do-i-reset-my-password) To reset your password, click Forgot Password? on the sign in page. To reset your password, click Forgot Password? on the sign in page. Forgot Password? Last updated on March 10, 2025 March 10, 2025 White-LabelNotifications [White-Label](https://docs.tilled.com/docs/account-configuration/white-label) [Notifications](https://docs.tilled.com/docs/account-configuration/notifications)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/notifications",
    "title": "Tilled",
    "content": "Notifications Tilled supports a variety of transactional email notifications to help software platforms and merchants stay informed about important events. These notifications cover merchant onboarding, account updates, and disputes. Email Matrix The table below outlines the types of transactional emails supported by Tilled, their triggers, and whether they are supported for merchants, software platforms, or resellers. TRIGGERMERCHANTSSOFTWARE PLATFORMSRESELLERSCoreNew user invite✓✓✓Forgotten password✓✓✓Password reset successfully✓✓✓OnboardingInvite to access merchant application*✓✗✗Merchant application approved✓✓✗Merchant application declined✓✓✗Additional information requestsNew information request✓✓✗Information request reminder✓✓✗DisputesNew retrieval request✓✓✗New dispute✓✓✗Dispute won✓✓✗Dispute lost✓✓✗ *The invitation email granting access to the merchant application is not sent automatically. It must be explicitly triggered by the user during the application creation process, whether initiated through the Dashboard or the API. If onboarding emails are disabled, the invitation email can still be triggered. Manage Email Notifications Personal email notifications To update your personal email preferences: Navigate to Account > User Profile in the Dashboard Adjust your email preferences by category Core emails cannot be disabled. Default email notifications Default email notifications can be configured and will apply to all users on the partner account and associated merchants. For detailed steps, refer to the Merchant Preferences guide.Last updated on February 20, 2025UsersWebhooks Overview Notifications Tilled supports a variety of transactional email notifications to help software platforms and merchants stay informed about important events. These notifications cover merchant onboarding, account updates, and disputes. Tilled Email Matrix [https://docs.tilled.com/docs/account-configuration/notifications#email-matrix](https://docs.tilled.com/docs/account-configuration/notifications#email-matrix) The table below outlines the types of transactional emails supported by Tilled, their triggers, and whether they are supported for merchants, software platforms, or resellers. Tilled TRIGGERMERCHANTSSOFTWARE PLATFORMSRESELLERSCoreNew user invite✓✓✓Forgotten password✓✓✓Password reset successfully✓✓✓OnboardingInvite to access merchant application*✓✗✗Merchant application approved✓✓✗Merchant application declined✓✓✗Additional information requestsNew information request✓✓✗Information request reminder✓✓✗DisputesNew retrieval request✓✓✗New dispute✓✓✗Dispute won✓✓✗Dispute lost✓✓✗ TRIGGERMERCHANTSSOFTWARE PLATFORMSRESELLERS TRIGGERMERCHANTSSOFTWARE PLATFORMSRESELLERS TRIGGER TRIGGER MERCHANTS MERCHANTS SOFTWARE PLATFORMS SOFTWARE PLATFORMS RESELLERS RESELLERS CoreNew user invite✓✓✓Forgotten password✓✓✓Password reset successfully✓✓✓OnboardingInvite to access merchant application*✓✗✗Merchant application approved✓✓✗Merchant application declined✓✓✗Additional information requestsNew information request✓✓✗Information request reminder✓✓✗DisputesNew retrieval request✓✓✗New dispute✓✓✗Dispute won✓✓✗Dispute lost✓✓✗ Core Core Core New user invite✓✓✓ New user invite ✓ ✓ ✓ Forgotten password✓✓✓ Forgotten password ✓ ✓ ✓ Password reset successfully✓✓✓ Password reset successfully ✓ ✓ ✓ Onboarding Onboarding Onboarding Invite to access merchant application*✓✗✗ Invite to access merchant application* ✓ ✗ ✗ Merchant application approved✓✓✗ Merchant application approved ✓ ✓ ✗ Merchant application declined✓✓✗ Merchant application declined ✓ ✓ ✗ Additional information requests Additional information requests Additional information requests New information request✓✓✗ New information request ✓ ✓ ✗ Information request reminder✓✓✗ Information request reminder ✓ ✓ ✗ Disputes Disputes Disputes New retrieval request✓✓✗ New retrieval request ✓ ✓ ✗ New dispute✓✓✗ New dispute ✓ ✓ ✗ Dispute won✓✓✗ Dispute won ✓ ✓ ✗ Dispute lost✓✓✗ Dispute lost ✓ ✓ ✗ *The invitation email granting access to the merchant application is not sent automatically. It must be explicitly triggered by the user during the application creation process, whether initiated through the Dashboard or the API. If onboarding emails are disabled, the invitation email can still be triggered. Manage Email Notifications [https://docs.tilled.com/docs/account-configuration/notifications#manage-email-notifications](https://docs.tilled.com/docs/account-configuration/notifications#manage-email-notifications) Personal email notifications [https://docs.tilled.com/docs/account-configuration/notifications#personal-email-notifications](https://docs.tilled.com/docs/account-configuration/notifications#personal-email-notifications) To update your personal email preferences: Navigate to Account > User Profile in the Dashboard Adjust your email preferences by category Navigate to Account > User Profile in the Dashboard Account User Profile Adjust your email preferences by category Core emails cannot be disabled. Default email notifications [https://docs.tilled.com/docs/account-configuration/notifications#default-email-notifications](https://docs.tilled.com/docs/account-configuration/notifications#default-email-notifications) Default email notifications can be configured and will apply to all users on the partner account and associated merchants. For detailed steps, refer to the Merchant Preferences guide. [Merchant Preferences guide](https://docs.tilled.com/docs/merchants/merchant-preferences) Last updated on February 20, 2025 February 20, 2025 UsersWebhooks Overview [Users](https://docs.tilled.com/docs/account-configuration/users) [Webhooks Overview](https://docs.tilled.com/docs/webhooks/overview)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/webhooks/overview",
    "title": "Tilled",
    "content": "Webhooks Overview WebhooksAPI provide real-time notifications to your application about events occurring on Tilled's platform. This ensures applications can react promptly to events as they happen. Within a Tilled account, some actions happen directly after you ask for them. For example, if you add a new customer, you immediately get back information about that customer. Those instances don’t trigger a webhook, however, other events within an account are asynchronous, occurring at a later time and not as a direct result of your code execution. Common asynchronous events Successful processing of a pending ACH debit charge Notifications regarding payouts Changes in connected account statuses, which are particularly relevant during the onboarding process For these asynchronous events, Tilled notifies your integration about status changes, enabling your system to take appropriate follow-up actions. The specific responses of your webhook endpoint can vary based on the event type. Examples of actions triggered by webhooks Updating a customer’s membership status Emailing a receipt to a customer Signaling that an order is ready for fulfillment How Webhooks Work Event details are sent in JSON format, with Tilled issuing a POST request to your designated notification URL. It’s expected that your server acknowledges webhook notifications with a 2xx response code to confirm successful receipt. Tilled webhook endpoints are configured at the parent account level, ensuring that notifications encompass events across all connected accounts. Retry Behavior The current retry policy for webhook deliveries involves attempting to send the webhook 6 times over a span of approximately 65 minutes. The approximate intervals between each attempt are as follows: 10 seconds for the first retry 30 seconds for the second retry 2 minutes for the third retry 10 minutes for the fourth retry 52 minutes for the final retry Last updated on February 5, 2025NotificationsHow to Set Up Webhooks Webhooks Overview WebhooksAPI provide real-time notifications to your application about events occurring on Tilled's platform. This ensures applications can react promptly to events as they happen. [WebhooksAPI](https://docs.tilled.com/api-reference#tag/webhook-endpoints) API Tilled's Within a Tilled account, some actions happen directly after you ask for them. For example, if you add a new customer, you immediately get back information about that customer. Those instances don’t trigger a webhook, however, other events within an account are asynchronous, occurring at a later time and not as a direct result of your code execution. Tilled Common asynchronous events Common asynchronous events Successful processing of a pending ACH debit charge Notifications regarding payouts Changes in connected account statuses, which are particularly relevant during the onboarding process Successful processing of a pending ACH debit charge Notifications regarding payouts Changes in connected account statuses, which are particularly relevant during the onboarding process For these asynchronous events, Tilled notifies your integration about status changes, enabling your system to take appropriate follow-up actions. The specific responses of your webhook endpoint can vary based on the event type. Tilled Examples of actions triggered by webhooks Examples of actions triggered by webhooks Updating a customer’s membership status Emailing a receipt to a customer Signaling that an order is ready for fulfillment Updating a customer’s membership status Emailing a receipt to a customer Signaling that an order is ready for fulfillment How Webhooks Work [https://docs.tilled.com/docs/webhooks/overview#how-webhooks-work](https://docs.tilled.com/docs/webhooks/overview#how-webhooks-work) Event details are sent in JSON format, with Tilled issuing a POST request to your designated notification URL. It’s expected that your server acknowledges webhook notifications with a 2xx response code to confirm successful receipt. Tilled Tilled webhook endpoints are configured at the parent account level, ensuring that notifications encompass events across all connected accounts. Tilled Retry Behavior [https://docs.tilled.com/docs/webhooks/overview#retry-behavior](https://docs.tilled.com/docs/webhooks/overview#retry-behavior) The current retry policy for webhook deliveries involves attempting to send the webhook 6 times over a span of approximately 65 minutes. The approximate intervals between each attempt are as follows: 10 seconds for the first retry 30 seconds for the second retry 2 minutes for the third retry 10 minutes for the fourth retry 52 minutes for the final retry 10 seconds for the first retry 30 seconds for the second retry 2 minutes for the third retry 10 minutes for the fourth retry 52 minutes for the final retry Last updated on February 5, 2025 February 5, 2025 NotificationsHow to Set Up Webhooks [Notifications](https://docs.tilled.com/docs/account-configuration/notifications) [How to Set Up Webhooks](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks",
    "title": "Tilled",
    "content": "How to Set Up Webhooks This guide outlines how to configure and verify webhooks. Identify the events to monitorIdentify the specific events and their associated data objects your webhook endpoint will need to interpret.Create a webhook endpointSet up an HTTP endpoint on your local server capable of handling unauthenticated POST requests. You can utilize tools like ngrok to make your local server accessible online for testing purposes.Configure webhook endpointsTo configure webhooks through the Partner Dashboard: Navigate to Developers > Webhooks and click the Create Endpoint button Enter a webhook description and URL Select which events the webhook should trigger; specifying * will enable all events Click the Create button Webhook endpoints can also be configured using the Webhook EndpointsAPI.Handle requests from TilledYour endpoint must be configured to read event objects for the type of event notifications you want to receive. Tilled sends events to your webhook endpoint as part of a POST request with a JSON payload. Inspect event objects: Each event is delivered as an object containing an id, account_id, type and related resource information within a nested data structure. Ensure your endpoint verifies the event type and decodes the payload accordingly. Acknowledge receipt: Immediately return a 2xx series response to confirm receipt of each event, before any complex processing that might delay the response. For instance, send a 200 response before marking an order as paid in your system. Understand built in retries: Tilled automatically retries sending webhook events for non-2xx responses. Events not acknowledged with a 2xx response are considered failed, but you can query missed events to update your records accordingly. Check webhook signaturesSecure your webhook data by verifying signatures provided in the request headers. This step confirms the authenticity of the webhook requests, ensuring they are indeed from Tilled and not a third-party impersonating Tilled.1. Get the webhook endpoint’s secret: You can get this secret key from the Dashboard or API when you first configure the endpoint.2. Get the header values from the POST: Tilled employs SHA-256 hash-based message authentication codes (HMAC) for this purpose, with a focus on the “v1” signature scheme as the only valid method for live signatures. Each webhook sent by Tilled is signed, including a UTC timestamp and one or more signatures in the tilled-signature header.let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" const details = tilledSignature.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } );3. Prepare the signed payload: Combine the timestamp (as a string), a period (.), and the actual JSON payload from the request body to create the signed payload string.let payload = details.timestamp + \".\" + JSON.stringify(webhookBody);4. Identify the expected signature: Use the SHA256 hash function to create an HMAC. The signing secret of the endpoint is your key, and the signed_payload string is your message.let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex);5. Compare the signatures: Match the expected signature against the one(s) provided in the header. To validate the timing, check the difference between the current timestamp and the received timestamp, ensuring it’s within your acceptable range. For security against timing attacks, employ a constant-time string comparison method to compare the expected signature with each received signature.if (expectedSignature === details.signature) { console.log(\"Signature match with tilled_signature\"); }Refer to the following example:// Can be found in the webhook payload header let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" // Can be found in the payload let body = JSON.stringify(webhook.body); const details = parseHeader(tilled_signature, \"v1\"); console.log(details); if (!details || details.timestamp === -1) { try { throw new Error(\"Unable to extract timestamp and signature from header\") console.log(\"Unable to extract timestamp and signature from header\") } catch (e) { console.log(e.name, e.message); } } if (!details || details.signature === -1) { try { throw new Error(\"No signature found with expected scheme\") console.log(\"No signature found with expected scheme\") } catch (e) { console.log(e.name, e.message); } } let payload = details.timestamp + \".\" + body; let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); console.log(expectedSignature); if(expectedSignature == details.signature) { console.log(\"Signature match with tilled_signature\"); } function parseHeader(header, scheme) { if (typeof header !== 'string') { return null; } return header.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); }Last updated on July 23, 2024Webhooks OverviewWebhook Events How to Set Up Webhooks This guide outlines how to configure and verify webhooks. Identify the events to monitorIdentify the specific events and their associated data objects your webhook endpoint will need to interpret.Create a webhook endpointSet up an HTTP endpoint on your local server capable of handling unauthenticated POST requests. You can utilize tools like ngrok to make your local server accessible online for testing purposes.Configure webhook endpointsTo configure webhooks through the Partner Dashboard: Navigate to Developers > Webhooks and click the Create Endpoint button Enter a webhook description and URL Select which events the webhook should trigger; specifying * will enable all events Click the Create button Webhook endpoints can also be configured using the Webhook EndpointsAPI.Handle requests from TilledYour endpoint must be configured to read event objects for the type of event notifications you want to receive. Tilled sends events to your webhook endpoint as part of a POST request with a JSON payload. Inspect event objects: Each event is delivered as an object containing an id, account_id, type and related resource information within a nested data structure. Ensure your endpoint verifies the event type and decodes the payload accordingly. Acknowledge receipt: Immediately return a 2xx series response to confirm receipt of each event, before any complex processing that might delay the response. For instance, send a 200 response before marking an order as paid in your system. Understand built in retries: Tilled automatically retries sending webhook events for non-2xx responses. Events not acknowledged with a 2xx response are considered failed, but you can query missed events to update your records accordingly. Check webhook signaturesSecure your webhook data by verifying signatures provided in the request headers. This step confirms the authenticity of the webhook requests, ensuring they are indeed from Tilled and not a third-party impersonating Tilled.1. Get the webhook endpoint’s secret: You can get this secret key from the Dashboard or API when you first configure the endpoint.2. Get the header values from the POST: Tilled employs SHA-256 hash-based message authentication codes (HMAC) for this purpose, with a focus on the “v1” signature scheme as the only valid method for live signatures. Each webhook sent by Tilled is signed, including a UTC timestamp and one or more signatures in the tilled-signature header.let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" const details = tilledSignature.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } );3. Prepare the signed payload: Combine the timestamp (as a string), a period (.), and the actual JSON payload from the request body to create the signed payload string.let payload = details.timestamp + \".\" + JSON.stringify(webhookBody);4. Identify the expected signature: Use the SHA256 hash function to create an HMAC. The signing secret of the endpoint is your key, and the signed_payload string is your message.let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex);5. Compare the signatures: Match the expected signature against the one(s) provided in the header. To validate the timing, check the difference between the current timestamp and the received timestamp, ensuring it’s within your acceptable range. For security against timing attacks, employ a constant-time string comparison method to compare the expected signature with each received signature.if (expectedSignature === details.signature) { console.log(\"Signature match with tilled_signature\"); }Refer to the following example:// Can be found in the webhook payload header let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" // Can be found in the payload let body = JSON.stringify(webhook.body); const details = parseHeader(tilled_signature, \"v1\"); console.log(details); if (!details || details.timestamp === -1) { try { throw new Error(\"Unable to extract timestamp and signature from header\") console.log(\"Unable to extract timestamp and signature from header\") } catch (e) { console.log(e.name, e.message); } } if (!details || details.signature === -1) { try { throw new Error(\"No signature found with expected scheme\") console.log(\"No signature found with expected scheme\") } catch (e) { console.log(e.name, e.message); } } let payload = details.timestamp + \".\" + body; let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); console.log(expectedSignature); if(expectedSignature == details.signature) { console.log(\"Signature match with tilled_signature\"); } function parseHeader(header, scheme) { if (typeof header !== 'string') { return null; } return header.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); } Identify the events to monitor [https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#identify-the-events-to-monitor](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#identify-the-events-to-monitor) Identify the specific events and their associated data objects your webhook endpoint will need to interpret. [events](https://docs.tilled.com/docs/webhooks/webhook-events) Create a webhook endpoint [https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#create-a-webhook-endpoint](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#create-a-webhook-endpoint) Set up an HTTP endpoint on your local server capable of handling unauthenticated POST requests. You can utilize tools like ngrok to make your local server accessible online for testing purposes. [ngrok](https://ngrok.io/) Configure webhook endpoints [https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#configure-webhook-endpoints](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#configure-webhook-endpoints) To configure webhooks through the Partner Dashboard: Navigate to Developers > Webhooks and click the Create Endpoint button Enter a webhook description and URL Select which events the webhook should trigger; specifying * will enable all events Click the Create button Navigate to Developers > Webhooks and click the Create Endpoint button Developers > Webhooks Create Endpoint Enter a webhook description and URL Select which events the webhook should trigger; specifying * will enable all events * Click the Create button Create Webhook endpoints can also be configured using the Webhook EndpointsAPI. [Webhook EndpointsAPI](https://docs.tilled.com/api-reference#tag/webhook-endpoints) API Handle requests from Tilled Tilled [https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#handle-requests-from-](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#handle-requests-from-) Your endpoint must be configured to read event objects for the type of event notifications you want to receive. Tilled sends events to your webhook endpoint as part of a POST request with a JSON payload. Tilled Inspect event objects: Each event is delivered as an object containing an id, account_id, type and related resource information within a nested data structure. Ensure your endpoint verifies the event type and decodes the payload accordingly. Acknowledge receipt: Immediately return a 2xx series response to confirm receipt of each event, before any complex processing that might delay the response. For instance, send a 200 response before marking an order as paid in your system. Understand built in retries: Tilled automatically retries sending webhook events for non-2xx responses. Events not acknowledged with a 2xx response are considered failed, but you can query missed events to update your records accordingly. Inspect event objects: Each event is delivered as an object containing an id, account_id, type and related resource information within a nested data structure. Ensure your endpoint verifies the event type and decodes the payload accordingly. Inspect event objects: id account_id type Acknowledge receipt: Immediately return a 2xx series response to confirm receipt of each event, before any complex processing that might delay the response. For instance, send a 200 response before marking an order as paid in your system. Acknowledge receipt: Understand built in retries: Tilled automatically retries sending webhook events for non-2xx responses. Events not acknowledged with a 2xx response are considered failed, but you can query missed events to update your records accordingly. Understand built in retries: Tilled Check webhook signatures [https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#check-webhook-signatures](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks#check-webhook-signatures) Secure your webhook data by verifying signatures provided in the request headers. This step confirms the authenticity of the webhook requests, ensuring they are indeed from Tilled and not a third-party impersonating Tilled. Tilled Tilled 1. Get the webhook endpoint’s secret: You can get this secret key from the Dashboard or API when you first configure the endpoint. 1. Get the webhook endpoint’s secret: 2. Get the header values from the POST: Tilled employs SHA-256 hash-based message authentication codes (HMAC) for this purpose, with a focus on the “v1” signature scheme as the only valid method for live signatures. Each webhook sent by Tilled is signed, including a UTC timestamp and one or more signatures in the tilled-signature header. 2. Get the header values from the POST: Tilled Tilled tilled-signature tilled let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" const details = tilledSignature.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" const details = tilledSignature.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" const details = tilledSignature.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" const details = tilledSignature.split(',').reduce( const details = tilledSignature . split ( ',' ) . reduce ( (accum, item) => { ( accum , item ) => { const kv = item.split('='); const kv = item . split ( '=' ) ; if (kv[0] === 't') { if ( kv [ 0 ] === 't' ) { accum.timestamp = kv[1]; accum . timestamp = kv [ 1 ] ; } } if (kv[0] === scheme) { if ( kv [ 0 ] === scheme ) { accum.signature = kv[1]; accum . signature = kv [ 1 ] ; } } return accum; return accum ; }, } , { { timestamp: -1, timestamp : - 1 , signature: -1, signature : - 1 , } } ); ) ; 3. Prepare the signed payload: Combine the timestamp (as a string), a period (.), and the actual JSON payload from the request body to create the signed payload string. 3. Prepare the signed payload: let payload = details.timestamp + \".\" + JSON.stringify(webhookBody); let payload = details.timestamp + \".\" + JSON.stringify(webhookBody); let payload = details.timestamp + \".\" + JSON.stringify(webhookBody); let payload = details.timestamp + \".\" + JSON.stringify(webhookBody); let payload = details . timestamp + \".\" + JSON . stringify ( webhookBody ) ; 4. Identify the expected signature: Use the SHA256 hash function to create an HMAC. The signing secret of the endpoint is your key, and the signed_payload string is your message. 4. Identify the expected signature: signed_payload let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); let expectedSignature = CryptoJS . HmacSHA256 ( payload , private_key ) . toString ( CryptoJS . enc . Hex ) ; 5. Compare the signatures: Match the expected signature against the one(s) provided in the header. To validate the timing, check the difference between the current timestamp and the received timestamp, ensuring it’s within your acceptable range. For security against timing attacks, employ a constant-time string comparison method to compare the expected signature with each received signature. 5. Compare the signatures: if (expectedSignature === details.signature) { console.log(\"Signature match with tilled_signature\"); } if (expectedSignature === details.signature) { console.log(\"Signature match with tilled_signature\"); } if (expectedSignature === details.signature) { console.log(\"Signature match with tilled_signature\"); } if (expectedSignature === details.signature) { if ( expectedSignature === details . signature ) { console.log(\"Signature match with tilled_signature\"); console . log ( \"Signature match with tilled_signature\" ) ; } } Refer to the following example: // Can be found in the webhook payload header let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" // Can be found in the payload let body = JSON.stringify(webhook.body); const details = parseHeader(tilled_signature, \"v1\"); console.log(details); if (!details || details.timestamp === -1) { try { throw new Error(\"Unable to extract timestamp and signature from header\") console.log(\"Unable to extract timestamp and signature from header\") } catch (e) { console.log(e.name, e.message); } } if (!details || details.signature === -1) { try { throw new Error(\"No signature found with expected scheme\") console.log(\"No signature found with expected scheme\") } catch (e) { console.log(e.name, e.message); } } let payload = details.timestamp + \".\" + body; let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); console.log(expectedSignature); if(expectedSignature == details.signature) { console.log(\"Signature match with tilled_signature\"); } function parseHeader(header, scheme) { if (typeof header !== 'string') { return null; } return header.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); } // Can be found in the webhook payload header let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" // Can be found in the payload let body = JSON.stringify(webhook.body); const details = parseHeader(tilled_signature, \"v1\"); console.log(details); if (!details || details.timestamp === -1) { try { throw new Error(\"Unable to extract timestamp and signature from header\") console.log(\"Unable to extract timestamp and signature from header\") } catch (e) { console.log(e.name, e.message); } } if (!details || details.signature === -1) { try { throw new Error(\"No signature found with expected scheme\") console.log(\"No signature found with expected scheme\") } catch (e) { console.log(e.name, e.message); } } let payload = details.timestamp + \".\" + body; let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); console.log(expectedSignature); if(expectedSignature == details.signature) { console.log(\"Signature match with tilled_signature\"); } function parseHeader(header, scheme) { if (typeof header !== 'string') { return null; } return header.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); } // Can be found in the webhook payload header let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" // Can be found in the payload let body = JSON.stringify(webhook.body); const details = parseHeader(tilled_signature, \"v1\"); console.log(details); if (!details || details.timestamp === -1) { try { throw new Error(\"Unable to extract timestamp and signature from header\") console.log(\"Unable to extract timestamp and signature from header\") } catch (e) { console.log(e.name, e.message); } } if (!details || details.signature === -1) { try { throw new Error(\"No signature found with expected scheme\") console.log(\"No signature found with expected scheme\") } catch (e) { console.log(e.name, e.message); } } let payload = details.timestamp + \".\" + body; let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); console.log(expectedSignature); if(expectedSignature == details.signature) { console.log(\"Signature match with tilled_signature\"); } function parseHeader(header, scheme) { if (typeof header !== 'string') { return null; } return header.split(',').reduce( (accum, item) => { const kv = item.split('='); if (kv[0] === 't') { accum.timestamp = kv[1]; } if (kv[0] === scheme) { accum.signature = kv[1]; } return accum; }, { timestamp: -1, signature: -1, } ); } // Can be found in the webhook payload header // Can be found in the webhook payload header let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\" // Can be found in the payload // Can be found in the payload let body = JSON.stringify(webhook.body); let body = JSON . stringify ( webhook . body ) ; const details = parseHeader(tilled_signature, \"v1\"); const details = parseHeader ( tilled_signature , \"v1\" ) ; console.log(details); console . log ( details ) ; if (!details || details.timestamp === -1) { if ( ! details || details . timestamp === - 1 ) { try { try { throw new Error(\"Unable to extract timestamp and signature from header\") throw new Error ( \"Unable to extract timestamp and signature from header\" ) console.log(\"Unable to extract timestamp and signature from header\") console . log ( \"Unable to extract timestamp and signature from header\" ) } catch (e) { } catch ( e ) { console.log(e.name, e.message); console . log ( e . name , e . message ) ; } } } } if (!details || details.signature === -1) { if ( ! details || details . signature === - 1 ) { try { try { throw new Error(\"No signature found with expected scheme\") throw new Error ( \"No signature found with expected scheme\" ) console.log(\"No signature found with expected scheme\") console . log ( \"No signature found with expected scheme\" ) } catch (e) { } catch ( e ) { console.log(e.name, e.message); console . log ( e . name , e . message ) ; } } } } let payload = details.timestamp + \".\" + body; let payload = details . timestamp + \".\" + body ; let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex); let expectedSignature = CryptoJS . HmacSHA256 ( payload , private_key ) . toString ( CryptoJS . enc . Hex ) ; console.log(expectedSignature); console . log ( expectedSignature ) ; if(expectedSignature == details.signature) { if ( expectedSignature == details . signature ) { console.log(\"Signature match with tilled_signature\"); console . log ( \"Signature match with tilled_signature\" ) ; } } function parseHeader(header, scheme) { function parseHeader ( header , scheme ) { if (typeof header !== 'string') { if ( typeof header !== 'string' ) { return null; return null ; } } return header.split(',').reduce( return header . split ( ',' ) . reduce ( (accum, item) => { ( accum , item ) => { const kv = item.split('='); const kv = item . split ( '=' ) ; if (kv[0] === 't') { if ( kv [ 0 ] === 't' ) { accum.timestamp = kv[1]; accum . timestamp = kv [ 1 ] ; } } if (kv[0] === scheme) { if ( kv [ 0 ] === scheme ) { accum.signature = kv[1]; accum . signature = kv [ 1 ] ; } } return accum; return accum ; }, } , { { timestamp: -1, timestamp : - 1 , signature: -1, signature : - 1 , } } ); ) ; } } Last updated on July 23, 2024 July 23, 2024 Webhooks OverviewWebhook Events [Webhooks Overview](https://docs.tilled.com/docs/webhooks/overview) [Webhook Events](https://docs.tilled.com/docs/webhooks/webhook-events)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/webhooks/webhook-events",
    "title": "Tilled",
    "content": "Webhook Events Each event is delivered as an object containing an id, account_id, type and related resource information within a nested data structure. KEYTYPEDESCRIPTIONidstringUnique identifier of the eventaccount_idstringUnique identifier of the associated accounttypestringDescription of the eventdatastringData associated with the event Refer to the sample event payload for the payment_intent.succeeded event: { \"id\": \"evt_qLX9Fqyspi8bk0j06yc7s\", \"account_id\": \"acct_QvlHDyOkQ44HFHsZGs0Gi\", \"type\": \"payment_intent.succeeded\", \"data\": { \"id\": \"pi_Hf068QvxJax26OBIKgmw9\", \"status\": \"succeeded\", ... } } Event Types The table below defines the available webhook events. EVENTDESCRIPTIONaccount.updatedOccurs when an account is updated, such as the merchant application status switching from in_review to activecharge.capturedOccurs when a charge is capturedcharge.expiredOccurs when a charge expirescharge.failedOccurs when a charge failscharge.succeededOccurs when a charge succeedscharge.pendingOccurs when a pending charge is createdcharge.refundedOccurs when a charge is refundedcharge.refund.pendingOccurs when a refund is pendingcharge.refund.updatedOccurs when a refund is confirmed as succeeded or failedcharge.updatedOccurs when a charge is updatedcustomer.createdOccurs when a customer is createdcustomer.deletedOccurs when a customer is deletedcustomer.updatedOccurs when a customer is updateddispute.createdOccurs when a customer disputes a chargedispute.updatedOccurs when a dispute is updated, such as being ruled won or lostpayment_intent.canceledOccurs when a payment intent is canceledpayment_intent.createdOccurs when a payment intent is createdpayment_intent.payment_failedOccurs when a payment intent failspayment_intent.processingOccurs when a payment intent begins processingpayment_intent.requires_actionOccurs when a payment intent requires action, such as adding a payment methodpayment_intent.succeededOccurs when a payment intent succeedspayment_intent.amount_capturable_updatedOccurs when the capturable amount on a payment intent succeedspayment_method.attachedOccurs when a payment method is attached to a customerpayment_method.detachedOccurs when a payment method is detached from a customerpayment_method.updatedOccurs when a payment method is updated by the Card Account Updater servicepayout.createdOccurs when a pending payout is createdpayout.failedOccurs when a payout fails, such as when the merchant’s bank account information is incorrectpayout.paidOccurs when a payout is sent to the merchantpayout.updatedOccurs when a payout is updatedplatform_fee.createdOccurs when a platform fee is successfully collectedplatform_fee.refundedOccurs when a platform fee is refundedsubscription.createdOccurs when a subscription is createdsubscription.canceledOccurs when a subscription is canceledsubscription.updatedOccurs when a subscription is updatedreport_run.succeededOccurs when a report successfully generatesreport_run.failedOccurs when a report fails to generateLast updated on October 25, 2024How to Set Up WebhooksGlossary Webhook Events Each event is delivered as an object containing an id, account_id, type and related resource information within a nested data structure. id account_id type KEYTYPEDESCRIPTIONidstringUnique identifier of the eventaccount_idstringUnique identifier of the associated accounttypestringDescription of the eventdatastringData associated with the event KEYTYPEDESCRIPTION KEYTYPEDESCRIPTION KEY KEY TYPE TYPE DESCRIPTION DESCRIPTION idstringUnique identifier of the eventaccount_idstringUnique identifier of the associated accounttypestringDescription of the eventdatastringData associated with the event idstringUnique identifier of the event id id string Unique identifier of the event account_idstringUnique identifier of the associated account account_id account_id string Unique identifier of the associated account typestringDescription of the event type type string Description of the event datastringData associated with the event data data string Data associated with the event Refer to the sample event payload for the payment_intent.succeeded event: payment_intent.succeeded { \"id\": \"evt_qLX9Fqyspi8bk0j06yc7s\", \"account_id\": \"acct_QvlHDyOkQ44HFHsZGs0Gi\", \"type\": \"payment_intent.succeeded\", \"data\": { \"id\": \"pi_Hf068QvxJax26OBIKgmw9\", \"status\": \"succeeded\", ... } } { \"id\": \"evt_qLX9Fqyspi8bk0j06yc7s\", \"account_id\": \"acct_QvlHDyOkQ44HFHsZGs0Gi\", \"type\": \"payment_intent.succeeded\", \"data\": { \"id\": \"pi_Hf068QvxJax26OBIKgmw9\", \"status\": \"succeeded\", ... } } { \"id\": \"evt_qLX9Fqyspi8bk0j06yc7s\", \"account_id\": \"acct_QvlHDyOkQ44HFHsZGs0Gi\", \"type\": \"payment_intent.succeeded\", \"data\": { \"id\": \"pi_Hf068QvxJax26OBIKgmw9\", \"status\": \"succeeded\", ... } } { { \"id\": \"evt_qLX9Fqyspi8bk0j06yc7s\", \"id\" : \"evt_qLX9Fqyspi8bk0j06yc7s\" , \"account_id\": \"acct_QvlHDyOkQ44HFHsZGs0Gi\", \"account_id\" : \"acct_QvlHDyOkQ44HFHsZGs0Gi\" , \"type\": \"payment_intent.succeeded\", \"type\" : \"payment_intent.succeeded\" , \"data\": { \"data\" : { \"id\": \"pi_Hf068QvxJax26OBIKgmw9\", \"id\" : \"pi_Hf068QvxJax26OBIKgmw9\" , \"status\": \"succeeded\", \"status\" : \"succeeded\" , ... } } } } Event Types [https://docs.tilled.com/docs/webhooks/webhook-events#event-types](https://docs.tilled.com/docs/webhooks/webhook-events#event-types) The table below defines the available webhook events. EVENTDESCRIPTIONaccount.updatedOccurs when an account is updated, such as the merchant application status switching from in_review to activecharge.capturedOccurs when a charge is capturedcharge.expiredOccurs when a charge expirescharge.failedOccurs when a charge failscharge.succeededOccurs when a charge succeedscharge.pendingOccurs when a pending charge is createdcharge.refundedOccurs when a charge is refundedcharge.refund.pendingOccurs when a refund is pendingcharge.refund.updatedOccurs when a refund is confirmed as succeeded or failedcharge.updatedOccurs when a charge is updatedcustomer.createdOccurs when a customer is createdcustomer.deletedOccurs when a customer is deletedcustomer.updatedOccurs when a customer is updateddispute.createdOccurs when a customer disputes a chargedispute.updatedOccurs when a dispute is updated, such as being ruled won or lostpayment_intent.canceledOccurs when a payment intent is canceledpayment_intent.createdOccurs when a payment intent is createdpayment_intent.payment_failedOccurs when a payment intent failspayment_intent.processingOccurs when a payment intent begins processingpayment_intent.requires_actionOccurs when a payment intent requires action, such as adding a payment methodpayment_intent.succeededOccurs when a payment intent succeedspayment_intent.amount_capturable_updatedOccurs when the capturable amount on a payment intent succeedspayment_method.attachedOccurs when a payment method is attached to a customerpayment_method.detachedOccurs when a payment method is detached from a customerpayment_method.updatedOccurs when a payment method is updated by the Card Account Updater servicepayout.createdOccurs when a pending payout is createdpayout.failedOccurs when a payout fails, such as when the merchant’s bank account information is incorrectpayout.paidOccurs when a payout is sent to the merchantpayout.updatedOccurs when a payout is updatedplatform_fee.createdOccurs when a platform fee is successfully collectedplatform_fee.refundedOccurs when a platform fee is refundedsubscription.createdOccurs when a subscription is createdsubscription.canceledOccurs when a subscription is canceledsubscription.updatedOccurs when a subscription is updatedreport_run.succeededOccurs when a report successfully generatesreport_run.failedOccurs when a report fails to generate EVENTDESCRIPTION EVENTDESCRIPTION EVENT EVENT DESCRIPTION DESCRIPTION account.updatedOccurs when an account is updated, such as the merchant application status switching from in_review to activecharge.capturedOccurs when a charge is capturedcharge.expiredOccurs when a charge expirescharge.failedOccurs when a charge failscharge.succeededOccurs when a charge succeedscharge.pendingOccurs when a pending charge is createdcharge.refundedOccurs when a charge is refundedcharge.refund.pendingOccurs when a refund is pendingcharge.refund.updatedOccurs when a refund is confirmed as succeeded or failedcharge.updatedOccurs when a charge is updatedcustomer.createdOccurs when a customer is createdcustomer.deletedOccurs when a customer is deletedcustomer.updatedOccurs when a customer is updateddispute.createdOccurs when a customer disputes a chargedispute.updatedOccurs when a dispute is updated, such as being ruled won or lostpayment_intent.canceledOccurs when a payment intent is canceledpayment_intent.createdOccurs when a payment intent is createdpayment_intent.payment_failedOccurs when a payment intent failspayment_intent.processingOccurs when a payment intent begins processingpayment_intent.requires_actionOccurs when a payment intent requires action, such as adding a payment methodpayment_intent.succeededOccurs when a payment intent succeedspayment_intent.amount_capturable_updatedOccurs when the capturable amount on a payment intent succeedspayment_method.attachedOccurs when a payment method is attached to a customerpayment_method.detachedOccurs when a payment method is detached from a customerpayment_method.updatedOccurs when a payment method is updated by the Card Account Updater servicepayout.createdOccurs when a pending payout is createdpayout.failedOccurs when a payout fails, such as when the merchant’s bank account information is incorrectpayout.paidOccurs when a payout is sent to the merchantpayout.updatedOccurs when a payout is updatedplatform_fee.createdOccurs when a platform fee is successfully collectedplatform_fee.refundedOccurs when a platform fee is refundedsubscription.createdOccurs when a subscription is createdsubscription.canceledOccurs when a subscription is canceledsubscription.updatedOccurs when a subscription is updatedreport_run.succeededOccurs when a report successfully generatesreport_run.failedOccurs when a report fails to generate account.updatedOccurs when an account is updated, such as the merchant application status switching from in_review to active account.updated account.updated Occurs when an account is updated, such as the merchant application status switching from in_review to active in_review active charge.capturedOccurs when a charge is captured charge.captured charge.captured Occurs when a charge is captured charge.expiredOccurs when a charge expires charge.expired charge.expired Occurs when a charge expires charge.failedOccurs when a charge fails charge.failed charge.failed Occurs when a charge fails charge.succeededOccurs when a charge succeeds charge.succeeded charge.succeeded Occurs when a charge succeeds charge.pendingOccurs when a pending charge is created charge.pending charge.pending Occurs when a pending charge is created charge.refundedOccurs when a charge is refunded charge.refunded charge.refunded Occurs when a charge is refunded charge.refund.pendingOccurs when a refund is pending charge.refund.pending charge.refund.pending Occurs when a refund is pending charge.refund.updatedOccurs when a refund is confirmed as succeeded or failed charge.refund.updated charge.refund.updated Occurs when a refund is confirmed as succeeded or failed charge.updatedOccurs when a charge is updated charge.updated charge.updated Occurs when a charge is updated customer.createdOccurs when a customer is created customer.created customer.created Occurs when a customer is created customer.deletedOccurs when a customer is deleted customer.deleted customer.deleted Occurs when a customer is deleted customer.updatedOccurs when a customer is updated customer.updated customer.updated Occurs when a customer is updated dispute.createdOccurs when a customer disputes a charge dispute.created dispute.created Occurs when a customer disputes a charge dispute.updatedOccurs when a dispute is updated, such as being ruled won or lost dispute.updated dispute.updated Occurs when a dispute is updated, such as being ruled won or lost payment_intent.canceledOccurs when a payment intent is canceled payment_intent.canceled payment_intent.canceled Occurs when a payment intent is canceled payment_intent.createdOccurs when a payment intent is created payment_intent.created payment_intent.created Occurs when a payment intent is created payment_intent.payment_failedOccurs when a payment intent fails payment_intent.payment_failed payment_intent.payment_failed Occurs when a payment intent fails payment_intent.processingOccurs when a payment intent begins processing payment_intent.processing payment_intent.processing Occurs when a payment intent begins processing payment_intent.requires_actionOccurs when a payment intent requires action, such as adding a payment method payment_intent.requires_action payment_intent.requires_action Occurs when a payment intent requires action, such as adding a payment method payment_intent.succeededOccurs when a payment intent succeeds payment_intent.succeeded payment_intent.succeeded Occurs when a payment intent succeeds payment_intent.amount_capturable_updatedOccurs when the capturable amount on a payment intent succeeds payment_intent.amount_capturable_updated payment_intent.amount_capturable_updated Occurs when the capturable amount on a payment intent succeeds payment_method.attachedOccurs when a payment method is attached to a customer payment_method.attached payment_method.attached Occurs when a payment method is attached to a customer payment_method.detachedOccurs when a payment method is detached from a customer payment_method.detached payment_method.detached Occurs when a payment method is detached from a customer payment_method.updatedOccurs when a payment method is updated by the Card Account Updater service payment_method.updated payment_method.updated Occurs when a payment method is updated by the Card Account Updater service payout.createdOccurs when a pending payout is created payout.created payout.created Occurs when a pending payout is created payout.failedOccurs when a payout fails, such as when the merchant’s bank account information is incorrect payout.failed payout.failed Occurs when a payout fails, such as when the merchant’s bank account information is incorrect payout.paidOccurs when a payout is sent to the merchant payout.paid payout.paid Occurs when a payout is sent to the merchant payout.updatedOccurs when a payout is updated payout.updated payout.updated Occurs when a payout is updated platform_fee.createdOccurs when a platform fee is successfully collected platform_fee.created platform_fee.created Occurs when a platform fee is successfully collected platform_fee.refundedOccurs when a platform fee is refunded platform_fee.refunded platform_fee.refunded Occurs when a platform fee is refunded subscription.createdOccurs when a subscription is created subscription.created subscription.created Occurs when a subscription is created subscription.canceledOccurs when a subscription is canceled subscription.canceled subscription.canceled Occurs when a subscription is canceled subscription.updatedOccurs when a subscription is updated subscription.updated subscription.updated Occurs when a subscription is updated report_run.succeededOccurs when a report successfully generates report_run.succeeded report_run.succeeded Occurs when a report successfully generates report_run.failedOccurs when a report fails to generate report_run.failed report_run.failed Occurs when a report fails to generate Last updated on October 25, 2024 October 25, 2024 How to Set Up WebhooksGlossary [How to Set Up Webhooks](https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks) [Glossary](https://docs.tilled.com/docs/resources/glossary)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/glossary",
    "title": "Tilled",
    "content": "Glossary Familiarize yourself with key terms and concepts. TERMDEFINITIONConnected accountAn account linked to a parent account. For software platforms accounts, connected accounts represent their merchants, while for reseller accounts, connected accounts include both their software platforms and merchants.MerchantA business using a software platform to manage their operations and process payments.MetadataAllows you to attach key-value pairs to Tilled objects, providing additional structured information about Account, Customer, Payment Intent, Refund, and Subscription objects.PartnerA software platform leveraging Tilled for its payment capabilities.Payment intentA payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation.PayoutFunds deposited or withdrawn from a merchant’s bank account.Pricing templateUsed to onboard new merchants and update pricing for existing merchants, the pricing template stores key pricing details related to a payment method.ResellerAn organization managing a portfolio of software platforms and their associated merchants.SaaS accountA software platform’s merchant account that is typically used to bill their customers for SaaS fees.SettlementThe process by which authorized payments are batched and sent for processing by the card networks for clearing and funding.Last updated on February 5, 2025Webhook EventsMetadata Glossary Familiarize yourself with key terms and concepts. TERMDEFINITIONConnected accountAn account linked to a parent account. For software platforms accounts, connected accounts represent their merchants, while for reseller accounts, connected accounts include both their software platforms and merchants.MerchantA business using a software platform to manage their operations and process payments.MetadataAllows you to attach key-value pairs to Tilled objects, providing additional structured information about Account, Customer, Payment Intent, Refund, and Subscription objects.PartnerA software platform leveraging Tilled for its payment capabilities.Payment intentA payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation.PayoutFunds deposited or withdrawn from a merchant’s bank account.Pricing templateUsed to onboard new merchants and update pricing for existing merchants, the pricing template stores key pricing details related to a payment method.ResellerAn organization managing a portfolio of software platforms and their associated merchants.SaaS accountA software platform’s merchant account that is typically used to bill their customers for SaaS fees.SettlementThe process by which authorized payments are batched and sent for processing by the card networks for clearing and funding. TERMDEFINITION TERMDEFINITION TERM TERM DEFINITION DEFINITION Connected accountAn account linked to a parent account. For software platforms accounts, connected accounts represent their merchants, while for reseller accounts, connected accounts include both their software platforms and merchants.MerchantA business using a software platform to manage their operations and process payments.MetadataAllows you to attach key-value pairs to Tilled objects, providing additional structured information about Account, Customer, Payment Intent, Refund, and Subscription objects.PartnerA software platform leveraging Tilled for its payment capabilities.Payment intentA payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation.PayoutFunds deposited or withdrawn from a merchant’s bank account.Pricing templateUsed to onboard new merchants and update pricing for existing merchants, the pricing template stores key pricing details related to a payment method.ResellerAn organization managing a portfolio of software platforms and their associated merchants.SaaS accountA software platform’s merchant account that is typically used to bill their customers for SaaS fees.SettlementThe process by which authorized payments are batched and sent for processing by the card networks for clearing and funding. Connected accountAn account linked to a parent account. For software platforms accounts, connected accounts represent their merchants, while for reseller accounts, connected accounts include both their software platforms and merchants. Connected account An account linked to a parent account. For software platforms accounts, connected accounts represent their merchants, while for reseller accounts, connected accounts include both their software platforms and merchants. MerchantA business using a software platform to manage their operations and process payments. Merchant A business using a software platform to manage their operations and process payments. MetadataAllows you to attach key-value pairs to Tilled objects, providing additional structured information about Account, Customer, Payment Intent, Refund, and Subscription objects. Metadata Allows you to attach key-value pairs to Tilled objects, providing additional structured information about Account, Customer, Payment Intent, Refund, and Subscription objects. Tilled PartnerA software platform leveraging Tilled for its payment capabilities. Partner A software platform leveraging Tilled for its payment capabilities. Tilled Payment intentA payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. Payment intent A payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. PayoutFunds deposited or withdrawn from a merchant’s bank account. Payout Funds deposited or withdrawn from a merchant’s bank account. Pricing templateUsed to onboard new merchants and update pricing for existing merchants, the pricing template stores key pricing details related to a payment method. Pricing template Used to onboard new merchants and update pricing for existing merchants, the pricing template stores key pricing details related to a payment method. ResellerAn organization managing a portfolio of software platforms and their associated merchants. Reseller An organization managing a portfolio of software platforms and their associated merchants. SaaS accountA software platform’s merchant account that is typically used to bill their customers for SaaS fees. SaaS account A software platform’s merchant account that is typically used to bill their customers for SaaS fees. SettlementThe process by which authorized payments are batched and sent for processing by the card networks for clearing and funding. Settlement The process by which authorized payments are batched and sent for processing by the card networks for clearing and funding. Last updated on February 5, 2025 February 5, 2025 Webhook EventsMetadata [Webhook Events](https://docs.tilled.com/docs/webhooks/webhook-events) [Metadata](https://docs.tilled.com/docs/resources/metadata)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/metadata",
    "title": "Tilled",
    "content": "Metadata Updatable Tilled objects—including AccountsAPI, CustomersAPI, Payment IntentsAPI, RefundAPI, and SubscriptionsAPI—have a metadata parameter for attaching key-value data. Metadata allows you to attach key-value pairs of data, providing a flexible way to store additional information that is not directly used by Tilled, such as a user’s full name or unique identifiers. Overview Key aspects You may specify up to 50 keys. Key names can be up to 40 characters long. Values can contain up to 500 characters each. Important considerations Only string values are permissible; null values will be disregarded. Avoid storing sensitive information within metadata to maintain data security. Do not include objects, arrays, or booleans in metadata unless they are converted to strings. Filter by metadata tags Tilled's API supports filtering records by metadata tags. This is useful for segmenting your data and simplifying the retrieval of specific records based on set criteria. Filtering across metadata is available when using the LIST operation. To filter by a metadata tag, include a query parameter in your API request that specifies the metadata key and value you want to filter by. For example, to filter for customers with a specific membership level, use the query below. LIST /customers?metadata[membership_level]=gold This request will return only those customers whose membership_level metadata is set to “gold”. Utilizing metadata for filtering is particularly effective for segmenting your data and simplifying the retrieval of specific records based on set criteria. Sample Use Cases USE CASEOBJECTMETADATA KEYDESCRIPTIONEnhanced reporting and trackingPayment IntentsAPIinvoice_numberAttach your platform's invoice number to each payment, facilitating easier cross-referencing and reconciliation across your software and Tilled.Custom payment tagsPayment IntentsAPIpayment_tagCreate custom tags for payments to categorize them for various purposes such as marketing campaigns, product lines, or sales channels.Customer identificationCustomersAPIplatform_customer_idStore unique customer identifiers within the Tilled platform, allowing seamless integration and easy lookup of customer information, enhancing customer management and supportAdditional customer informationCustomersAPIcustomer_notesAdd notes or additional information about customers that may be relevant for support or marketing purposes, such as preferences or account status.Subscription tier informationSubscriptionsAPIsubscription_tierInclude details about subscription plans (e.g., gold, silver, platinum) to help manage and categorize subscriptions.Detailed refund reasonsRefundsAPIrefund_reason_detailProvide detailed reasons for refunds beyond standard reason properties, adding notes and context for complex scenarios.Last updated on July 18, 2024GlossaryTesting Metadata Updatable Tilled objects—including AccountsAPI, CustomersAPI, Payment IntentsAPI, RefundAPI, and SubscriptionsAPI—have a metadata parameter for attaching key-value data. Metadata allows you to attach key-value pairs of data, providing a flexible way to store additional information that is not directly used by Tilled, such as a user’s full name or unique identifiers. Tilled [AccountsAPI](https://docs.tilled.com/api-reference#tag/accounts) API [CustomersAPI](https://docs.tilled.com/api-reference#tag/customers) API [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API [RefundAPI](https://docs.tilled.com/api-reference#tag/refunds) API [SubscriptionsAPI](https://docs.tilled.com/api-reference#tag/subscriptions) API Tilled Overview [https://docs.tilled.com/docs/resources/metadata#overview](https://docs.tilled.com/docs/resources/metadata#overview) Key aspects [https://docs.tilled.com/docs/resources/metadata#key-aspects](https://docs.tilled.com/docs/resources/metadata#key-aspects) You may specify up to 50 keys. Key names can be up to 40 characters long. Values can contain up to 500 characters each. You may specify up to 50 keys. Key names can be up to 40 characters long. Values can contain up to 500 characters each. Important considerations [https://docs.tilled.com/docs/resources/metadata#important-considerations](https://docs.tilled.com/docs/resources/metadata#important-considerations) Only string values are permissible; null values will be disregarded. Avoid storing sensitive information within metadata to maintain data security. Do not include objects, arrays, or booleans in metadata unless they are converted to strings. Only string values are permissible; null values will be disregarded. Avoid storing sensitive information within metadata to maintain data security. Do not include objects, arrays, or booleans in metadata unless they are converted to strings. Filter by metadata tags [https://docs.tilled.com/docs/resources/metadata#filter-by-metadata-tags](https://docs.tilled.com/docs/resources/metadata#filter-by-metadata-tags) Tilled's API supports filtering records by metadata tags. This is useful for segmenting your data and simplifying the retrieval of specific records based on set criteria. Tilled's Filtering across metadata is available when using the LIST operation. To filter by a metadata tag, include a query parameter in your API request that specifies the metadata key and value you want to filter by. For example, to filter for customers with a specific membership level, use the query below. LIST /customers?metadata[membership_level]=gold LIST /customers?metadata[membership_level]=gold LIST /customers?metadata[membership_level]=gold LIST /customers?metadata[membership_level]=gold LIST /customers?metadata[membership_level]=gold This request will return only those customers whose membership_level metadata is set to “gold”. Utilizing metadata for filtering is particularly effective for segmenting your data and simplifying the retrieval of specific records based on set criteria. membership_level Sample Use Cases [https://docs.tilled.com/docs/resources/metadata#sample-use-cases](https://docs.tilled.com/docs/resources/metadata#sample-use-cases) USE CASEOBJECTMETADATA KEYDESCRIPTIONEnhanced reporting and trackingPayment IntentsAPIinvoice_numberAttach your platform's invoice number to each payment, facilitating easier cross-referencing and reconciliation across your software and Tilled.Custom payment tagsPayment IntentsAPIpayment_tagCreate custom tags for payments to categorize them for various purposes such as marketing campaigns, product lines, or sales channels.Customer identificationCustomersAPIplatform_customer_idStore unique customer identifiers within the Tilled platform, allowing seamless integration and easy lookup of customer information, enhancing customer management and supportAdditional customer informationCustomersAPIcustomer_notesAdd notes or additional information about customers that may be relevant for support or marketing purposes, such as preferences or account status.Subscription tier informationSubscriptionsAPIsubscription_tierInclude details about subscription plans (e.g., gold, silver, platinum) to help manage and categorize subscriptions.Detailed refund reasonsRefundsAPIrefund_reason_detailProvide detailed reasons for refunds beyond standard reason properties, adding notes and context for complex scenarios. USE CASEOBJECTMETADATA KEYDESCRIPTION USE CASEOBJECTMETADATA KEYDESCRIPTION USE CASE USE CASE OBJECT OBJECT METADATA KEY METADATA KEY DESCRIPTION DESCRIPTION Enhanced reporting and trackingPayment IntentsAPIinvoice_numberAttach your platform's invoice number to each payment, facilitating easier cross-referencing and reconciliation across your software and Tilled.Custom payment tagsPayment IntentsAPIpayment_tagCreate custom tags for payments to categorize them for various purposes such as marketing campaigns, product lines, or sales channels.Customer identificationCustomersAPIplatform_customer_idStore unique customer identifiers within the Tilled platform, allowing seamless integration and easy lookup of customer information, enhancing customer management and supportAdditional customer informationCustomersAPIcustomer_notesAdd notes or additional information about customers that may be relevant for support or marketing purposes, such as preferences or account status.Subscription tier informationSubscriptionsAPIsubscription_tierInclude details about subscription plans (e.g., gold, silver, platinum) to help manage and categorize subscriptions.Detailed refund reasonsRefundsAPIrefund_reason_detailProvide detailed reasons for refunds beyond standard reason properties, adding notes and context for complex scenarios. Enhanced reporting and trackingPayment IntentsAPIinvoice_numberAttach your platform's invoice number to each payment, facilitating easier cross-referencing and reconciliation across your software and Tilled. Enhanced reporting and tracking Payment IntentsAPI [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API invoice_number invoice_number Attach your platform's invoice number to each payment, facilitating easier cross-referencing and reconciliation across your software and Tilled. Tilled Custom payment tagsPayment IntentsAPIpayment_tagCreate custom tags for payments to categorize them for various purposes such as marketing campaigns, product lines, or sales channels. Custom payment tags Payment IntentsAPI [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API payment_tag payment_tag Create custom tags for payments to categorize them for various purposes such as marketing campaigns, product lines, or sales channels. Customer identificationCustomersAPIplatform_customer_idStore unique customer identifiers within the Tilled platform, allowing seamless integration and easy lookup of customer information, enhancing customer management and support Customer identification CustomersAPI [CustomersAPI](https://docs.tilled.com/api-reference#tag/customers) API platform_customer_id platform_customer_id Store unique customer identifiers within the Tilled platform, allowing seamless integration and easy lookup of customer information, enhancing customer management and support Tilled Additional customer informationCustomersAPIcustomer_notesAdd notes or additional information about customers that may be relevant for support or marketing purposes, such as preferences or account status. Additional customer information CustomersAPI [CustomersAPI](https://docs.tilled.com/api-reference#tag/customers) API customer_notes customer_notes Add notes or additional information about customers that may be relevant for support or marketing purposes, such as preferences or account status. Subscription tier informationSubscriptionsAPIsubscription_tierInclude details about subscription plans (e.g., gold, silver, platinum) to help manage and categorize subscriptions. Subscription tier information SubscriptionsAPI [SubscriptionsAPI](https://docs.tilled.com/api-reference#tag/subscriptions) API subscription_tier subscription_tier Include details about subscription plans (e.g., gold, silver, platinum) to help manage and categorize subscriptions. Detailed refund reasonsRefundsAPIrefund_reason_detailProvide detailed reasons for refunds beyond standard reason properties, adding notes and context for complex scenarios. Detailed refund reasons RefundsAPI [RefundsAPI](https://docs.tilled.com/api-reference#tag/refunds) API refund_reason_detail refund_reason_detail Provide detailed reasons for refunds beyond standard reason properties, adding notes and context for complex scenarios. Last updated on July 18, 2024 July 18, 2024 GlossaryTesting [Glossary](https://docs.tilled.com/docs/resources/glossary) [Testing](https://docs.tilled.com/docs/resources/testing)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/testing",
    "title": "Tilled",
    "content": "Testing This guide provides test card numbers, banking numbers, and additional information to ensure your integration functions correctly. Utilize these resources to simulate various scenarios within the sandbox environment and verify that they are handled appropriately. Card Payments BRANDREGIONCARD NUMBERCVV / CVCEXPIRATION DATEVisa (Credit)US and Canada4111 1111 1111 1111Any 3 digits, except 333 or 666Any future dateVisa (Credit)US and Canada4900 7700 0000 0001Any 3 digits, except 333 or 666Any future dateMastercardUS and Canada5100 4000 0000 0000Any 3 digits, except 333 or 666Any future dateDiscoverUS only6011 2345 6789 0123Any 3 digits, except 333 or 666Any future dateAmerican ExpressUS only3701 234567 89017Any 4 digitsAny future date Bank-to-Bank PaymentsACH Debit (USD)BANK NAMEROUTING NUMBERACCOUNT NUMBERBank of America011000138Any 4-17 digit number, except ‘123456789’Chase021000021Any 4-17 digit number, except ‘123456789’Wells Fargo Bank021101108Any 4-17 digit number, except ‘123456789’HSBC021004823Any 4-17 digit number, except ‘123456789’TD Bank Connecticut011103093Any 4-17 digit number, except ‘123456789’EFT Debit (CAD)BANK NAMEINSTITUTION IDACCOUNT NUMBERTRANSIT NUMBERBank of Montreal001Any 4-12 digit number22446Scotiabank (The Bank of Nova Scotia)002Any 4-12 digit number81349Royal Bank of Canada003Any 4-12 digit number04356The Toronto-Dominion Bank004Any 4-12 digit number00012National Bank of Canada006Any 4-12 digit number48121 Declines To simulate a decline, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 777701 represents $7777.01. FAILURE CODEFAILURE MESSAGEAMOUNTinsufficient_fundsThe account has insufficient funds to complete the purchase.777701avs_check_failedThe AVS check failed.777702generic_declineThe payment was declined by the issuer for an unknown reason.777703call_issuerThe card was declined by the issuer for an unknown reason.777704expired_cardThe card has expired.777705pickup_cardThe card cannot be used for payment as it my have been reported lost or stolen.777706invalid_numberThe card number is incorrect.777707limit_exceededThe customer has exceeded their balance or credit limit.777708not_permittedThe payment is not permitted.777709incorrect_cvcThe CVV/CVC number is incorrect.777710service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.777711invalid_expiryThe expiration date is incorrect.777712card_not_supportedThe card does not support this type of purchase.777713restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.777714fraudulentThe payment is suspected to be fraudulent.777715processing_errorAn error occurred while processing the payment.777716 ACH ReturnsTo simulate an ACH return, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 888801 represents $8888.01.ACH payments will move from a status of processing to failed at 8 AM EST the day after the payment is initiated.FAILURE CODEFAILURE MESSAGEAMOUNTR01The account has insufficient funds to complete the purchase.888801R02The account is closed.888802R03The account number or routing information doesn’t match any accounts at the receiving bank.888803R04The account number provided is incorrect.888804R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.888805R06The originating bank returned the payment.888806R07The customer revoked the authorization of the payment.888807R08The account holder placed a stop payment order on this specific payment.888808R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.888809R10The customer stated that the payment was not authorized.888810R11A truncation (check-clearing) error occurred.888811 AVS Responses By default, card transactions that include valid billing_details addresses will successfully pass address verification checks. To test different outcomes, you can prefix the billing_details.address.street property with a single letter code listed in the table below. For example, setting billing_details.address.street to ‘A11 123 Main Street’ will simulate the address check failing because the postal code doesn’t match. You can find the results of these checks in the payment_method.card.checks property. DESCRIPTIONCHECK RESULTSPREFIXBoth street and postal code matchaddress_line1_check=pass address_postal_code_check=pass10Street matches, but postal code does notaddress_line1_check=pass address_postal_code_check=fail11Postal code matches, but street does notaddress_line1_check=fail address_postal_code_check=pass12Address information is unavailableaddress_line1_check=unchecked address_postal_code_check=unchecked18Address information is unavailableaddress_line1_check=unavailable address_postal_code_check=unavailable15 Disputes To simulate a dispute, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 777797 represents $7,777.97. DESCRIPTIONDISPUTE STATUSSTATUS HISTORYAMOUNTInquirywarning_under_reviewwarning_needs_response warning_under_review777797Inquiry followed by a formal disputeneeds_responsewarning_needs_response warning_under_review needs_response777798Formal disputeneeds_responseneeds_response777799 When you submit evidence, using the precise phrases provided below in the evidence_description will trigger the dispute to be resolved as won or lost. RESULTING DISPUTE STATUSEVIDENCE DESCRIPTIONwonREVERSALlostLOSS For the purposes of certification, you will need to submit dispute evidence. You must use 777798 or 777799 as the amount to trigger the dispute status of needs_response, allowing you to respond to the dispute and complete the checklist task. Bank Account Verification To test the Plaid Bank Account Verification feature within the hosted merchant application: Navigate to the Bank Account section within the merchant application and click on the Connect Account button. Then, in the popup that appears, click Continue. On the “Select your institution” page, pick any of the banks listed that are supported by Plaid and click Continue. When prompted to sign in, use these test credentials: Username: user_good Password: pass_good After inputting the credentials, you’ll be taken to the “Verify your identity” page. Here, click the Get code button. For the code input, use 1234 and then click Submit. Select any of the test accounts and click Continue. You can then proceed with the remainder of the application. If you submit a test application and choose manual bank verification instead of Plaid, the merchant application’s status will change from in-review to approved within 5 minutes. Using the tax ID 909909909 will keep the application in the in-review status, preventing it from changing to approved. Webhooks You can test your integration by completing actions in the sandbox environment that send events to your needed endpoint, and then verifying the results by checking the API for the correct event data. For example, creating a charge will trigger the charge.succeeded event which will hold the correct charge data. Refer to our Webhook documentation for more details.Last updated on March 7, 2025MetadataError Codes Testing This guide provides test card numbers, banking numbers, and additional information to ensure your integration functions correctly. Utilize these resources to simulate various scenarios within the sandbox environment and verify that they are handled appropriately. Card Payments [https://docs.tilled.com/docs/resources/testing#card-payments](https://docs.tilled.com/docs/resources/testing#card-payments) BRANDREGIONCARD NUMBERCVV / CVCEXPIRATION DATEVisa (Credit)US and Canada4111 1111 1111 1111Any 3 digits, except 333 or 666Any future dateVisa (Credit)US and Canada4900 7700 0000 0001Any 3 digits, except 333 or 666Any future dateMastercardUS and Canada5100 4000 0000 0000Any 3 digits, except 333 or 666Any future dateDiscoverUS only6011 2345 6789 0123Any 3 digits, except 333 or 666Any future dateAmerican ExpressUS only3701 234567 89017Any 4 digitsAny future date BRANDREGIONCARD NUMBERCVV / CVCEXPIRATION DATE BRANDREGIONCARD NUMBERCVV / CVCEXPIRATION DATE BRAND BRAND REGION REGION CARD NUMBER CARD NUMBER CVV / CVC CVV / CVC EXPIRATION DATE EXPIRATION DATE Visa (Credit)US and Canada4111 1111 1111 1111Any 3 digits, except 333 or 666Any future dateVisa (Credit)US and Canada4900 7700 0000 0001Any 3 digits, except 333 or 666Any future dateMastercardUS and Canada5100 4000 0000 0000Any 3 digits, except 333 or 666Any future dateDiscoverUS only6011 2345 6789 0123Any 3 digits, except 333 or 666Any future dateAmerican ExpressUS only3701 234567 89017Any 4 digitsAny future date Visa (Credit)US and Canada4111 1111 1111 1111Any 3 digits, except 333 or 666Any future date Visa (Credit) US and Canada 4111 1111 1111 1111 Any 3 digits, except 333 or 666 Any future date Visa (Credit)US and Canada4900 7700 0000 0001Any 3 digits, except 333 or 666Any future date Visa (Credit) US and Canada 4900 7700 0000 0001 Any 3 digits, except 333 or 666 Any future date MastercardUS and Canada5100 4000 0000 0000Any 3 digits, except 333 or 666Any future date Mastercard US and Canada 5100 4000 0000 0000 Any 3 digits, except 333 or 666 Any future date DiscoverUS only6011 2345 6789 0123Any 3 digits, except 333 or 666Any future date Discover US only 6011 2345 6789 0123 Any 3 digits, except 333 or 666 Any future date American ExpressUS only3701 234567 89017Any 4 digitsAny future date American Express US only 3701 234567 89017 Any 4 digits Any future date Bank-to-Bank PaymentsACH Debit (USD)BANK NAMEROUTING NUMBERACCOUNT NUMBERBank of America011000138Any 4-17 digit number, except ‘123456789’Chase021000021Any 4-17 digit number, except ‘123456789’Wells Fargo Bank021101108Any 4-17 digit number, except ‘123456789’HSBC021004823Any 4-17 digit number, except ‘123456789’TD Bank Connecticut011103093Any 4-17 digit number, except ‘123456789’EFT Debit (CAD)BANK NAMEINSTITUTION IDACCOUNT NUMBERTRANSIT NUMBERBank of Montreal001Any 4-12 digit number22446Scotiabank (The Bank of Nova Scotia)002Any 4-12 digit number81349Royal Bank of Canada003Any 4-12 digit number04356The Toronto-Dominion Bank004Any 4-12 digit number00012National Bank of Canada006Any 4-12 digit number48121 Bank-to-Bank Payments [https://docs.tilled.com/docs/resources/testing#bank-to-bank-payments](https://docs.tilled.com/docs/resources/testing#bank-to-bank-payments) ACH Debit (USD) [https://docs.tilled.com/docs/resources/testing#ach-debit-usd](https://docs.tilled.com/docs/resources/testing#ach-debit-usd) BANK NAMEROUTING NUMBERACCOUNT NUMBERBank of America011000138Any 4-17 digit number, except ‘123456789’Chase021000021Any 4-17 digit number, except ‘123456789’Wells Fargo Bank021101108Any 4-17 digit number, except ‘123456789’HSBC021004823Any 4-17 digit number, except ‘123456789’TD Bank Connecticut011103093Any 4-17 digit number, except ‘123456789’ BANK NAMEROUTING NUMBERACCOUNT NUMBER BANK NAMEROUTING NUMBERACCOUNT NUMBER BANK NAME BANK NAME ROUTING NUMBER ROUTING NUMBER ACCOUNT NUMBER ACCOUNT NUMBER Bank of America011000138Any 4-17 digit number, except ‘123456789’Chase021000021Any 4-17 digit number, except ‘123456789’Wells Fargo Bank021101108Any 4-17 digit number, except ‘123456789’HSBC021004823Any 4-17 digit number, except ‘123456789’TD Bank Connecticut011103093Any 4-17 digit number, except ‘123456789’ Bank of America011000138Any 4-17 digit number, except ‘123456789’ Bank of America 011000138 Any 4-17 digit number, except ‘123456789’ Chase021000021Any 4-17 digit number, except ‘123456789’ Chase 021000021 Any 4-17 digit number, except ‘123456789’ Wells Fargo Bank021101108Any 4-17 digit number, except ‘123456789’ Wells Fargo Bank 021101108 Any 4-17 digit number, except ‘123456789’ HSBC021004823Any 4-17 digit number, except ‘123456789’ HSBC 021004823 Any 4-17 digit number, except ‘123456789’ TD Bank Connecticut011103093Any 4-17 digit number, except ‘123456789’ TD Bank Connecticut 011103093 Any 4-17 digit number, except ‘123456789’ EFT Debit (CAD) [https://docs.tilled.com/docs/resources/testing#eft-debit-cad](https://docs.tilled.com/docs/resources/testing#eft-debit-cad) BANK NAMEINSTITUTION IDACCOUNT NUMBERTRANSIT NUMBERBank of Montreal001Any 4-12 digit number22446Scotiabank (The Bank of Nova Scotia)002Any 4-12 digit number81349Royal Bank of Canada003Any 4-12 digit number04356The Toronto-Dominion Bank004Any 4-12 digit number00012National Bank of Canada006Any 4-12 digit number48121 BANK NAMEINSTITUTION IDACCOUNT NUMBERTRANSIT NUMBER BANK NAMEINSTITUTION IDACCOUNT NUMBERTRANSIT NUMBER BANK NAME BANK NAME INSTITUTION ID INSTITUTION ID ACCOUNT NUMBER ACCOUNT NUMBER TRANSIT NUMBER TRANSIT NUMBER Bank of Montreal001Any 4-12 digit number22446Scotiabank (The Bank of Nova Scotia)002Any 4-12 digit number81349Royal Bank of Canada003Any 4-12 digit number04356The Toronto-Dominion Bank004Any 4-12 digit number00012National Bank of Canada006Any 4-12 digit number48121 Bank of Montreal001Any 4-12 digit number22446 Bank of Montreal 001 Any 4-12 digit number 22446 Scotiabank (The Bank of Nova Scotia)002Any 4-12 digit number81349 Scotiabank (The Bank of Nova Scotia) 002 Any 4-12 digit number 81349 Royal Bank of Canada003Any 4-12 digit number04356 Royal Bank of Canada 003 Any 4-12 digit number 04356 The Toronto-Dominion Bank004Any 4-12 digit number00012 The Toronto-Dominion Bank 004 Any 4-12 digit number 00012 National Bank of Canada006Any 4-12 digit number48121 National Bank of Canada 006 Any 4-12 digit number 48121 Declines [https://docs.tilled.com/docs/resources/testing#declines](https://docs.tilled.com/docs/resources/testing#declines) To simulate a decline, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 777701 represents $7777.01. [Creating a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API FAILURE CODEFAILURE MESSAGEAMOUNTinsufficient_fundsThe account has insufficient funds to complete the purchase.777701avs_check_failedThe AVS check failed.777702generic_declineThe payment was declined by the issuer for an unknown reason.777703call_issuerThe card was declined by the issuer for an unknown reason.777704expired_cardThe card has expired.777705pickup_cardThe card cannot be used for payment as it my have been reported lost or stolen.777706invalid_numberThe card number is incorrect.777707limit_exceededThe customer has exceeded their balance or credit limit.777708not_permittedThe payment is not permitted.777709incorrect_cvcThe CVV/CVC number is incorrect.777710service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.777711invalid_expiryThe expiration date is incorrect.777712card_not_supportedThe card does not support this type of purchase.777713restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.777714fraudulentThe payment is suspected to be fraudulent.777715processing_errorAn error occurred while processing the payment.777716 FAILURE CODEFAILURE MESSAGEAMOUNT FAILURE CODEFAILURE MESSAGEAMOUNT FAILURE CODE FAILURE CODE FAILURE MESSAGE FAILURE MESSAGE AMOUNT AMOUNT insufficient_fundsThe account has insufficient funds to complete the purchase.777701avs_check_failedThe AVS check failed.777702generic_declineThe payment was declined by the issuer for an unknown reason.777703call_issuerThe card was declined by the issuer for an unknown reason.777704expired_cardThe card has expired.777705pickup_cardThe card cannot be used for payment as it my have been reported lost or stolen.777706invalid_numberThe card number is incorrect.777707limit_exceededThe customer has exceeded their balance or credit limit.777708not_permittedThe payment is not permitted.777709incorrect_cvcThe CVV/CVC number is incorrect.777710service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.777711invalid_expiryThe expiration date is incorrect.777712card_not_supportedThe card does not support this type of purchase.777713restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.777714fraudulentThe payment is suspected to be fraudulent.777715processing_errorAn error occurred while processing the payment.777716 insufficient_fundsThe account has insufficient funds to complete the purchase.777701 insufficient_funds insufficient_funds The account has insufficient funds to complete the purchase. 777701 avs_check_failedThe AVS check failed.777702 avs_check_failed avs_check_failed The AVS check failed. 777702 generic_declineThe payment was declined by the issuer for an unknown reason.777703 generic_decline generic_decline The payment was declined by the issuer for an unknown reason. 777703 call_issuerThe card was declined by the issuer for an unknown reason.777704 call_issuer call_issuer The card was declined by the issuer for an unknown reason. 777704 expired_cardThe card has expired.777705 expired_card expired_card The card has expired. 777705 pickup_cardThe card cannot be used for payment as it my have been reported lost or stolen.777706 pickup_card pickup_card The card cannot be used for payment as it my have been reported lost or stolen. 777706 invalid_numberThe card number is incorrect.777707 invalid_number invalid_number The card number is incorrect. 777707 limit_exceededThe customer has exceeded their balance or credit limit.777708 limit_exceeded limit_exceeded The customer has exceeded their balance or credit limit. 777708 not_permittedThe payment is not permitted.777709 not_permitted not_permitted The payment is not permitted. 777709 incorrect_cvcThe CVV/CVC number is incorrect.777710 incorrect_cvc incorrect_cvc The CVV/CVC number is incorrect. 777710 service_not_allowedThe card was declined by the issuer due to its proprietary card activity regulations.777711 service_not_allowed service_not_allowed The card was declined by the issuer due to its proprietary card activity regulations. 777711 invalid_expiryThe expiration date is incorrect.777712 invalid_expiry invalid_expiry The expiration date is incorrect. 777712 card_not_supportedThe card does not support this type of purchase.777713 card_not_supported card_not_supported The card does not support this type of purchase. 777713 restricted_cardThe card cannot be used for payment as it may have been reported lost or stolen.777714 restricted_card restricted_card The card cannot be used for payment as it may have been reported lost or stolen. 777714 fraudulentThe payment is suspected to be fraudulent.777715 fraudulent fraudulent The payment is suspected to be fraudulent. 777715 processing_errorAn error occurred while processing the payment.777716 processing_error processing_error An error occurred while processing the payment. 777716 ACH ReturnsTo simulate an ACH return, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 888801 represents $8888.01.ACH payments will move from a status of processing to failed at 8 AM EST the day after the payment is initiated.FAILURE CODEFAILURE MESSAGEAMOUNTR01The account has insufficient funds to complete the purchase.888801R02The account is closed.888802R03The account number or routing information doesn’t match any accounts at the receiving bank.888803R04The account number provided is incorrect.888804R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.888805R06The originating bank returned the payment.888806R07The customer revoked the authorization of the payment.888807R08The account holder placed a stop payment order on this specific payment.888808R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.888809R10The customer stated that the payment was not authorized.888810R11A truncation (check-clearing) error occurred.888811 ACH Returns [https://docs.tilled.com/docs/resources/testing#ach-returns](https://docs.tilled.com/docs/resources/testing#ach-returns) To simulate an ACH return, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 888801 represents $8888.01. [Creating a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API ACH payments will move from a status of processing to failed at 8 AM EST the day after the payment is initiated. processing failed FAILURE CODEFAILURE MESSAGEAMOUNTR01The account has insufficient funds to complete the purchase.888801R02The account is closed.888802R03The account number or routing information doesn’t match any accounts at the receiving bank.888803R04The account number provided is incorrect.888804R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.888805R06The originating bank returned the payment.888806R07The customer revoked the authorization of the payment.888807R08The account holder placed a stop payment order on this specific payment.888808R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.888809R10The customer stated that the payment was not authorized.888810R11A truncation (check-clearing) error occurred.888811 FAILURE CODEFAILURE MESSAGEAMOUNT FAILURE CODEFAILURE MESSAGEAMOUNT FAILURE CODE FAILURE CODE FAILURE MESSAGE FAILURE MESSAGE AMOUNT AMOUNT R01The account has insufficient funds to complete the purchase.888801R02The account is closed.888802R03The account number or routing information doesn’t match any accounts at the receiving bank.888803R04The account number provided is incorrect.888804R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.888805R06The originating bank returned the payment.888806R07The customer revoked the authorization of the payment.888807R08The account holder placed a stop payment order on this specific payment.888808R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.888809R10The customer stated that the payment was not authorized.888810R11A truncation (check-clearing) error occurred.888811 R01The account has insufficient funds to complete the purchase.888801 R01 R01 The account has insufficient funds to complete the purchase. 888801 R02The account is closed.888802 R02 R02 The account is closed. 888802 R03The account number or routing information doesn’t match any accounts at the receiving bank.888803 R03 R03 The account number or routing information doesn’t match any accounts at the receiving bank. 888803 R04The account number provided is incorrect.888804 R04 R04 The account number provided is incorrect. 888804 R05A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.888805 R05 R05 A corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account. 888805 R06The originating bank returned the payment.888806 R06 R06 The originating bank returned the payment. 888806 R07The customer revoked the authorization of the payment.888807 R07 R07 The customer revoked the authorization of the payment. 888807 R08The account holder placed a stop payment order on this specific payment.888808 R08 R08 The account holder placed a stop payment order on this specific payment. 888808 R09The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.888809 R09 R09 The account may have deposits that have not yet cleared, resulting in insufficient funds for the payment. 888809 R10The customer stated that the payment was not authorized.888810 R10 R10 The customer stated that the payment was not authorized. 888810 R11A truncation (check-clearing) error occurred.888811 R11 R11 A truncation (check-clearing) error occurred. 888811 AVS Responses [https://docs.tilled.com/docs/resources/testing#avs-responses](https://docs.tilled.com/docs/resources/testing#avs-responses) By default, card transactions that include valid billing_details addresses will successfully pass address verification checks. To test different outcomes, you can prefix the billing_details.address.street property with a single letter code listed in the table below. billing_details billing_details.address.street For example, setting billing_details.address.street to ‘A11 123 Main Street’ will simulate the address check failing because the postal code doesn’t match. You can find the results of these checks in the payment_method.card.checks property. billing_details.address.street payment_method.card.checks DESCRIPTIONCHECK RESULTSPREFIXBoth street and postal code matchaddress_line1_check=pass address_postal_code_check=pass10Street matches, but postal code does notaddress_line1_check=pass address_postal_code_check=fail11Postal code matches, but street does notaddress_line1_check=fail address_postal_code_check=pass12Address information is unavailableaddress_line1_check=unchecked address_postal_code_check=unchecked18Address information is unavailableaddress_line1_check=unavailable address_postal_code_check=unavailable15 DESCRIPTIONCHECK RESULTSPREFIX DESCRIPTIONCHECK RESULTSPREFIX DESCRIPTION DESCRIPTION CHECK RESULTS CHECK RESULTS PREFIX PREFIX Both street and postal code matchaddress_line1_check=pass address_postal_code_check=pass10Street matches, but postal code does notaddress_line1_check=pass address_postal_code_check=fail11Postal code matches, but street does notaddress_line1_check=fail address_postal_code_check=pass12Address information is unavailableaddress_line1_check=unchecked address_postal_code_check=unchecked18Address information is unavailableaddress_line1_check=unavailable address_postal_code_check=unavailable15 Both street and postal code matchaddress_line1_check=pass address_postal_code_check=pass10 Both street and postal code match address_line1_check=pass address_postal_code_check=pass address_line1_check=pass address_postal_code_check=pass 10 Street matches, but postal code does notaddress_line1_check=pass address_postal_code_check=fail11 Street matches, but postal code does not address_line1_check=pass address_postal_code_check=fail address_line1_check=pass address_postal_code_check=fail 11 Postal code matches, but street does notaddress_line1_check=fail address_postal_code_check=pass12 Postal code matches, but street does not address_line1_check=fail address_postal_code_check=pass address_line1_check=fail address_postal_code_check=pass 12 Address information is unavailableaddress_line1_check=unchecked address_postal_code_check=unchecked18 Address information is unavailable address_line1_check=unchecked address_postal_code_check=unchecked address_line1_check=unchecked address_postal_code_check=unchecked 18 Address information is unavailableaddress_line1_check=unavailable address_postal_code_check=unavailable15 Address information is unavailable address_line1_check=unavailable address_postal_code_check=unavailable address_line1_check=unavailable address_postal_code_check=unavailable 15 Disputes [https://docs.tilled.com/docs/resources/testing#disputes](https://docs.tilled.com/docs/resources/testing#disputes) To simulate a dispute, pass-through the respective amount when Creating a Payment IntentAPI. An amount of 777797 represents $7,777.97. [Creating a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API DESCRIPTIONDISPUTE STATUSSTATUS HISTORYAMOUNTInquirywarning_under_reviewwarning_needs_response warning_under_review777797Inquiry followed by a formal disputeneeds_responsewarning_needs_response warning_under_review needs_response777798Formal disputeneeds_responseneeds_response777799 DESCRIPTIONDISPUTE STATUSSTATUS HISTORYAMOUNT DESCRIPTIONDISPUTE STATUSSTATUS HISTORYAMOUNT DESCRIPTION DESCRIPTION DISPUTE STATUS DISPUTE STATUS STATUS HISTORY STATUS HISTORY AMOUNT AMOUNT Inquirywarning_under_reviewwarning_needs_response warning_under_review777797Inquiry followed by a formal disputeneeds_responsewarning_needs_response warning_under_review needs_response777798Formal disputeneeds_responseneeds_response777799 Inquirywarning_under_reviewwarning_needs_response warning_under_review777797 Inquiry warning_under_review warning_under_review warning_needs_response warning_under_review warning_needs_response warning_under_review 777797 Inquiry followed by a formal disputeneeds_responsewarning_needs_response warning_under_review needs_response777798 Inquiry followed by a formal dispute needs_response needs_response warning_needs_response warning_under_review needs_response warning_needs_response warning_under_review needs_response 777798 Formal disputeneeds_responseneeds_response777799 Formal dispute needs_response needs_response needs_response needs_response 777799 When you submit evidence, using the precise phrases provided below in the evidence_description will trigger the dispute to be resolved as won or lost. evidence_description RESULTING DISPUTE STATUSEVIDENCE DESCRIPTIONwonREVERSALlostLOSS RESULTING DISPUTE STATUSEVIDENCE DESCRIPTION RESULTING DISPUTE STATUSEVIDENCE DESCRIPTION RESULTING DISPUTE STATUS RESULTING DISPUTE STATUS EVIDENCE DESCRIPTION EVIDENCE DESCRIPTION wonREVERSALlostLOSS wonREVERSAL won won REVERSAL lostLOSS lost lost LOSS For the purposes of certification, you will need to submit dispute evidence. You must use 777798 or 777799 as the amount to trigger the dispute status of needs_response, allowing you to respond to the dispute and complete the checklist task. [certification](https://docs.tilled.com/docs/get-started/launch-checklist#simulate-a-dispute) 777798 777799 needs_response Bank Account Verification [https://docs.tilled.com/docs/resources/testing#bank-account-verification](https://docs.tilled.com/docs/resources/testing#bank-account-verification) To test the Plaid Bank Account Verification feature within the hosted merchant application: Navigate to the Bank Account section within the merchant application and click on the Connect Account button. Then, in the popup that appears, click Continue. On the “Select your institution” page, pick any of the banks listed that are supported by Plaid and click Continue. When prompted to sign in, use these test credentials: Username: user_good Password: pass_good After inputting the credentials, you’ll be taken to the “Verify your identity” page. Here, click the Get code button. For the code input, use 1234 and then click Submit. Select any of the test accounts and click Continue. Navigate to the Bank Account section within the merchant application and click on the Connect Account button. Then, in the popup that appears, click Continue. Bank Account Connect Account Continue On the “Select your institution” page, pick any of the banks listed that are supported by Plaid and click Continue. “Select your institution” Continue When prompted to sign in, use these test credentials: Username: user_good Password: pass_good Username: user_good Password: pass_good Username: user_good Password: pass_good After inputting the credentials, you’ll be taken to the “Verify your identity” page. Here, click the Get code button. For the code input, use 1234 and then click Submit. “Verify your identity” Get code Submit Select any of the test accounts and click Continue. Continue You can then proceed with the remainder of the application. If you submit a test application and choose manual bank verification instead of Plaid, the merchant application’s status will change from in-review to approved within 5 minutes. Using the tax ID 909909909 will keep the application in the in-review status, preventing it from changing to approved. in-review approved Webhooks [https://docs.tilled.com/docs/resources/testing#webhooks](https://docs.tilled.com/docs/resources/testing#webhooks) You can test your integration by completing actions in the sandbox environment that send events to your needed endpoint, and then verifying the results by checking the API for the correct event data. For example, creating a charge will trigger the charge.succeeded event which will hold the correct charge data. charge.succeeded Refer to our Webhook documentation for more details. [Webhook documentation](https://docs.tilled.com/docs/webhooks/overview) Last updated on March 7, 2025 March 7, 2025 MetadataError Codes [Metadata](https://docs.tilled.com/docs/resources/metadata) [Error Codes](https://docs.tilled.com/docs/resources/error-codes)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/error-codes",
    "title": "Tilled",
    "content": "Error Codes Identify and address server and Tilled.js error codes. Tilled-Specific Server Error Codes ERROR CODEDESCRIPTIONSOLUTION400 (Bad request)Missing tilled-account headerSpecify an account_id.401 (Unauthorized)Invalid or missing tilled-api-key headerVerify that you are using the correct API key with the necessary permissions for your request.401 (Unauthorized)tilled-account is not accessible via api_key.account_id that was used for authenticationProvide an API key that is associated with the specified account.403 (Forbidden)Either the tilled-account is a type that is incapable of making your request or your request is originating from a provider on our blocked listVerify that your hosting provider is not on our blocked list. If so, please contact our team at support@tilled.com. If it is not on the list, reattempt this request with your partner account_id.404 (Not found)Invalid tilled-account-id headerVerify that you are using the correct account_id. Tilled.js Error Codes DISPLAY MESSAGEDESCRIPTIONSOLUTIONpaymentRequest is required for form field type paymentRequestButtonThe field was created with a type of paymentRequestButton, but the paymentRequest was not set in the forms.fieldOptions parameter.Set the paymentRequest attribute in your form.createField like so: var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, });.Unable to start Apple Pay sessionThe merchant does not have the capabilities (i.e. does not support either the country, currency, or card network) to process this payment or Tilled was unable to initialize the ApplePaySession.Verify that the merchant is capable of processing the Payment Intent and that you have completed the steps to verify your domain.No DOM Element found with id {selector}The selector provided in your inject method call does not exist in the DOM.Double-check that you are passing the correct element id when attempting to inject your PaymentRequest button.selector + DOM Element must have a parent containerThe user attempted to inject an element that does not have a parent element.Nest your PaymentRequest example button element within a container element.Field type of FIX is requiredThe build method failed because the necessary fields for the payment method’s type were not created.Verify that you created all the necessary fields with the createField method.Unhandled payment method typeThe user attempted to confirm a payment intent with a payment_method.type that is not supported by Tilled.js.Verify that the payment intent’s payment_method.type matches one of the following: card, ach_debit, or eft_debit.The payment intent client secret is requiredThe user did not specify a client secret in their call to the confirmPayment method.Pass a Payment Intent's client secret into the call to the confirmPayment method.payment_method is a required propertyThe user did not specify the payment_method parameter in their call to the confirmPayment method.Pass a payment_method parameter into the call to the confirmPayment method.A form is requiredThe user attempted to confirm a Payment Intent with the confirmPayment method without building a form object.Verify that the form has been successfully built with the build method.A tilled.form() is required prior to creating a payment methodThe user attempted to create a payment method without building a form object.Verify that the form has been successfully initialized with the form method.Field of type {fieldType} is not validThe user entered a value that did not pass our form validation.Disable the submit button if the form is invalid.Expected document.body not to be nullThe user attempted to initialize a Tilled instance in an HTML page without a body element.Verify that the page has a body element and add one if necessary.Unauthorized: jwt malformedThe publishable key or account_id is missing or invalid.Verify that you have specified a valid account_id and publishable key when initializing a Tilled object instance.Last updated on July 18, 2024TestingPCI Compliance Error Codes Identify and address server and Tilled.js error codes. Tilled Tilled-Specific Server Error Codes Tilled [https://docs.tilled.com/docs/resources/error-codes#-specific-server-error-codes](https://docs.tilled.com/docs/resources/error-codes#-specific-server-error-codes) ERROR CODEDESCRIPTIONSOLUTION400 (Bad request)Missing tilled-account headerSpecify an account_id.401 (Unauthorized)Invalid or missing tilled-api-key headerVerify that you are using the correct API key with the necessary permissions for your request.401 (Unauthorized)tilled-account is not accessible via api_key.account_id that was used for authenticationProvide an API key that is associated with the specified account.403 (Forbidden)Either the tilled-account is a type that is incapable of making your request or your request is originating from a provider on our blocked listVerify that your hosting provider is not on our blocked list. If so, please contact our team at support@tilled.com. If it is not on the list, reattempt this request with your partner account_id.404 (Not found)Invalid tilled-account-id headerVerify that you are using the correct account_id. ERROR CODEDESCRIPTIONSOLUTION ERROR CODEDESCRIPTIONSOLUTION ERROR CODE ERROR CODE DESCRIPTION DESCRIPTION SOLUTION SOLUTION 400 (Bad request)Missing tilled-account headerSpecify an account_id.401 (Unauthorized)Invalid or missing tilled-api-key headerVerify that you are using the correct API key with the necessary permissions for your request.401 (Unauthorized)tilled-account is not accessible via api_key.account_id that was used for authenticationProvide an API key that is associated with the specified account.403 (Forbidden)Either the tilled-account is a type that is incapable of making your request or your request is originating from a provider on our blocked listVerify that your hosting provider is not on our blocked list. If so, please contact our team at support@tilled.com. If it is not on the list, reattempt this request with your partner account_id.404 (Not found)Invalid tilled-account-id headerVerify that you are using the correct account_id. 400 (Bad request)Missing tilled-account headerSpecify an account_id. 400 (Bad request) Missing tilled-account header tilled-account tilled Specify an account_id. account_id 401 (Unauthorized)Invalid or missing tilled-api-key headerVerify that you are using the correct API key with the necessary permissions for your request. 401 (Unauthorized) Invalid or missing tilled-api-key header tilled-api-key tilled Verify that you are using the correct API key with the necessary permissions for your request. 401 (Unauthorized)tilled-account is not accessible via api_key.account_id that was used for authenticationProvide an API key that is associated with the specified account. 401 (Unauthorized) tilled-account is not accessible via api_key.account_id that was used for authentication tilled api_key.account_id Provide an API key that is associated with the specified account. 403 (Forbidden)Either the tilled-account is a type that is incapable of making your request or your request is originating from a provider on our blocked listVerify that your hosting provider is not on our blocked list. If so, please contact our team at support@tilled.com. If it is not on the list, reattempt this request with your partner account_id. 403 (Forbidden) Either the tilled-account is a type that is incapable of making your request or your request is originating from a provider on our blocked list tilled-account tilled Verify that your hosting provider is not on our blocked list. If so, please contact our team at support@tilled.com. If it is not on the list, reattempt this request with your partner account_id. [support@tilled.com](mailto:support@tilled.com) account_id 404 (Not found)Invalid tilled-account-id headerVerify that you are using the correct account_id. 404 (Not found) Invalid tilled-account-id header tilled-account-id tilled Verify that you are using the correct account_id. account_id Tilled.js Error Codes Tilled [https://docs.tilled.com/docs/resources/error-codes#js-error-codes](https://docs.tilled.com/docs/resources/error-codes#js-error-codes) DISPLAY MESSAGEDESCRIPTIONSOLUTIONpaymentRequest is required for form field type paymentRequestButtonThe field was created with a type of paymentRequestButton, but the paymentRequest was not set in the forms.fieldOptions parameter.Set the paymentRequest attribute in your form.createField like so: var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, });.Unable to start Apple Pay sessionThe merchant does not have the capabilities (i.e. does not support either the country, currency, or card network) to process this payment or Tilled was unable to initialize the ApplePaySession.Verify that the merchant is capable of processing the Payment Intent and that you have completed the steps to verify your domain.No DOM Element found with id {selector}The selector provided in your inject method call does not exist in the DOM.Double-check that you are passing the correct element id when attempting to inject your PaymentRequest button.selector + DOM Element must have a parent containerThe user attempted to inject an element that does not have a parent element.Nest your PaymentRequest example button element within a container element.Field type of FIX is requiredThe build method failed because the necessary fields for the payment method’s type were not created.Verify that you created all the necessary fields with the createField method.Unhandled payment method typeThe user attempted to confirm a payment intent with a payment_method.type that is not supported by Tilled.js.Verify that the payment intent’s payment_method.type matches one of the following: card, ach_debit, or eft_debit.The payment intent client secret is requiredThe user did not specify a client secret in their call to the confirmPayment method.Pass a Payment Intent's client secret into the call to the confirmPayment method.payment_method is a required propertyThe user did not specify the payment_method parameter in their call to the confirmPayment method.Pass a payment_method parameter into the call to the confirmPayment method.A form is requiredThe user attempted to confirm a Payment Intent with the confirmPayment method without building a form object.Verify that the form has been successfully built with the build method.A tilled.form() is required prior to creating a payment methodThe user attempted to create a payment method without building a form object.Verify that the form has been successfully initialized with the form method.Field of type {fieldType} is not validThe user entered a value that did not pass our form validation.Disable the submit button if the form is invalid.Expected document.body not to be nullThe user attempted to initialize a Tilled instance in an HTML page without a body element.Verify that the page has a body element and add one if necessary.Unauthorized: jwt malformedThe publishable key or account_id is missing or invalid.Verify that you have specified a valid account_id and publishable key when initializing a Tilled object instance. DISPLAY MESSAGEDESCRIPTIONSOLUTION DISPLAY MESSAGEDESCRIPTIONSOLUTION DISPLAY MESSAGE DISPLAY MESSAGE DESCRIPTION DESCRIPTION SOLUTION SOLUTION paymentRequest is required for form field type paymentRequestButtonThe field was created with a type of paymentRequestButton, but the paymentRequest was not set in the forms.fieldOptions parameter.Set the paymentRequest attribute in your form.createField like so: var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, });.Unable to start Apple Pay sessionThe merchant does not have the capabilities (i.e. does not support either the country, currency, or card network) to process this payment or Tilled was unable to initialize the ApplePaySession.Verify that the merchant is capable of processing the Payment Intent and that you have completed the steps to verify your domain.No DOM Element found with id {selector}The selector provided in your inject method call does not exist in the DOM.Double-check that you are passing the correct element id when attempting to inject your PaymentRequest button.selector + DOM Element must have a parent containerThe user attempted to inject an element that does not have a parent element.Nest your PaymentRequest example button element within a container element.Field type of FIX is requiredThe build method failed because the necessary fields for the payment method’s type were not created.Verify that you created all the necessary fields with the createField method.Unhandled payment method typeThe user attempted to confirm a payment intent with a payment_method.type that is not supported by Tilled.js.Verify that the payment intent’s payment_method.type matches one of the following: card, ach_debit, or eft_debit.The payment intent client secret is requiredThe user did not specify a client secret in their call to the confirmPayment method.Pass a Payment Intent's client secret into the call to the confirmPayment method.payment_method is a required propertyThe user did not specify the payment_method parameter in their call to the confirmPayment method.Pass a payment_method parameter into the call to the confirmPayment method.A form is requiredThe user attempted to confirm a Payment Intent with the confirmPayment method without building a form object.Verify that the form has been successfully built with the build method.A tilled.form() is required prior to creating a payment methodThe user attempted to create a payment method without building a form object.Verify that the form has been successfully initialized with the form method.Field of type {fieldType} is not validThe user entered a value that did not pass our form validation.Disable the submit button if the form is invalid.Expected document.body not to be nullThe user attempted to initialize a Tilled instance in an HTML page without a body element.Verify that the page has a body element and add one if necessary.Unauthorized: jwt malformedThe publishable key or account_id is missing or invalid.Verify that you have specified a valid account_id and publishable key when initializing a Tilled object instance. paymentRequest is required for form field type paymentRequestButtonThe field was created with a type of paymentRequestButton, but the paymentRequest was not set in the forms.fieldOptions parameter.Set the paymentRequest attribute in your form.createField like so: var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, });. paymentRequest is required for form field type paymentRequestButton paymentRequest paymentRequestButton The field was created with a type of paymentRequestButton, but the paymentRequest was not set in the forms.fieldOptions parameter. type paymentRequestButton paymentRequest forms.fieldOptions Set the paymentRequest attribute in your form.createField like so: var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, });. paymentRequest var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); Unable to start Apple Pay sessionThe merchant does not have the capabilities (i.e. does not support either the country, currency, or card network) to process this payment or Tilled was unable to initialize the ApplePaySession.Verify that the merchant is capable of processing the Payment Intent and that you have completed the steps to verify your domain. Unable to start Apple Pay session The merchant does not have the capabilities (i.e. does not support either the country, currency, or card network) to process this payment or Tilled was unable to initialize the ApplePaySession. Tilled Verify that the merchant is capable of processing the Payment Intent and that you have completed the steps to verify your domain. No DOM Element found with id {selector}The selector provided in your inject method call does not exist in the DOM.Double-check that you are passing the correct element id when attempting to inject your PaymentRequest button. No DOM Element found with id {selector} The selector provided in your inject method call does not exist in the DOM. inject Double-check that you are passing the correct element id when attempting to inject your PaymentRequest button. selector + DOM Element must have a parent containerThe user attempted to inject an element that does not have a parent element.Nest your PaymentRequest example button element within a container element. selector + DOM Element must have a parent container DOM Element must have a parent container The user attempted to inject an element that does not have a parent element. Nest your PaymentRequest example button element within a container element. PaymentRequest example Field type of FIX is requiredThe build method failed because the necessary fields for the payment method’s type were not created.Verify that you created all the necessary fields with the createField method. Field type of FIX is required FIX The build method failed because the necessary fields for the payment method’s type were not created. Verify that you created all the necessary fields with the createField method. createField Unhandled payment method typeThe user attempted to confirm a payment intent with a payment_method.type that is not supported by Tilled.js.Verify that the payment intent’s payment_method.type matches one of the following: card, ach_debit, or eft_debit. Unhandled payment method type The user attempted to confirm a payment intent with a payment_method.type that is not supported by Tilled.js. payment_method.type Tilled Verify that the payment intent’s payment_method.type matches one of the following: card, ach_debit, or eft_debit. payment_method.type card ach_debit eft_debit The payment intent client secret is requiredThe user did not specify a client secret in their call to the confirmPayment method.Pass a Payment Intent's client secret into the call to the confirmPayment method. The payment intent client secret is required The user did not specify a client secret in their call to the confirmPayment method. confirmPayment Pass a Payment Intent's client secret into the call to the confirmPayment method. confirmPayment payment_method is a required propertyThe user did not specify the payment_method parameter in their call to the confirmPayment method.Pass a payment_method parameter into the call to the confirmPayment method. payment_method is a required property payment_method The user did not specify the payment_method parameter in their call to the confirmPayment method. payment_method confirmPayment Pass a payment_method parameter into the call to the confirmPayment method. payment_method confirmPayment A form is requiredThe user attempted to confirm a Payment Intent with the confirmPayment method without building a form object.Verify that the form has been successfully built with the build method. A form is required form The user attempted to confirm a Payment Intent with the confirmPayment method without building a form object. confirmPayment Verify that the form has been successfully built with the build method. build A tilled.form() is required prior to creating a payment methodThe user attempted to create a payment method without building a form object.Verify that the form has been successfully initialized with the form method. A tilled.form() is required prior to creating a payment method tilled.form() tilled The user attempted to create a payment method without building a form object. form Verify that the form has been successfully initialized with the form method. form Field of type {fieldType} is not validThe user entered a value that did not pass our form validation.Disable the submit button if the form is invalid. Field of type {fieldType} is not valid {fieldType} The user entered a value that did not pass our form validation. Disable the submit button if the form is invalid. Expected document.body not to be nullThe user attempted to initialize a Tilled instance in an HTML page without a body element.Verify that the page has a body element and add one if necessary. Expected document.body not to be null document.body The user attempted to initialize a Tilled instance in an HTML page without a body element. Tilled body Verify that the page has a body element and add one if necessary. body Unauthorized: jwt malformedThe publishable key or account_id is missing or invalid.Verify that you have specified a valid account_id and publishable key when initializing a Tilled object instance. Unauthorized: jwt malformed The publishable key or account_id is missing or invalid. account_id Verify that you have specified a valid account_id and publishable key when initializing a Tilled object instance. account_id Tilled Tilled Last updated on July 18, 2024 July 18, 2024 TestingPCI Compliance [Testing](https://docs.tilled.com/docs/resources/testing) [PCI Compliance](https://docs.tilled.com/docs/resources/pci-compliance)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/pci-compliance",
    "title": "Tilled",
    "content": "PCI Compliance PCI DSS (Payment Card Industry Data Security Standard) compliance is required for all merchants processing credit card payments through TSYS. As a Level 1 PCI DSS-certified provider, Tilled partners with MaxPCI to offer merchants a free, streamlined compliance process. Although Tilled is PCI compliant, merchants are required to validate their own PCI compliance annually by completing the necessary assessments and certifications because: It’s required by card networks for any business handling credit card data Merchants can be held liable for data breaches or fraud if they are not PCI-compliant Some payment processors charge higher transaction fees to non-compliant merchants Non-compliance can result in fines ranging from $5,000-$100,000 per month In extreme cases, merchants can lose the ability to process credit card payments altogether MaxPCI Platform MaxPCI provides merchants with: Monthly enrollment, account setup information, and reminder emails to renew compliance A free online tool to complete a PCI Self-Assessment Questionnaire (SAQ) Network vulnerability scanning Dedicated support via phone, chat, and email Accessing MaxPCI Merchants will receive a welcome email from MaxPCI or their software platform with information about accessing MaxPCI including their username and a temporary password. Once they receive their login credentials merchants can sign into the MaxPCI portal and set a new password. Support Contact Information Support is available Monday-Friday, 9AM-6PM EST. Login: https://maxpcicomply.com/login Email: support@maxpcicomply.com Phone: 800-803-8515 Communication Options MaxPCI offers two communication options: partner-managed and MaxPCI-direct. Partner-Managed Communication Software platforms can choose to manage all PCI-related communications themselves to: Maintain consistent branding Control merchant messaging Handle compliance tracking directly Partner-managed communications are recommended for software platforms who want full control over how they communicate with their customers. MaxPCI-Direct Communication MaxPCI handles all compliance-related communications, allowing merchants to receive automated enrollment emails and reminders under MaxPCI branding. The software platform is mentioned in the communications, but is not responsible for managing them. Tilled is never exposed to merchants. Alternative Compliance Submission Merchants who have completed PCI compliance through another vendor can upload their Certificate of Compliance to MaxPCI, including SAQ information and scan results if required.Last updated on March 7, 2025Error CodesExample Applications PCI Compliance PCI DSS (Payment Card Industry Data Security Standard) compliance is required for all merchants processing credit card payments through TSYS. As a Level 1 PCI DSS-certified provider, Tilled partners with MaxPCI to offer merchants a free, streamlined compliance process. Tilled Although Tilled is PCI compliant, merchants are required to validate their own PCI compliance annually by completing the necessary assessments and certifications because: Tilled It’s required by card networks for any business handling credit card data Merchants can be held liable for data breaches or fraud if they are not PCI-compliant Some payment processors charge higher transaction fees to non-compliant merchants Non-compliance can result in fines ranging from $5,000-$100,000 per month In extreme cases, merchants can lose the ability to process credit card payments altogether It’s required by card networks for any business handling credit card data Merchants can be held liable for data breaches or fraud if they are not PCI-compliant Some payment processors charge higher transaction fees to non-compliant merchants Non-compliance can result in fines ranging from $5,000-$100,000 per month In extreme cases, merchants can lose the ability to process credit card payments altogether MaxPCI Platform [https://docs.tilled.com/docs/resources/pci-compliance#maxpci-platform](https://docs.tilled.com/docs/resources/pci-compliance#maxpci-platform) MaxPCI provides merchants with: Monthly enrollment, account setup information, and reminder emails to renew compliance A free online tool to complete a PCI Self-Assessment Questionnaire (SAQ) Network vulnerability scanning Dedicated support via phone, chat, and email Monthly enrollment, account setup information, and reminder emails to renew compliance A free online tool to complete a PCI Self-Assessment Questionnaire (SAQ) Network vulnerability scanning Dedicated support via phone, chat, and email Accessing MaxPCI [https://docs.tilled.com/docs/resources/pci-compliance#accessing-maxpci](https://docs.tilled.com/docs/resources/pci-compliance#accessing-maxpci) Merchants will receive a welcome email from MaxPCI or their software platform with information about accessing MaxPCI including their username and a temporary password. Once they receive their login credentials merchants can sign into the MaxPCI portal and set a new password. Support Contact Information [https://docs.tilled.com/docs/resources/pci-compliance#support-contact-information](https://docs.tilled.com/docs/resources/pci-compliance#support-contact-information) Support is available Monday-Friday, 9AM-6PM EST. Login: https://maxpcicomply.com/login Email: support@maxpcicomply.com Phone: 800-803-8515 Login: https://maxpcicomply.com/login [https://maxpcicomply.com/login](https://maxpcicomply.com/login) Email: support@maxpcicomply.com [support@maxpcicomply.com](mailto:support@maxpcicomply.com) Phone: 800-803-8515 Communication Options [https://docs.tilled.com/docs/resources/pci-compliance#communication-options](https://docs.tilled.com/docs/resources/pci-compliance#communication-options) MaxPCI offers two communication options: partner-managed and MaxPCI-direct. Partner-Managed Communication Partner-Managed Communication Software platforms can choose to manage all PCI-related communications themselves to: Maintain consistent branding Control merchant messaging Handle compliance tracking directly Maintain consistent branding Control merchant messaging Handle compliance tracking directly Partner-managed communications are recommended for software platforms who want full control over how they communicate with their customers. MaxPCI-Direct Communication MaxPCI-Direct Communication MaxPCI handles all compliance-related communications, allowing merchants to receive automated enrollment emails and reminders under MaxPCI branding. The software platform is mentioned in the communications, but is not responsible for managing them. Tilled is never exposed to merchants. Tilled Alternative Compliance Submission [https://docs.tilled.com/docs/resources/pci-compliance#alternative-compliance-submission](https://docs.tilled.com/docs/resources/pci-compliance#alternative-compliance-submission) Merchants who have completed PCI compliance through another vendor can upload their Certificate of Compliance to MaxPCI, including SAQ information and scan results if required. Last updated on March 7, 2025 March 7, 2025 Error CodesExample Applications [Error Codes](https://docs.tilled.com/docs/resources/error-codes) [Example Applications](https://docs.tilled.com/docs/sdks-applications/example-applications)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/sdks-applications/tilledjs",
    "title": "Tilled",
    "content": "Tilled.js Tilled.js allows you to seamlessly integrate a payment form into your application and securely store payment information on Tilled’s remote servers, minimizing your PCI compliance burden. Implement Tilled.js Include Tilled.js in your webpageTo start, embed the Tilled.js script directly in the <head> tag of your HTML to ensure it loads before your page content. You may use the defer attribute to avoid blocking the parser; however, use of the async attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles.<script src=\"https://js.tilled.com/v2\" defer></script>Initialize Tilled.jsInstantiate Tilled.js using your publishable API key, the account_id, and the initialization options.const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true });PARAMETERTYPEDESCRIPTIONDEFAULTpublishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.falseCreate the FormInitialize your main Form instance where you’ll add all the form fields. This form acts as the container for all subsequent fields.const form = await tilled.form({ payment_method_type: 'card' });PARAMETERTYPEDESCRIPTIONDEFAULTpayment_method_typestringSpecifies the payment_method_type, either card or ach_debit.cardCreate and inject Form FieldsCreate each Form Field individually using form.createField() and then inject them into your HTML using either a CSS selector or a DOM element.const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container');PARAMETERTYPEREQUIREDDESCRIPTIONselectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected.Configure Field Styles (optional)Customize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software.const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container');PARAMETERTYPEDESCRIPTIONDEFAULTformFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field typeForm Field stylesCSS PROPERTYTYPEDESCRIPTIONcolorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects.Add event listeners to handle user interactionsAttach event listeners to your form fields to handle actions like input validation or dynamic updates.cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } });EVENTTRIGGER CONDITIONDESCRIPTIONblurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input.Build the FormOnce all fields are created and configured, build the Form.await form.build();MethodsMETHODDESCRIPTIONPARAMETERSRETURNStilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean)Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment_method_type, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }'This server-side step generates a client_secret which will be used to complete the transaction on the client side with Tilled.js.Collect payment method details using Tilled.js (optional)Use Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the Attach the Payment Method to a CustomerAPI endpoint.tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } );Confirm the payment intentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body.If the payment intent status is requires_payment_method, you’ll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } );Teardown when doneRemove your Form from the DOM and clean up resources when the Form is no longer needed.await form.teardown();PARAMETERTYPEREQUIREDDESCRIPTIONhandlerfunctionNoOptional callback to execute after teardown is complete. Examples Credit card form /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); ACH bank account form /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); EFT bank account form /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); Apple Pay /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); });Last updated on December 12, 2024PCI Compliance Tilled.js Tilled.js allows you to seamlessly integrate a payment form into your application and securely store payment information on Tilled’s remote servers, minimizing your PCI compliance burden. Implement Tilled.js [https://docs.tilled.com/docs/sdks-applications/tilledjs#implement-tilledjs](https://docs.tilled.com/docs/sdks-applications/tilledjs#implement-tilledjs) Include Tilled.js in your webpageTo start, embed the Tilled.js script directly in the <head> tag of your HTML to ensure it loads before your page content. You may use the defer attribute to avoid blocking the parser; however, use of the async attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles.<script src=\"https://js.tilled.com/v2\" defer></script>Initialize Tilled.jsInstantiate Tilled.js using your publishable API key, the account_id, and the initialization options.const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true });PARAMETERTYPEDESCRIPTIONDEFAULTpublishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.falseCreate the FormInitialize your main Form instance where you’ll add all the form fields. This form acts as the container for all subsequent fields.const form = await tilled.form({ payment_method_type: 'card' });PARAMETERTYPEDESCRIPTIONDEFAULTpayment_method_typestringSpecifies the payment_method_type, either card or ach_debit.cardCreate and inject Form FieldsCreate each Form Field individually using form.createField() and then inject them into your HTML using either a CSS selector or a DOM element.const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container');PARAMETERTYPEREQUIREDDESCRIPTIONselectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected.Configure Field Styles (optional)Customize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software.const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container');PARAMETERTYPEDESCRIPTIONDEFAULTformFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field typeForm Field stylesCSS PROPERTYTYPEDESCRIPTIONcolorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects.Add event listeners to handle user interactionsAttach event listeners to your form fields to handle actions like input validation or dynamic updates.cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } });EVENTTRIGGER CONDITIONDESCRIPTIONblurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input.Build the FormOnce all fields are created and configured, build the Form.await form.build();MethodsMETHODDESCRIPTIONPARAMETERSRETURNStilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean)Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment_method_type, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }'This server-side step generates a client_secret which will be used to complete the transaction on the client side with Tilled.js.Collect payment method details using Tilled.js (optional)Use Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the Attach the Payment Method to a CustomerAPI endpoint.tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } );Confirm the payment intentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body.If the payment intent status is requires_payment_method, you’ll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } );Teardown when doneRemove your Form from the DOM and clean up resources when the Form is no longer needed.await form.teardown();PARAMETERTYPEREQUIREDDESCRIPTIONhandlerfunctionNoOptional callback to execute after teardown is complete. Include Tilled.js in your webpage [https://docs.tilled.com/docs/sdks-applications/tilledjs#include-tilledjs-in-your-webpage](https://docs.tilled.com/docs/sdks-applications/tilledjs#include-tilledjs-in-your-webpage) To start, embed the Tilled.js script directly in the <head> tag of your HTML to ensure it loads before your page content. You may use the defer attribute to avoid blocking the parser; however, use of the async attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles. <head> defer async <script src=\"https://js.tilled.com/v2\" defer></script> <script src=\"https://js.tilled.com/v2\" defer></script> <script src=\"https://js.tilled.com/v2\" defer></script> <script src=\"https://js.tilled.com/v2\" defer></script> < script src = \"https://js.tilled.com/v2\" defer > < / script > Initialize Tilled.js [https://docs.tilled.com/docs/sdks-applications/tilledjs#initialize-tilledjs](https://docs.tilled.com/docs/sdks-applications/tilledjs#initialize-tilledjs) Instantiate Tilled.js using your publishable API key, the account_id, and the initialization options. account_id const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled ( 'pk_…' , 'acct_…' , { sandbox : true } ) ; PARAMETERTYPEDESCRIPTIONDEFAULTpublishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.false PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETER PARAMETER TYPE TYPE DESCRIPTION DESCRIPTION DEFAULT DEFAULT publishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.false publishableKeystringYour publishable API key.None publishableKey publishableKey string Your publishable API key. None accountIdstringYour account ID.None accountId accountId string Your account ID. None optionsobjectAdditional settings for the Tilled instance.None options options object Additional settings for the Tilled instance. None options.sandboxbooleanIndicates whether to use the sandbox environment.false options.sandbox options.sandbox boolean Indicates whether to use the sandbox environment. false false Create the Form [https://docs.tilled.com/docs/sdks-applications/tilledjs#create-the-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#create-the-form) Initialize your main Form instance where you’ll add all the form fields. This form acts as the container for all subsequent fields. Form const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled . form ( { payment_method_type : 'card' } ) ; PARAMETERTYPEDESCRIPTIONDEFAULTpayment_method_typestringSpecifies the payment_method_type, either card or ach_debit.card PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETER PARAMETER TYPE TYPE DESCRIPTION DESCRIPTION DEFAULT DEFAULT payment_method_typestringSpecifies the payment_method_type, either card or ach_debit.card payment_method_typestringSpecifies the payment_method_type, either card or ach_debit.card payment_method_type payment_method_type string Specifies the payment_method_type, either card or ach_debit. payment_method_type card ach_debit card card Create and inject Form Fields [https://docs.tilled.com/docs/sdks-applications/tilledjs#create-and-inject-form-fields](https://docs.tilled.com/docs/sdks-applications/tilledjs#create-and-inject-form-fields) Create each Form Field individually using form.createField() and then inject them into your HTML using either a CSS selector or a DOM element. Form Field form.createField() const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container'); const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container'); const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container'); const cardNumberField = form.createField('cardNumber'); const cardNumberField = form . createField ( 'cardNumber' ) ; cardNumberField.inject('#card-number-container'); cardNumberField . inject ( '#card-number-container' ) ; PARAMETERTYPEREQUIREDDESCRIPTIONselectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected. PARAMETERTYPEREQUIREDDESCRIPTION PARAMETERTYPEREQUIREDDESCRIPTION PARAMETER PARAMETER TYPE TYPE REQUIRED REQUIRED DESCRIPTION DESCRIPTION selectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected. selectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected. selector selector string or DOM Element Yes CSS selector or DOM element where the field should be injected. Configure Field Styles (optional) [https://docs.tilled.com/docs/sdks-applications/tilledjs#configure-field-styles-optional](https://docs.tilled.com/docs/sdks-applications/tilledjs#configure-field-styles-optional) Customize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software. const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container'); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container'); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container'); const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: 'Helvetica Neue, Arial, sans-serif', fontFamily : 'Helvetica Neue, Arial, sans-serif' , color: '#30416e', color : '#30416e' , fontWeight: '400', fontWeight : '400' , } } } } }; } ; const styledCardNumberField = form.createField('cardNumber', fieldOptions); const styledCardNumberField = form . createField ( 'cardNumber' , fieldOptions ) ; styledCardNumberField.inject('#card-number-container'); styledCardNumberField . inject ( '#card-number-container' ) ; PARAMETERTYPEDESCRIPTIONDEFAULTformFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field type PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETER PARAMETER TYPE TYPE DESCRIPTION DESCRIPTION DEFAULT DEFAULT formFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field type formFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).None formFieldType formFieldType string Type of the form field (e.g., cardNumber, cardExpiry). cardNumber cardExpiry None optionsobjectAdditional settings for the field's customization.None options options object Additional settings for the field's customization. None selectorstring/objectCSS selector or DOM element for embedding the field.None selector selector string/object CSS selector or DOM element for embedding the field. None stylesobjectCSS styles to apply to the field.None styles styles object CSS styles to apply to the field. None placeholderstringText hint that appears in the field.Depends on field type placeholder placeholder string Text hint that appears in the field. Depends on field type Form Field styles [https://docs.tilled.com/docs/sdks-applications/tilledjs#form-field-styles](https://docs.tilled.com/docs/sdks-applications/tilledjs#form-field-styles) CSS PROPERTYTYPEDESCRIPTIONcolorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects. CSS PROPERTYTYPEDESCRIPTION CSS PROPERTYTYPEDESCRIPTION CSS PROPERTY CSS PROPERTY TYPE TYPE DESCRIPTION DESCRIPTION colorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects. colorstringSets the text color. color color string Sets the text color. opacitystringSets the opacity level. opacity opacity string Sets the opacity level. letterSpacingstringControls spacing between characters. letterSpacing letterSpacing string Controls spacing between characters. textAlignstringAligns text horizontally. textAlign textAlign string Aligns text horizontally. textIndentstringIndents the first line of text. textIndent textIndent string Indents the first line of text. textDecorationstringApplies text decoration. textDecoration textDecoration string Applies text decoration. textShadowstringAdds shadow to text. textShadow textShadow string Adds shadow to text. fontstringSets the font style. font font string Sets the font style. fontFamilystringSpecifies the font family. fontFamily fontFamily string Specifies the font family. fontSizestringSets the size of the font. fontSize fontSize string Sets the size of the font. fontStylestringDefines the style of the font. fontStyle fontStyle string Defines the style of the font. fontWeightstringSets the weight of the font. fontWeight fontWeight string Sets the weight of the font. lineHeightstringSpecifies the line height. lineHeight lineHeight string Specifies the line height. transitionstringDefines transition effects. transition transition string Defines transition effects. Add event listeners to handle user interactions [https://docs.tilled.com/docs/sdks-applications/tilledjs#add-event-listeners-to-handle-user-interactions](https://docs.tilled.com/docs/sdks-applications/tilledjs#add-event-listeners-to-handle-user-interactions) Attach event listeners to your form fields to handle actions like input validation or dynamic updates. cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } }); cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } }); cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } }); cardNumberField.on('change', (event) => { cardNumberField . on ( 'change' , ( event ) => { if (event.valid) { if ( event . valid ) { console.log('Card number is valid'); console . log ( 'Card number is valid' ) ; } else { } else { console.log('Card number is invalid:', event.error); console . log ( 'Card number is invalid:' , event . error ) ; } } }); } ) ; EVENTTRIGGER CONDITIONDESCRIPTIONblurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input. EVENTTRIGGER CONDITIONDESCRIPTION EVENTTRIGGER CONDITIONDESCRIPTION EVENT EVENT TRIGGER CONDITION TRIGGER CONDITION DESCRIPTION DESCRIPTION blurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input. blurFired when a field loses focus.Useful for validation and UI updates. blur blur Fired when a field loses focus. Useful for validation and UI updates. focusFired when a field gains focus.Useful for highlighting and UI enhancements. focus focus Fired when a field gains focus. Useful for highlighting and UI enhancements. changeFired when the value of a field changes.Useful for real-time validation and feedback. change change Fired when the value of a field changes. Useful for real-time validation and feedback. readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input. ready ready Fired when a field is fully rendered and ready for interaction. Indicates readiness for user input. Build the Form [https://docs.tilled.com/docs/sdks-applications/tilledjs#build-the-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#build-the-form) Once all fields are created and configured, build the Form. Form await form.build(); await form.build(); await form.build(); await form.build(); await form . build ( ) ; Methods [https://docs.tilled.com/docs/sdks-applications/tilledjs#methods](https://docs.tilled.com/docs/sdks-applications/tilledjs#methods) METHODDESCRIPTIONPARAMETERSRETURNStilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean) METHODDESCRIPTIONPARAMETERSRETURNS METHODDESCRIPTIONPARAMETERSRETURNS METHOD METHOD DESCRIPTION DESCRIPTION PARAMETERS PARAMETERS RETURNS RETURNS tilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean) tilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm object tilled.form() tilled.form() Initializes a new form instance. payment_method_type: Specifies the type of payment method payment_method_type Form object Form form.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField object form.createField(fieldType, options) form.createField(fieldType, options) Creates a new form field of the specified type. fieldType: Type of fieldoptions: { selector, styles, placeholder } fieldType options selector styles placeholder FormField object FormField field.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chaining field.inject(selector) field.inject(selector) Injects the form field into the specified DOM element. selector: CSS selector or DOM element selector FormField instance for chaining FormField form.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete) form.build() form.build() Prepares all fields within the form for user interaction. None Promise (resolves when complete) form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean) form.teardown() form.teardown() Removes all fields from the DOM and cleans up resources. handler: Optional callback to execute after teardown is complete. handler Promise (resolves to a boolean) Create a payment intent [https://docs.tilled.com/docs/sdks-applications/tilledjs#create-a-payment-intent](https://docs.tilled.com/docs/sdks-applications/tilledjs#create-a-payment-intent) To Create a Payment IntentAPI, specify the necessary details such as currency, payment_method_type, and amount. [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API currency payment_method_type amount curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' This server-side step generates a client_secret which will be used to complete the transaction on the client side with Tilled.js. client_secret Collect payment method details using Tilled.js (optional) [https://docs.tilled.com/docs/sdks-applications/tilledjs#collect-payment-method-details-using-tilledjs-optional](https://docs.tilled.com/docs/sdks-applications/tilledjs#collect-payment-method-details-using-tilledjs-optional) Use Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the Attach the Payment Method to a CustomerAPI endpoint. [Attach the Payment Method to a CustomerAPI](https://docs.tilled.com/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) API tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } ); tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } ); tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } ); tilled tilled .createPaymentMethod({ . createPaymentMethod ( { type: 'card', type : 'card' , billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , }) } ) .then( . then ( (paymentMethod) => { ( paymentMethod ) => { // attach to customer before confirming the payment // attach to customer before confirming the payment // confirm payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); tilled . confirmPayment ( paymentIntentClientSecret , paymentMethod ) ; }, } , (error) => { ( error ) => { // An error with the request (>400 status code) // An error with the request (>400 status code) } } ); ) ; Confirm the payment intent [https://docs.tilled.com/docs/sdks-applications/tilledjs#confirm-the-payment-intent](https://docs.tilled.com/docs/sdks-applications/tilledjs#confirm-the-payment-intent) In order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. payment_method_id confirm=true If the payment intent status is requires_payment_method, you’ll need to attach a payment method using the Confirm a Payment IntentAPI endpoint. requires_payment_method [Confirm a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) API tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } ); tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } ); tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } ); tilled.confirmPayment(paymentIntentClientSecret, { tilled . confirmPayment ( paymentIntentClientSecret , { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) payment_method : { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', type : 'card' , billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , } } }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // Be sure to check the 'status' and/or 'last_error_message' // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful // properties to know if the charge was successful }, } , (error) => { ( error ) => { // Typically an error with the request (>400 status code) // Typically an error with the request (>400 status code) } } ); ) ; Teardown when done [https://docs.tilled.com/docs/sdks-applications/tilledjs#teardown-when-done](https://docs.tilled.com/docs/sdks-applications/tilledjs#teardown-when-done) Remove your Form from the DOM and clean up resources when the Form is no longer needed. Form Form await form.teardown(); await form.teardown(); await form.teardown(); await form.teardown(); await form . teardown ( ) ; PARAMETERTYPEREQUIREDDESCRIPTIONhandlerfunctionNoOptional callback to execute after teardown is complete. PARAMETERTYPEREQUIREDDESCRIPTION PARAMETERTYPEREQUIREDDESCRIPTION PARAMETER PARAMETER TYPE TYPE REQUIRED REQUIRED DESCRIPTION DESCRIPTION handlerfunctionNoOptional callback to execute after teardown is complete. handlerfunctionNoOptional callback to execute after teardown is complete. handler handler function No Optional callback to execute after teardown is complete. Examples [https://docs.tilled.com/docs/sdks-applications/tilledjs#examples](https://docs.tilled.com/docs/sdks-applications/tilledjs#examples) Credit card form [https://docs.tilled.com/docs/sdks-applications/tilledjs#credit-card-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#credit-card-form) /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); /* Example assumptions: /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ */ const tilled = new Tilled('pk_...', 'acct_...'); const tilled = new Tilled ( 'pk_...' , 'acct_...' ) ; const form = await tilled.form({ const form = await tilled . form ( { payment_method_type: 'card', payment_method_type : 'card' , }); } ) ; const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: 'Helvetica Neue, Arial, sans-serif', fontFamily : 'Helvetica Neue, Arial, sans-serif' , color: '#304166', color : '#304166' , fontWeight: '400', fontWeight : '400' , fontSize: '16px', fontSize : '16px' , }, } , invalid: { invalid : { ':hover': { ':hover' : { textDecoration: 'underline dotted red', textDecoration : 'underline dotted red' , }, } , }, } , valid: { valid : { color: '#00BDA5', color : '#00BDA5' , }, } , }, } , }; } ; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form . createField ( 'cardNumber' , fieldOptions ) . inject ( '#card-number-element' ) ; form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form . createField ( 'cardExpiry' , { ... fieldOptions , selector : '#card-expiration-element' } ) ; form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); form . createField ( 'cardCvv' , fieldOptions ) . inject ( '#card-cvv-element' ) ; await form.build(); await form . build ( ) ; const submitButton = document.getElementById('submit-btn'); const submitButton = document . getElementById ( 'submit-btn' ) ; submitButton.onclick = () => { submitButton . onclick = ( ) => { tilled.confirmPayment(paymentIntentClientSecret, { tilled . confirmPayment ( paymentIntentClientSecret , { payment_method: { payment_method : { billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , }, } , }) } ) .then((paymentIntent) => { . then ( ( paymentIntent ) => { if (paymentIntent.status === 'succeeded') { if ( paymentIntent . status === 'succeeded' ) { alert('Payment successful'); alert ( 'Payment successful' ) ; } else { } else { const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }) } ) .catch((error) => { . catch ( ( error ) => { alert('An error occurred: ' + error.message); alert ( 'An error occurred: ' + error . message ) ; }); } ) ; ACH bank account form [https://docs.tilled.com/docs/sdks-applications/tilledjs#ach-bank-account-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#ach-bank-account-form) /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ */ const tilled = new Tilled('pk_…', 'acct_…'); const tilled = new Tilled ( 'pk_…' , 'acct_…' ) ; const form = await tilled.form({ const form = await tilled . form ( { payment_method_type: 'ach_debit', payment_method_type : 'ach_debit' , }); } ) ; const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: 'Helvetica Neue, Arial, sans-serif', fontFamily : 'Helvetica Neue, Arial, sans-serif' , color: '#304166', color : '#304166' , fontWeight: '400', fontWeight : '400' , fontSize: '16px', fontSize : '16px' , }, } , invalid: { invalid : { ':hover': { ':hover' : { textDecoration: 'underline dotted red', textDecoration : 'underline dotted red' , }, } , }, } , valid: { valid : { color: '#00BDA5', color : '#00BDA5' , }, } , }, } , }; } ; form .createField('bankAccountNumber', fieldOptions) . createField ( 'bankAccountNumber' , fieldOptions ) .inject('#bank-account-number-element'); . inject ( '#bank-account-number-element' ) ; form .createField('bankRoutingNumber', fieldOptions) . createField ( 'bankRoutingNumber' , fieldOptions ) .inject('#bank-routing-number-element'); . inject ( '#bank-routing-number-element' ) ; await form.build(); await form . build ( ) ; const submitButton = document.getElementById('submit-btn'); const submitButton = document . getElementById ( 'submit-btn' ) ; submitButton.on('click', () => { submitButton . on ( 'click' , ( ) => { // A payment intent will be created on your backend server and the // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // payment_intent.client_secret will be passed to your frontend to // be used below. // be used below. tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: { payment_method : { billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { street: '370 Interlocken Blvd', street : '370 Interlocken Blvd' , city: 'Broomfield', city : 'Broomfield' , state: 'CO', state : 'CO' , zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , ach_debit: { ach_debit : { account_type: 'checking', account_type : 'checking' , account_holder_name: 'John Doe', account_holder_name : 'John Doe' , }, } , }, } , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // Be sure to check the `status` and/or `last_payment_error` // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful // properties to know if the charge was successful if ( if ( paymentIntent.status === 'succeeded' || paymentIntent . status === 'succeeded' || paymentIntent.status === 'processing' paymentIntent . status === 'processing' ) { ) { alert('Payment successful'); alert ( 'Payment successful' ) ; } else { } else { const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }, } , (err) => { ( err ) => { // Typically an error with the request (>400 status code) // Typically an error with the request (>400 status code) } } ); ) ; }); } ) ; EFT bank account form [https://docs.tilled.com/docs/sdks-applications/tilledjs#eft-bank-account-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#eft-bank-account-form) /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const tilled = new Tilled ( \"pk_…\" , \"acct_…\" ) ; const form = await tilled.form({ const form = await tilled . form ( { payment_method_type: \"eft_debit\", payment_method_type : \"eft_debit\" , }); } ) ; const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: \"Helvetica Neue, Arial, sans-serif\", fontFamily : \"Helvetica Neue, Arial, sans-serif\" , color: \"#304166\", color : \"#304166\" , fontWeight: \"400\", fontWeight : \"400\" , fontSize: \"16px\", fontSize : \"16px\" , }, } , invalid: { invalid : { \":hover\": { \":hover\" : { textDecoration: \"underline dotted red\", textDecoration : \"underline dotted red\" , }, } , }, } , valid: { valid : { color: \"#00BDA5\", color : \"#00BDA5\" , }, } , }, } , }; } ; form .createField(\"bankAccountNumber\", fieldOptions) . createField ( \"bankAccountNumber\" , fieldOptions ) .inject(\"#bank-account-number-element\"); . inject ( \"#bank-account-number-element\" ) ; form .createField(\"bankRoutingNumber\", fieldOptions) . createField ( \"bankRoutingNumber\" , fieldOptions ) .inject(\"#bank-routing-number-element\"); . inject ( \"#bank-routing-number-element\" ) ; await form.build(); await form . build ( ) ; const submitButton = document.getElementById(\"submit-btn\"); const submitButton = document . getElementById ( \"submit-btn\" ) ; submitButton.on(\"click\", () => { submitButton . on ( \"click\" , ( ) => { // A payment intent will be created on your backend server and the // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // payment_intent.client_secret will be passed to your frontend to // be used below. // be used below. tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: { payment_method : { billing_details: { billing_details : { name: \"John Doe\", name : \"John Doe\" , address: { address : { street: \"350 Wellington St\", street : \"350 Wellington St\" , city: \"Ottawa\", city : \"Ottawa\" , state: \"ON\", state : \"ON\" , zip: \"K1A 0N1\", zip : \"K1A 0N1\" , country: \"CA\", country : \"CA\" , }, } , }, } , eft_debit: { eft_debit : { account_holder_name: \"John Doe\", account_holder_name : \"John Doe\" , }, } , }, } , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // Be sure to check the `status` and/or `last_payment_error` // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful // properties to know if the charge was successful if ( if ( paymentIntent.status === \"succeeded\" || paymentIntent . status === \"succeeded\" || paymentIntent.status === \"processing\" paymentIntent . status === \"processing\" ) { ) { alert(\"Payment successful\"); alert ( \"Payment successful\" ) ; } else { } else { const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert(\"Payment failed: \" + errMsg); alert ( \"Payment failed: \" + errMsg ) ; } } }, } , (err) => { ( err ) => { // Typically an error with the request (>400 status code) // Typically an error with the request (>400 status code) } } ); ) ; }); } ) ; Apple Pay [https://docs.tilled.com/docs/sdks-applications/tilledjs#apple-pay](https://docs.tilled.com/docs/sdks-applications/tilledjs#apple-pay) /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); }); /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); }); /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); }); /** /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ */ const form = tilled.form({ const form = tilled . form ( { payment_method_type: 'card', payment_method_type : 'card' , }); } ) ; const paymentRequest = tilled.paymentRequest({ const paymentRequest = tilled . paymentRequest ( { total: { total : { label: 'Tilled tee', label : 'Tilled tee' , amount: secretData.amount, amount : secretData . amount , }, } , }); } ) ; const prButton = form.createField('paymentRequestButton', { const prButton = form . createField ( 'paymentRequestButton' , { paymentRequest: paymentRequest, paymentRequest : paymentRequest , }); } ) ; paymentRequest.canMakePayment().then((result) => { paymentRequest . canMakePayment ( ) . then ( ( result ) => { if (result) { if ( result ) { prButton.inject('#native-payment-element'); prButton . inject ( '#native-payment-element' ) ; } else { } else { document.getElementById('native-payment-element').style.display = 'none'; document . getElementById ( 'native-payment-element' ) . style . display = 'none' ; } } }); } ) ; paymentRequest.on('paymentmethod', (ev) => { paymentRequest . on ( 'paymentmethod' , ( ev ) => { let paymentMethod = ev.paymentMethod; let paymentMethod = ev . paymentMethod ; tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: paymentMethod.id, payment_method : paymentMethod . id , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // The payment intent confirmation occurred, but the // The payment intent confirmation occurred, but the // actual charge may still have failed. Check // actual charge may still have failed. Check if ( if ( paymentIntent.status === 'succeeded' || paymentIntent . status === 'succeeded' || paymentIntent.status === 'processing' paymentIntent . status === 'processing' ) { ) { ev.complete('success'); ev . complete ( 'success' ) ; alert('Successul payment'); alert ( 'Successul payment' ) ; } else { } else { ev.complete('fail'); ev . complete ( 'fail' ) ; const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }, } , (err) => { ( err ) => { ev.complete('fail'); ev . complete ( 'fail' ) ; } } ); ) ; }); } ) ; Last updated on December 12, 2024 December 12, 2024 PCI Compliance [PCI Compliance](https://docs.tilled.com/docs/resources/pci-compliance)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/sdks-applications/example-applications",
    "title": "Tilled",
    "content": "Example Applications In addition to the examples featured in the Tilled.jsJS guide, we provide fully functional applications for you to clone or fork. This enables you to view Tilled's capabilities firsthand. All of our examples, except for the Simple Payment Example, are housed within the Tilled Example Monorepo. EXAMPLEDESCRIPTIONSimple Payment ExampleDemonstrates the quickest method to process payments using Tilled, utilizing HTML, CSS, and JavaScript to create a payment form, accompanied by a brief Express application to Create a Payment IntentAPI.React Payment ExampleShows how to implement Tilled.jsJS within a React application, including a custom hook, useTilled, to accelerate development.React TS CheckoutProvides a comprehensive checkout experience using Tilled.jsJS with additional features such as saving payment methods, utilizing TypeScript and MUI, and includes a TypeScript version of the useTilled hook.Android CheckoutDemonstrates the use of Tilled's's API for Card Present payment methods via a POS checkout terminal built with Kotlin, intended for use on Android devices. A Tilled-provided terminal reader is required.iOS CheckoutShowcases a payment terminal built with SwiftUI for Apple mobile devices, incorporating a WebView to facilitate Tilled's Checkout SessionsAPI or a custom Tilled.jsJS form.Apple Pay ExamplesIncludes two Apple Pay examples adapted from our Simple Payment Example, requiring HTTPS and a valid SSL certificate. One is hosted on Netlify, and the other uses ngrok.Laravel PHP CheckoutDemonstrates using Tilled.jsJS with Laravel's Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for the backend. This setup enables creating, retrieving, attaching, and reusing payment methods.Laravel PHP ReportingA reporting dashboard using Laravel that leverages the Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for backend interactions. It includes capabilities to retrieve and display data for Balance TransactionsAPI, PayoutsAPI, Payment IntentsAPI, and DisputesAPI.Simple Onboarding FormProvides basic forms to Create a Connected AccountAPI, Update a Merchant ApplicationAPI, and Submit a Merchant ApplicationAPI.Last updated on July 15, 2024PCI Compliance Example Applications In addition to the examples featured in the Tilled.jsJS guide, we provide fully functional applications for you to clone or fork. This enables you to view Tilled's capabilities firsthand. [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Tilled's All of our examples, except for the Simple Payment Example, are housed within the Tilled Example Monorepo. [Simple Payment Example](https://github.com/gettilled/simple-payment-example) [Tilled Example Monorepo](https://github.com/gettilled/tilled-example-monorepo) EXAMPLEDESCRIPTIONSimple Payment ExampleDemonstrates the quickest method to process payments using Tilled, utilizing HTML, CSS, and JavaScript to create a payment form, accompanied by a brief Express application to Create a Payment IntentAPI.React Payment ExampleShows how to implement Tilled.jsJS within a React application, including a custom hook, useTilled, to accelerate development.React TS CheckoutProvides a comprehensive checkout experience using Tilled.jsJS with additional features such as saving payment methods, utilizing TypeScript and MUI, and includes a TypeScript version of the useTilled hook.Android CheckoutDemonstrates the use of Tilled's's API for Card Present payment methods via a POS checkout terminal built with Kotlin, intended for use on Android devices. A Tilled-provided terminal reader is required.iOS CheckoutShowcases a payment terminal built with SwiftUI for Apple mobile devices, incorporating a WebView to facilitate Tilled's Checkout SessionsAPI or a custom Tilled.jsJS form.Apple Pay ExamplesIncludes two Apple Pay examples adapted from our Simple Payment Example, requiring HTTPS and a valid SSL certificate. One is hosted on Netlify, and the other uses ngrok.Laravel PHP CheckoutDemonstrates using Tilled.jsJS with Laravel's Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for the backend. This setup enables creating, retrieving, attaching, and reusing payment methods.Laravel PHP ReportingA reporting dashboard using Laravel that leverages the Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for backend interactions. It includes capabilities to retrieve and display data for Balance TransactionsAPI, PayoutsAPI, Payment IntentsAPI, and DisputesAPI.Simple Onboarding FormProvides basic forms to Create a Connected AccountAPI, Update a Merchant ApplicationAPI, and Submit a Merchant ApplicationAPI. EXAMPLEDESCRIPTION EXAMPLEDESCRIPTION EXAMPLE EXAMPLE DESCRIPTION DESCRIPTION Simple Payment ExampleDemonstrates the quickest method to process payments using Tilled, utilizing HTML, CSS, and JavaScript to create a payment form, accompanied by a brief Express application to Create a Payment IntentAPI.React Payment ExampleShows how to implement Tilled.jsJS within a React application, including a custom hook, useTilled, to accelerate development.React TS CheckoutProvides a comprehensive checkout experience using Tilled.jsJS with additional features such as saving payment methods, utilizing TypeScript and MUI, and includes a TypeScript version of the useTilled hook.Android CheckoutDemonstrates the use of Tilled's's API for Card Present payment methods via a POS checkout terminal built with Kotlin, intended for use on Android devices. A Tilled-provided terminal reader is required.iOS CheckoutShowcases a payment terminal built with SwiftUI for Apple mobile devices, incorporating a WebView to facilitate Tilled's Checkout SessionsAPI or a custom Tilled.jsJS form.Apple Pay ExamplesIncludes two Apple Pay examples adapted from our Simple Payment Example, requiring HTTPS and a valid SSL certificate. One is hosted on Netlify, and the other uses ngrok.Laravel PHP CheckoutDemonstrates using Tilled.jsJS with Laravel's Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for the backend. This setup enables creating, retrieving, attaching, and reusing payment methods.Laravel PHP ReportingA reporting dashboard using Laravel that leverages the Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for backend interactions. It includes capabilities to retrieve and display data for Balance TransactionsAPI, PayoutsAPI, Payment IntentsAPI, and DisputesAPI.Simple Onboarding FormProvides basic forms to Create a Connected AccountAPI, Update a Merchant ApplicationAPI, and Submit a Merchant ApplicationAPI. Simple Payment ExampleDemonstrates the quickest method to process payments using Tilled, utilizing HTML, CSS, and JavaScript to create a payment form, accompanied by a brief Express application to Create a Payment IntentAPI. Simple Payment Example [Simple Payment Example](https://github.com/gettilled/simple-payment-example) Demonstrates the quickest method to process payments using Tilled, utilizing HTML, CSS, and JavaScript to create a payment form, accompanied by a brief Express application to Create a Payment IntentAPI. Tilled [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API React Payment ExampleShows how to implement Tilled.jsJS within a React application, including a custom hook, useTilled, to accelerate development. React Payment Example [React Payment Example](https://github.com/gettilled/tilled-example-monorepo/blob/master/react/react-payment-example) Shows how to implement Tilled.jsJS within a React application, including a custom hook, useTilled, to accelerate development. [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS [useTilled](https://github.com/gettilled/tilled-example-monorepo/tree/master/react/react-payment-example#usetilled) Tilled React TS CheckoutProvides a comprehensive checkout experience using Tilled.jsJS with additional features such as saving payment methods, utilizing TypeScript and MUI, and includes a TypeScript version of the useTilled hook. React TS Checkout [React TS Checkout](https://github.com/gettilled/tilled-example-monorepo/blob/master/react/react-ts-checkout) Provides a comprehensive checkout experience using Tilled.jsJS with additional features such as saving payment methods, utilizing TypeScript and MUI, and includes a TypeScript version of the useTilled hook. [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS [useTilled](https://github.com/gettilled/tilled-example-monorepo/tree/master/react/react-payment-example#usetilled) Tilled Android CheckoutDemonstrates the use of Tilled's's API for Card Present payment methods via a POS checkout terminal built with Kotlin, intended for use on Android devices. A Tilled-provided terminal reader is required. Android Checkout [Android Checkout](https://github.com/gettilled/tilled-example-monorepo/tree/master/android/android-card-present-checkout) Demonstrates the use of Tilled's's API for Card Present payment methods via a POS checkout terminal built with Kotlin, intended for use on Android devices. A Tilled-provided terminal reader is required. Tilled's [Card Present](https://docs.tilled.com/docs/payments/card-present/) Tilled iOS CheckoutShowcases a payment terminal built with SwiftUI for Apple mobile devices, incorporating a WebView to facilitate Tilled's Checkout SessionsAPI or a custom Tilled.jsJS form. iOS Checkout [iOS Checkout](https://github.com/gettilled/tilled-example-monorepo/tree/master/ios/ios-checkout) Showcases a payment terminal built with SwiftUI for Apple mobile devices, incorporating a WebView to facilitate Tilled's Checkout SessionsAPI or a custom Tilled.jsJS form. Tilled's [Checkout SessionsAPI](https://docs.tilled.com/api-reference#tag/checkout-sessions) API [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Apple Pay ExamplesIncludes two Apple Pay examples adapted from our Simple Payment Example, requiring HTTPS and a valid SSL certificate. One is hosted on Netlify, and the other uses ngrok. Apple Pay Examples [Apple Pay Examples](https://github.com/gettilled/tilled-example-monorepo#apple-pay-examples) Includes two Apple Pay examples adapted from our Simple Payment Example, requiring HTTPS and a valid SSL certificate. One is hosted on Netlify, and the other uses ngrok. [Simple Payment Example](https://github.com/gettilled/simple-payment-example) [Netlify](https://github.com/gettilled/tilled-example-monorepo/blob/master/apple-pay/apple-pay-example-netlify) [ngrok](https://github.com/gettilled/tilled-example-monorepo/blob/master/apple-pay/apple-pay-example-ngrok) Laravel PHP CheckoutDemonstrates using Tilled.jsJS with Laravel's Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for the backend. This setup enables creating, retrieving, attaching, and reusing payment methods. Laravel PHP Checkout [Laravel PHP Checkout](https://github.com/gettilled/tilled-example-monorepo/tree/master/laravel/laravel-php-checkout) Demonstrates using Tilled.jsJS with Laravel's Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for the backend. This setup enables creating, retrieving, attaching, and reusing payment methods. [Tilled.jsJS](https://docs.tilled.com/docs/sdks-applications/tilledjs/) JS Laravel PHP ReportingA reporting dashboard using Laravel that leverages the Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for backend interactions. It includes capabilities to retrieve and display data for Balance TransactionsAPI, PayoutsAPI, Payment IntentsAPI, and DisputesAPI. Laravel PHP Reporting [Laravel PHP Reporting](https://github.com/gettilled/tilled-example-monorepo/tree/master/laravel/laravel-php-reporting) A reporting dashboard using Laravel that leverages the Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for backend interactions. It includes capabilities to retrieve and display data for Balance TransactionsAPI, PayoutsAPI, Payment IntentsAPI, and DisputesAPI. [Balance TransactionsAPI](https://docs.tilled.com/api-reference#tag/balance-transactions) API [PayoutsAPI](https://docs.tilled.com/api-reference#tag/payouts) API [Payment IntentsAPI](https://docs.tilled.com/api-reference#tag/payment-intents) API [DisputesAPI](https://docs.tilled.com/api-reference#tag/disputes) API Simple Onboarding FormProvides basic forms to Create a Connected AccountAPI, Update a Merchant ApplicationAPI, and Submit a Merchant ApplicationAPI. Simple Onboarding Form [Simple Onboarding Form](https://github.com/gettilled/tilled-example-monorepo/blob/master/javascript/simple-onboarding-form) Provides basic forms to Create a Connected AccountAPI, Update a Merchant ApplicationAPI, and Submit a Merchant ApplicationAPI. [Create a Connected AccountAPI](https://docs.tilled.com/api-reference#tag/accounts/post/v1/accounts/connected) API [Update a Merchant ApplicationAPI](https://docs.tilled.com/api-reference#tag/onboarding/put/v1/applications/%7Baccount_id%7D) API [Submit a Merchant ApplicationAPI](https://docs.tilled.com/api-reference#tag/onboarding/post/v1/applications/%7Baccount_id%7D/submit) API Last updated on July 15, 2024 July 15, 2024 PCI Compliance [PCI Compliance](https://docs.tilled.com/docs/resources/pci-compliance)",
    "sourceUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/sdks-applications/tilledjs/",
    "title": "Tilled",
    "content": "Tilled.js Tilled.js allows you to seamlessly integrate a payment form into your application and securely store payment information on Tilled’s remote servers, minimizing your PCI compliance burden. Implement Tilled.js Include Tilled.js in your webpageTo start, embed the Tilled.js script directly in the <head> tag of your HTML to ensure it loads before your page content. You may use the defer attribute to avoid blocking the parser; however, use of the async attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles.<script src=\"https://js.tilled.com/v2\" defer></script>Initialize Tilled.jsInstantiate Tilled.js using your publishable API key, the account_id, and the initialization options.const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true });PARAMETERTYPEDESCRIPTIONDEFAULTpublishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.falseCreate the FormInitialize your main Form instance where you’ll add all the form fields. This form acts as the container for all subsequent fields.const form = await tilled.form({ payment_method_type: 'card' });PARAMETERTYPEDESCRIPTIONDEFAULTpayment_method_typestringSpecifies the payment_method_type, either card or ach_debit.cardCreate and inject Form FieldsCreate each Form Field individually using form.createField() and then inject them into your HTML using either a CSS selector or a DOM element.const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container');PARAMETERTYPEREQUIREDDESCRIPTIONselectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected.Configure Field Styles (optional)Customize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software.const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container');PARAMETERTYPEDESCRIPTIONDEFAULTformFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field typeForm Field stylesCSS PROPERTYTYPEDESCRIPTIONcolorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects.Add event listeners to handle user interactionsAttach event listeners to your form fields to handle actions like input validation or dynamic updates.cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } });EVENTTRIGGER CONDITIONDESCRIPTIONblurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input.Build the FormOnce all fields are created and configured, build the Form.await form.build();MethodsMETHODDESCRIPTIONPARAMETERSRETURNStilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean)Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment_method_type, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }'This server-side step generates a client_secret which will be used to complete the transaction on the client side with Tilled.js.Collect payment method details using Tilled.js (optional)Use Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the Attach the Payment Method to a CustomerAPI endpoint.tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } );Confirm the payment intentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body.If the payment intent status is requires_payment_method, you’ll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } );Teardown when doneRemove your Form from the DOM and clean up resources when the Form is no longer needed.await form.teardown();PARAMETERTYPEREQUIREDDESCRIPTIONhandlerfunctionNoOptional callback to execute after teardown is complete. Examples Credit card form /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); ACH bank account form /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); EFT bank account form /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); Apple Pay /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); });Last updated on December 12, 2024PCI Compliance Tilled.js Tilled.js allows you to seamlessly integrate a payment form into your application and securely store payment information on Tilled’s remote servers, minimizing your PCI compliance burden. Implement Tilled.js [https://docs.tilled.com/docs/sdks-applications/tilledjs#implement-tilledjs](https://docs.tilled.com/docs/sdks-applications/tilledjs#implement-tilledjs) Include Tilled.js in your webpageTo start, embed the Tilled.js script directly in the <head> tag of your HTML to ensure it loads before your page content. You may use the defer attribute to avoid blocking the parser; however, use of the async attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles.<script src=\"https://js.tilled.com/v2\" defer></script>Initialize Tilled.jsInstantiate Tilled.js using your publishable API key, the account_id, and the initialization options.const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true });PARAMETERTYPEDESCRIPTIONDEFAULTpublishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.falseCreate the FormInitialize your main Form instance where you’ll add all the form fields. This form acts as the container for all subsequent fields.const form = await tilled.form({ payment_method_type: 'card' });PARAMETERTYPEDESCRIPTIONDEFAULTpayment_method_typestringSpecifies the payment_method_type, either card or ach_debit.cardCreate and inject Form FieldsCreate each Form Field individually using form.createField() and then inject them into your HTML using either a CSS selector or a DOM element.const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container');PARAMETERTYPEREQUIREDDESCRIPTIONselectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected.Configure Field Styles (optional)Customize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software.const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container');PARAMETERTYPEDESCRIPTIONDEFAULTformFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field typeForm Field stylesCSS PROPERTYTYPEDESCRIPTIONcolorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects.Add event listeners to handle user interactionsAttach event listeners to your form fields to handle actions like input validation or dynamic updates.cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } });EVENTTRIGGER CONDITIONDESCRIPTIONblurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input.Build the FormOnce all fields are created and configured, build the Form.await form.build();MethodsMETHODDESCRIPTIONPARAMETERSRETURNStilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean)Create a payment intentTo Create a Payment IntentAPI, specify the necessary details such as currency, payment_method_type, and amount.curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }'This server-side step generates a client_secret which will be used to complete the transaction on the client side with Tilled.js.Collect payment method details using Tilled.js (optional)Use Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the Attach the Payment Method to a CustomerAPI endpoint.tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } );Confirm the payment intentIn order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body.If the payment intent status is requires_payment_method, you’ll need to attach a payment method using the Confirm a Payment IntentAPI endpoint.tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } );Teardown when doneRemove your Form from the DOM and clean up resources when the Form is no longer needed.await form.teardown();PARAMETERTYPEREQUIREDDESCRIPTIONhandlerfunctionNoOptional callback to execute after teardown is complete. Include Tilled.js in your webpage [https://docs.tilled.com/docs/sdks-applications/tilledjs#include-tilledjs-in-your-webpage](https://docs.tilled.com/docs/sdks-applications/tilledjs#include-tilledjs-in-your-webpage) To start, embed the Tilled.js script directly in the <head> tag of your HTML to ensure it loads before your page content. You may use the defer attribute to avoid blocking the parser; however, use of the async attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles. <head> defer async <script src=\"https://js.tilled.com/v2\" defer></script> <script src=\"https://js.tilled.com/v2\" defer></script> <script src=\"https://js.tilled.com/v2\" defer></script> <script src=\"https://js.tilled.com/v2\" defer></script> < script src = \"https://js.tilled.com/v2\" defer > < / script > Initialize Tilled.js [https://docs.tilled.com/docs/sdks-applications/tilledjs#initialize-tilledjs](https://docs.tilled.com/docs/sdks-applications/tilledjs#initialize-tilledjs) Instantiate Tilled.js using your publishable API key, the account_id, and the initialization options. account_id const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true }); const tilled = new Tilled ( 'pk_…' , 'acct_…' , { sandbox : true } ) ; PARAMETERTYPEDESCRIPTIONDEFAULTpublishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.false PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETER PARAMETER TYPE TYPE DESCRIPTION DESCRIPTION DEFAULT DEFAULT publishableKeystringYour publishable API key.NoneaccountIdstringYour account ID.NoneoptionsobjectAdditional settings for the Tilled instance.Noneoptions.sandboxbooleanIndicates whether to use the sandbox environment.false publishableKeystringYour publishable API key.None publishableKey publishableKey string Your publishable API key. None accountIdstringYour account ID.None accountId accountId string Your account ID. None optionsobjectAdditional settings for the Tilled instance.None options options object Additional settings for the Tilled instance. None options.sandboxbooleanIndicates whether to use the sandbox environment.false options.sandbox options.sandbox boolean Indicates whether to use the sandbox environment. false false Create the Form [https://docs.tilled.com/docs/sdks-applications/tilledjs#create-the-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#create-the-form) Initialize your main Form instance where you’ll add all the form fields. This form acts as the container for all subsequent fields. Form const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled.form({ payment_method_type: 'card' }); const form = await tilled . form ( { payment_method_type : 'card' } ) ; PARAMETERTYPEDESCRIPTIONDEFAULTpayment_method_typestringSpecifies the payment_method_type, either card or ach_debit.card PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETER PARAMETER TYPE TYPE DESCRIPTION DESCRIPTION DEFAULT DEFAULT payment_method_typestringSpecifies the payment_method_type, either card or ach_debit.card payment_method_typestringSpecifies the payment_method_type, either card or ach_debit.card payment_method_type payment_method_type string Specifies the payment_method_type, either card or ach_debit. payment_method_type card ach_debit card card Create and inject Form Fields [https://docs.tilled.com/docs/sdks-applications/tilledjs#create-and-inject-form-fields](https://docs.tilled.com/docs/sdks-applications/tilledjs#create-and-inject-form-fields) Create each Form Field individually using form.createField() and then inject them into your HTML using either a CSS selector or a DOM element. Form Field form.createField() const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container'); const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container'); const cardNumberField = form.createField('cardNumber'); cardNumberField.inject('#card-number-container'); const cardNumberField = form.createField('cardNumber'); const cardNumberField = form . createField ( 'cardNumber' ) ; cardNumberField.inject('#card-number-container'); cardNumberField . inject ( '#card-number-container' ) ; PARAMETERTYPEREQUIREDDESCRIPTIONselectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected. PARAMETERTYPEREQUIREDDESCRIPTION PARAMETERTYPEREQUIREDDESCRIPTION PARAMETER PARAMETER TYPE TYPE REQUIRED REQUIRED DESCRIPTION DESCRIPTION selectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected. selectorstring or DOM ElementYesCSS selector or DOM element where the field should be injected. selector selector string or DOM Element Yes CSS selector or DOM element where the field should be injected. Configure Field Styles (optional) [https://docs.tilled.com/docs/sdks-applications/tilledjs#configure-field-styles-optional](https://docs.tilled.com/docs/sdks-applications/tilledjs#configure-field-styles-optional) Customize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software. const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container'); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container'); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#30416e', fontWeight: '400', } } }; const styledCardNumberField = form.createField('cardNumber', fieldOptions); styledCardNumberField.inject('#card-number-container'); const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: 'Helvetica Neue, Arial, sans-serif', fontFamily : 'Helvetica Neue, Arial, sans-serif' , color: '#30416e', color : '#30416e' , fontWeight: '400', fontWeight : '400' , } } } } }; } ; const styledCardNumberField = form.createField('cardNumber', fieldOptions); const styledCardNumberField = form . createField ( 'cardNumber' , fieldOptions ) ; styledCardNumberField.inject('#card-number-container'); styledCardNumberField . inject ( '#card-number-container' ) ; PARAMETERTYPEDESCRIPTIONDEFAULTformFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field type PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETERTYPEDESCRIPTIONDEFAULT PARAMETER PARAMETER TYPE TYPE DESCRIPTION DESCRIPTION DEFAULT DEFAULT formFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).NoneoptionsobjectAdditional settings for the field's customization.Noneselectorstring/objectCSS selector or DOM element for embedding the field.NonestylesobjectCSS styles to apply to the field.NoneplaceholderstringText hint that appears in the field.Depends on field type formFieldTypestringType of the form field (e.g., cardNumber, cardExpiry).None formFieldType formFieldType string Type of the form field (e.g., cardNumber, cardExpiry). cardNumber cardExpiry None optionsobjectAdditional settings for the field's customization.None options options object Additional settings for the field's customization. None selectorstring/objectCSS selector or DOM element for embedding the field.None selector selector string/object CSS selector or DOM element for embedding the field. None stylesobjectCSS styles to apply to the field.None styles styles object CSS styles to apply to the field. None placeholderstringText hint that appears in the field.Depends on field type placeholder placeholder string Text hint that appears in the field. Depends on field type Form Field styles [https://docs.tilled.com/docs/sdks-applications/tilledjs#form-field-styles](https://docs.tilled.com/docs/sdks-applications/tilledjs#form-field-styles) CSS PROPERTYTYPEDESCRIPTIONcolorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects. CSS PROPERTYTYPEDESCRIPTION CSS PROPERTYTYPEDESCRIPTION CSS PROPERTY CSS PROPERTY TYPE TYPE DESCRIPTION DESCRIPTION colorstringSets the text color.opacitystringSets the opacity level.letterSpacingstringControls spacing between characters.textAlignstringAligns text horizontally.textIndentstringIndents the first line of text.textDecorationstringApplies text decoration.textShadowstringAdds shadow to text.fontstringSets the font style.fontFamilystringSpecifies the font family.fontSizestringSets the size of the font.fontStylestringDefines the style of the font.fontWeightstringSets the weight of the font.lineHeightstringSpecifies the line height.transitionstringDefines transition effects. colorstringSets the text color. color color string Sets the text color. opacitystringSets the opacity level. opacity opacity string Sets the opacity level. letterSpacingstringControls spacing between characters. letterSpacing letterSpacing string Controls spacing between characters. textAlignstringAligns text horizontally. textAlign textAlign string Aligns text horizontally. textIndentstringIndents the first line of text. textIndent textIndent string Indents the first line of text. textDecorationstringApplies text decoration. textDecoration textDecoration string Applies text decoration. textShadowstringAdds shadow to text. textShadow textShadow string Adds shadow to text. fontstringSets the font style. font font string Sets the font style. fontFamilystringSpecifies the font family. fontFamily fontFamily string Specifies the font family. fontSizestringSets the size of the font. fontSize fontSize string Sets the size of the font. fontStylestringDefines the style of the font. fontStyle fontStyle string Defines the style of the font. fontWeightstringSets the weight of the font. fontWeight fontWeight string Sets the weight of the font. lineHeightstringSpecifies the line height. lineHeight lineHeight string Specifies the line height. transitionstringDefines transition effects. transition transition string Defines transition effects. Add event listeners to handle user interactions [https://docs.tilled.com/docs/sdks-applications/tilledjs#add-event-listeners-to-handle-user-interactions](https://docs.tilled.com/docs/sdks-applications/tilledjs#add-event-listeners-to-handle-user-interactions) Attach event listeners to your form fields to handle actions like input validation or dynamic updates. cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } }); cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } }); cardNumberField.on('change', (event) => { if (event.valid) { console.log('Card number is valid'); } else { console.log('Card number is invalid:', event.error); } }); cardNumberField.on('change', (event) => { cardNumberField . on ( 'change' , ( event ) => { if (event.valid) { if ( event . valid ) { console.log('Card number is valid'); console . log ( 'Card number is valid' ) ; } else { } else { console.log('Card number is invalid:', event.error); console . log ( 'Card number is invalid:' , event . error ) ; } } }); } ) ; EVENTTRIGGER CONDITIONDESCRIPTIONblurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input. EVENTTRIGGER CONDITIONDESCRIPTION EVENTTRIGGER CONDITIONDESCRIPTION EVENT EVENT TRIGGER CONDITION TRIGGER CONDITION DESCRIPTION DESCRIPTION blurFired when a field loses focus.Useful for validation and UI updates.focusFired when a field gains focus.Useful for highlighting and UI enhancements.changeFired when the value of a field changes.Useful for real-time validation and feedback.readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input. blurFired when a field loses focus.Useful for validation and UI updates. blur blur Fired when a field loses focus. Useful for validation and UI updates. focusFired when a field gains focus.Useful for highlighting and UI enhancements. focus focus Fired when a field gains focus. Useful for highlighting and UI enhancements. changeFired when the value of a field changes.Useful for real-time validation and feedback. change change Fired when the value of a field changes. Useful for real-time validation and feedback. readyFired when a field is fully rendered and ready for interaction.Indicates readiness for user input. ready ready Fired when a field is fully rendered and ready for interaction. Indicates readiness for user input. Build the Form [https://docs.tilled.com/docs/sdks-applications/tilledjs#build-the-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#build-the-form) Once all fields are created and configured, build the Form. Form await form.build(); await form.build(); await form.build(); await form.build(); await form . build ( ) ; Methods [https://docs.tilled.com/docs/sdks-applications/tilledjs#methods](https://docs.tilled.com/docs/sdks-applications/tilledjs#methods) METHODDESCRIPTIONPARAMETERSRETURNStilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean) METHODDESCRIPTIONPARAMETERSRETURNS METHODDESCRIPTIONPARAMETERSRETURNS METHOD METHOD DESCRIPTION DESCRIPTION PARAMETERS PARAMETERS RETURNS RETURNS tilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm objectform.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField objectfield.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chainingform.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete)form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean) tilled.form()Initializes a new form instance.payment_method_type: Specifies the type of payment methodForm object tilled.form() tilled.form() Initializes a new form instance. payment_method_type: Specifies the type of payment method payment_method_type Form object Form form.createField(fieldType, options)Creates a new form field of the specified type.fieldType: Type of fieldoptions: { selector, styles, placeholder }FormField object form.createField(fieldType, options) form.createField(fieldType, options) Creates a new form field of the specified type. fieldType: Type of fieldoptions: { selector, styles, placeholder } fieldType options selector styles placeholder FormField object FormField field.inject(selector)Injects the form field into the specified DOM element.selector: CSS selector or DOM elementFormField instance for chaining field.inject(selector) field.inject(selector) Injects the form field into the specified DOM element. selector: CSS selector or DOM element selector FormField instance for chaining FormField form.build()Prepares all fields within the form for user interaction.NonePromise (resolves when complete) form.build() form.build() Prepares all fields within the form for user interaction. None Promise (resolves when complete) form.teardown()Removes all fields from the DOM and cleans up resources.handler: Optional callback to execute after teardown is complete.Promise (resolves to a boolean) form.teardown() form.teardown() Removes all fields from the DOM and cleans up resources. handler: Optional callback to execute after teardown is complete. handler Promise (resolves to a boolean) Create a payment intent [https://docs.tilled.com/docs/sdks-applications/tilledjs#create-a-payment-intent](https://docs.tilled.com/docs/sdks-applications/tilledjs#create-a-payment-intent) To Create a Payment IntentAPI, specify the necessary details such as currency, payment_method_type, and amount. [Create a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents) API currency payment_method_type amount curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card\" ], \"confirm\": true, \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\" }' This server-side step generates a client_secret which will be used to complete the transaction on the client side with Tilled.js. client_secret Collect payment method details using Tilled.js (optional) [https://docs.tilled.com/docs/sdks-applications/tilledjs#collect-payment-method-details-using-tilledjs-optional](https://docs.tilled.com/docs/sdks-applications/tilledjs#collect-payment-method-details-using-tilledjs-optional) Use Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the Attach the Payment Method to a CustomerAPI endpoint. [Attach the Payment Method to a CustomerAPI](https://docs.tilled.com/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) API tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } ); tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } ); tilled .createPaymentMethod({ type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }) .then( (paymentMethod) => { // attach to customer before confirming the payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); }, (error) => { // An error with the request (>400 status code) } ); tilled tilled .createPaymentMethod({ . createPaymentMethod ( { type: 'card', type : 'card' , billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , }) } ) .then( . then ( (paymentMethod) => { ( paymentMethod ) => { // attach to customer before confirming the payment // attach to customer before confirming the payment // confirm payment // confirm payment tilled.confirmPayment(paymentIntentClientSecret, paymentMethod); tilled . confirmPayment ( paymentIntentClientSecret , paymentMethod ) ; }, } , (error) => { ( error ) => { // An error with the request (>400 status code) // An error with the request (>400 status code) } } ); ) ; Confirm the payment intent [https://docs.tilled.com/docs/sdks-applications/tilledjs#confirm-the-payment-intent](https://docs.tilled.com/docs/sdks-applications/tilledjs#confirm-the-payment-intent) In order to confirm a payment intent, the payment method details or a payment_method_id must be specified. You can confirm at creation by setting confirm=true in the request body. payment_method_id confirm=true If the payment intent status is requires_payment_method, you’ll need to attach a payment method using the Confirm a Payment IntentAPI endpoint. requires_payment_method [Confirm a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) API tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } ); tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } ); tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, } }) .then( (paymentIntent) => { // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful }, (error) => { // Typically an error with the request (>400 status code) } ); tilled.confirmPayment(paymentIntentClientSecret, { tilled . confirmPayment ( paymentIntentClientSecret , { payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id) payment_method : { // Can also be a PaymentMethod ID (paymentMethod.id) type: 'card', type : 'card' , billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , } } }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // Be sure to check the 'status' and/or 'last_error_message' // Be sure to check the 'status' and/or 'last_error_message' // properties to know if the charge was successful // properties to know if the charge was successful }, } , (error) => { ( error ) => { // Typically an error with the request (>400 status code) // Typically an error with the request (>400 status code) } } ); ) ; Teardown when done [https://docs.tilled.com/docs/sdks-applications/tilledjs#teardown-when-done](https://docs.tilled.com/docs/sdks-applications/tilledjs#teardown-when-done) Remove your Form from the DOM and clean up resources when the Form is no longer needed. Form Form await form.teardown(); await form.teardown(); await form.teardown(); await form.teardown(); await form . teardown ( ) ; PARAMETERTYPEREQUIREDDESCRIPTIONhandlerfunctionNoOptional callback to execute after teardown is complete. PARAMETERTYPEREQUIREDDESCRIPTION PARAMETERTYPEREQUIREDDESCRIPTION PARAMETER PARAMETER TYPE TYPE REQUIRED REQUIRED DESCRIPTION DESCRIPTION handlerfunctionNoOptional callback to execute after teardown is complete. handlerfunctionNoOptional callback to execute after teardown is complete. handler handler function No Optional callback to execute after teardown is complete. Examples [https://docs.tilled.com/docs/sdks-applications/tilledjs#examples](https://docs.tilled.com/docs/sdks-applications/tilledjs#examples) Credit card form [https://docs.tilled.com/docs/sdks-applications/tilledjs#credit-card-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#credit-card-form) /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_...', 'acct_...'); const form = await tilled.form({ payment_method_type: 'card', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.onclick = () => { tilled.confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { zip: '80021', country: 'US', }, }, }, }) .then((paymentIntent) => { if (paymentIntent.status === 'succeeded') { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }) .catch((error) => { alert('An error occurred: ' + error.message); }); /* Example assumptions: /* Example assumptions: * The card fields have divs defined in the DOM * <div id=\"card-number-element\"></div> * <div id=\"card-expiration-element\"></div> * <div id=\"card-cvv-element\"></div> * A submit button is defined * <button id='submit-btn'></button> */ */ const tilled = new Tilled('pk_...', 'acct_...'); const tilled = new Tilled ( 'pk_...' , 'acct_...' ) ; const form = await tilled.form({ const form = await tilled . form ( { payment_method_type: 'card', payment_method_type : 'card' , }); } ) ; const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: 'Helvetica Neue, Arial, sans-serif', fontFamily : 'Helvetica Neue, Arial, sans-serif' , color: '#304166', color : '#304166' , fontWeight: '400', fontWeight : '400' , fontSize: '16px', fontSize : '16px' , }, } , invalid: { invalid : { ':hover': { ':hover' : { textDecoration: 'underline dotted red', textDecoration : 'underline dotted red' , }, } , }, } , valid: { valid : { color: '#00BDA5', color : '#00BDA5' , }, } , }, } , }; } ; form.createField('cardNumber', fieldOptions).inject('#card-number-element'); form . createField ( 'cardNumber' , fieldOptions ) . inject ( '#card-number-element' ) ; form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'}); form . createField ( 'cardExpiry' , { ... fieldOptions , selector : '#card-expiration-element' } ) ; form.createField('cardCvv', fieldOptions).inject('#card-cvv-element'); form . createField ( 'cardCvv' , fieldOptions ) . inject ( '#card-cvv-element' ) ; await form.build(); await form . build ( ) ; const submitButton = document.getElementById('submit-btn'); const submitButton = document . getElementById ( 'submit-btn' ) ; submitButton.onclick = () => { submitButton . onclick = ( ) => { tilled.confirmPayment(paymentIntentClientSecret, { tilled . confirmPayment ( paymentIntentClientSecret , { payment_method: { payment_method : { billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , }, } , }) } ) .then((paymentIntent) => { . then ( ( paymentIntent ) => { if (paymentIntent.status === 'succeeded') { if ( paymentIntent . status === 'succeeded' ) { alert('Payment successful'); alert ( 'Payment successful' ) ; } else { } else { const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }) } ) .catch((error) => { . catch ( ( error ) => { alert('An error occurred: ' + error.message); alert ( 'An error occurred: ' + error . message ) ; }); } ) ; ACH bank account form [https://docs.tilled.com/docs/sdks-applications/tilledjs#ach-bank-account-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#ach-bank-account-form) /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled('pk_…', 'acct_…'); const form = await tilled.form({ payment_method_type: 'ach_debit', }); const fieldOptions = { styles: { base: { fontFamily: 'Helvetica Neue, Arial, sans-serif', color: '#304166', fontWeight: '400', fontSize: '16px', }, invalid: { ':hover': { textDecoration: 'underline dotted red', }, }, valid: { color: '#00BDA5', }, }, }; form .createField('bankAccountNumber', fieldOptions) .inject('#bank-account-number-element'); form .createField('bankRoutingNumber', fieldOptions) .inject('#bank-routing-number-element'); await form.build(); const submitButton = document.getElementById('submit-btn'); submitButton.on('click', () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: 'John Doe', address: { street: '370 Interlocken Blvd', city: 'Broomfield', state: 'CO', zip: '80021', country: 'US', }, }, ach_debit: { account_type: 'checking', account_holder_name: 'John Doe', }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { alert('Payment successful'); } else { const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** /** * Example assumptions: * The ach_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ */ const tilled = new Tilled('pk_…', 'acct_…'); const tilled = new Tilled ( 'pk_…' , 'acct_…' ) ; const form = await tilled.form({ const form = await tilled . form ( { payment_method_type: 'ach_debit', payment_method_type : 'ach_debit' , }); } ) ; const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: 'Helvetica Neue, Arial, sans-serif', fontFamily : 'Helvetica Neue, Arial, sans-serif' , color: '#304166', color : '#304166' , fontWeight: '400', fontWeight : '400' , fontSize: '16px', fontSize : '16px' , }, } , invalid: { invalid : { ':hover': { ':hover' : { textDecoration: 'underline dotted red', textDecoration : 'underline dotted red' , }, } , }, } , valid: { valid : { color: '#00BDA5', color : '#00BDA5' , }, } , }, } , }; } ; form .createField('bankAccountNumber', fieldOptions) . createField ( 'bankAccountNumber' , fieldOptions ) .inject('#bank-account-number-element'); . inject ( '#bank-account-number-element' ) ; form .createField('bankRoutingNumber', fieldOptions) . createField ( 'bankRoutingNumber' , fieldOptions ) .inject('#bank-routing-number-element'); . inject ( '#bank-routing-number-element' ) ; await form.build(); await form . build ( ) ; const submitButton = document.getElementById('submit-btn'); const submitButton = document . getElementById ( 'submit-btn' ) ; submitButton.on('click', () => { submitButton . on ( 'click' , ( ) => { // A payment intent will be created on your backend server and the // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // payment_intent.client_secret will be passed to your frontend to // be used below. // be used below. tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: { payment_method : { billing_details: { billing_details : { name: 'John Doe', name : 'John Doe' , address: { address : { street: '370 Interlocken Blvd', street : '370 Interlocken Blvd' , city: 'Broomfield', city : 'Broomfield' , state: 'CO', state : 'CO' , zip: '80021', zip : '80021' , country: 'US', country : 'US' , }, } , }, } , ach_debit: { ach_debit : { account_type: 'checking', account_type : 'checking' , account_holder_name: 'John Doe', account_holder_name : 'John Doe' , }, } , }, } , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // Be sure to check the `status` and/or `last_payment_error` // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful // properties to know if the charge was successful if ( if ( paymentIntent.status === 'succeeded' || paymentIntent . status === 'succeeded' || paymentIntent.status === 'processing' paymentIntent . status === 'processing' ) { ) { alert('Payment successful'); alert ( 'Payment successful' ) ; } else { } else { const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }, } , (err) => { ( err ) => { // Typically an error with the request (>400 status code) // Typically an error with the request (>400 status code) } } ); ) ; }); } ) ; EFT bank account form [https://docs.tilled.com/docs/sdks-applications/tilledjs#eft-bank-account-form](https://docs.tilled.com/docs/sdks-applications/tilledjs#eft-bank-account-form) /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const form = await tilled.form({ payment_method_type: \"eft_debit\", }); const fieldOptions = { styles: { base: { fontFamily: \"Helvetica Neue, Arial, sans-serif\", color: \"#304166\", fontWeight: \"400\", fontSize: \"16px\", }, invalid: { \":hover\": { textDecoration: \"underline dotted red\", }, }, valid: { color: \"#00BDA5\", }, }, }; form .createField(\"bankAccountNumber\", fieldOptions) .inject(\"#bank-account-number-element\"); form .createField(\"bankRoutingNumber\", fieldOptions) .inject(\"#bank-routing-number-element\"); await form.build(); const submitButton = document.getElementById(\"submit-btn\"); submitButton.on(\"click\", () => { // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // be used below. tilled .confirmPayment(paymentIntentClientSecret, { payment_method: { billing_details: { name: \"John Doe\", address: { street: \"350 Wellington St\", city: \"Ottawa\", state: \"ON\", zip: \"K1A 0N1\", country: \"CA\", }, }, eft_debit: { account_holder_name: \"John Doe\", }, }, }) .then( (paymentIntent) => { // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful if ( paymentIntent.status === \"succeeded\" || paymentIntent.status === \"processing\" ) { alert(\"Payment successful\"); } else { const errMsg = paymentIntent.last_payment_error?.message; alert(\"Payment failed: \" + errMsg); } }, (err) => { // Typically an error with the request (>400 status code) } ); }); /** /** * Example assumptions: * The eft_debit fields have divs defined in the DOM * <div id=\"bank-account-number-element\"></div> * <div id=\"bank-routing-number-element\"></div> * * A submit button is defined * <button id='submit-btn'></button> */ */ const tilled = new Tilled(\"pk_…\", \"acct_…\"); const tilled = new Tilled ( \"pk_…\" , \"acct_…\" ) ; const form = await tilled.form({ const form = await tilled . form ( { payment_method_type: \"eft_debit\", payment_method_type : \"eft_debit\" , }); } ) ; const fieldOptions = { const fieldOptions = { styles: { styles : { base: { base : { fontFamily: \"Helvetica Neue, Arial, sans-serif\", fontFamily : \"Helvetica Neue, Arial, sans-serif\" , color: \"#304166\", color : \"#304166\" , fontWeight: \"400\", fontWeight : \"400\" , fontSize: \"16px\", fontSize : \"16px\" , }, } , invalid: { invalid : { \":hover\": { \":hover\" : { textDecoration: \"underline dotted red\", textDecoration : \"underline dotted red\" , }, } , }, } , valid: { valid : { color: \"#00BDA5\", color : \"#00BDA5\" , }, } , }, } , }; } ; form .createField(\"bankAccountNumber\", fieldOptions) . createField ( \"bankAccountNumber\" , fieldOptions ) .inject(\"#bank-account-number-element\"); . inject ( \"#bank-account-number-element\" ) ; form .createField(\"bankRoutingNumber\", fieldOptions) . createField ( \"bankRoutingNumber\" , fieldOptions ) .inject(\"#bank-routing-number-element\"); . inject ( \"#bank-routing-number-element\" ) ; await form.build(); await form . build ( ) ; const submitButton = document.getElementById(\"submit-btn\"); const submitButton = document . getElementById ( \"submit-btn\" ) ; submitButton.on(\"click\", () => { submitButton . on ( \"click\" , ( ) => { // A payment intent will be created on your backend server and the // A payment intent will be created on your backend server and the // payment_intent.client_secret will be passed to your frontend to // payment_intent.client_secret will be passed to your frontend to // be used below. // be used below. tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: { payment_method : { billing_details: { billing_details : { name: \"John Doe\", name : \"John Doe\" , address: { address : { street: \"350 Wellington St\", street : \"350 Wellington St\" , city: \"Ottawa\", city : \"Ottawa\" , state: \"ON\", state : \"ON\" , zip: \"K1A 0N1\", zip : \"K1A 0N1\" , country: \"CA\", country : \"CA\" , }, } , }, } , eft_debit: { eft_debit : { account_holder_name: \"John Doe\", account_holder_name : \"John Doe\" , }, } , }, } , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // Be sure to check the `status` and/or `last_payment_error` // Be sure to check the `status` and/or `last_payment_error` // properties to know if the charge was successful // properties to know if the charge was successful if ( if ( paymentIntent.status === \"succeeded\" || paymentIntent . status === \"succeeded\" || paymentIntent.status === \"processing\" paymentIntent . status === \"processing\" ) { ) { alert(\"Payment successful\"); alert ( \"Payment successful\" ) ; } else { } else { const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert(\"Payment failed: \" + errMsg); alert ( \"Payment failed: \" + errMsg ) ; } } }, } , (err) => { ( err ) => { // Typically an error with the request (>400 status code) // Typically an error with the request (>400 status code) } } ); ) ; }); } ) ; Apple Pay [https://docs.tilled.com/docs/sdks-applications/tilledjs#apple-pay](https://docs.tilled.com/docs/sdks-applications/tilledjs#apple-pay) /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); }); /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); }); /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ const form = tilled.form({ payment_method_type: 'card', }); const paymentRequest = tilled.paymentRequest({ total: { label: 'Tilled tee', amount: secretData.amount, }, }); const prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, }); paymentRequest.canMakePayment().then((result) => { if (result) { prButton.inject('#native-payment-element'); } else { document.getElementById('native-payment-element').style.display = 'none'; } }); paymentRequest.on('paymentmethod', (ev) => { let paymentMethod = ev.paymentMethod; tilled .confirmPayment(paymentIntentClientSecret, { payment_method: paymentMethod.id, }) .then( (paymentIntent) => { // The payment intent confirmation occurred, but the // actual charge may still have failed. Check if ( paymentIntent.status === 'succeeded' || paymentIntent.status === 'processing' ) { ev.complete('success'); alert('Successul payment'); } else { ev.complete('fail'); const errMsg = paymentIntent.last_payment_error?.message; alert('Payment failed: ' + errMsg); } }, (err) => { ev.complete('fail'); } ); }); /** /** * Example assumptions: * The paymentRequestButton field has a div defined in the DOM * <div id=\"native-payment-element\"></div> * */ */ const form = tilled.form({ const form = tilled . form ( { payment_method_type: 'card', payment_method_type : 'card' , }); } ) ; const paymentRequest = tilled.paymentRequest({ const paymentRequest = tilled . paymentRequest ( { total: { total : { label: 'Tilled tee', label : 'Tilled tee' , amount: secretData.amount, amount : secretData . amount , }, } , }); } ) ; const prButton = form.createField('paymentRequestButton', { const prButton = form . createField ( 'paymentRequestButton' , { paymentRequest: paymentRequest, paymentRequest : paymentRequest , }); } ) ; paymentRequest.canMakePayment().then((result) => { paymentRequest . canMakePayment ( ) . then ( ( result ) => { if (result) { if ( result ) { prButton.inject('#native-payment-element'); prButton . inject ( '#native-payment-element' ) ; } else { } else { document.getElementById('native-payment-element').style.display = 'none'; document . getElementById ( 'native-payment-element' ) . style . display = 'none' ; } } }); } ) ; paymentRequest.on('paymentmethod', (ev) => { paymentRequest . on ( 'paymentmethod' , ( ev ) => { let paymentMethod = ev.paymentMethod; let paymentMethod = ev . paymentMethod ; tilled .confirmPayment(paymentIntentClientSecret, { . confirmPayment ( paymentIntentClientSecret , { payment_method: paymentMethod.id, payment_method : paymentMethod . id , }) } ) .then( . then ( (paymentIntent) => { ( paymentIntent ) => { // The payment intent confirmation occurred, but the // The payment intent confirmation occurred, but the // actual charge may still have failed. Check // actual charge may still have failed. Check if ( if ( paymentIntent.status === 'succeeded' || paymentIntent . status === 'succeeded' || paymentIntent.status === 'processing' paymentIntent . status === 'processing' ) { ) { ev.complete('success'); ev . complete ( 'success' ) ; alert('Successul payment'); alert ( 'Successul payment' ) ; } else { } else { ev.complete('fail'); ev . complete ( 'fail' ) ; const errMsg = paymentIntent.last_payment_error?.message; const errMsg = paymentIntent . last_payment_error ?. message ; alert('Payment failed: ' + errMsg); alert ( 'Payment failed: ' + errMsg ) ; } } }, } , (err) => { ( err ) => { ev.complete('fail'); ev . complete ( 'fail' ) ; } } ); ) ; }); } ) ; Last updated on December 12, 2024 December 12, 2024 PCI Compliance [PCI Compliance](https://docs.tilled.com/docs/resources/pci-compliance)",
    "sourceUrl": "https://docs.tilled.com/docs/get-started/launch-checklist"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card-present/",
    "title": "Tilled",
    "content": "In-Person Payments Tilled supports in-person payments on both TSYS and Paysafe, giving you the flexibility to choose the processor and terminal setup that best suits your business needs. This guide will walk you through the process of setting up your integration, from selecting your processor and terminals to handling key payment scenarios. ℹ️Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. Design Your Integration Choose your processorTilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which processor you will use.Choose your terminalsThe terminal options available to you depend on the processor you are using for in-person payments.Valor terminals with TSYS VL100: Best for countertop use VL110: Best for handheld use PAX terminals with Paysafe A920 A920 Pro A80 Check out our online store for more information.Identify required functionalityThere are several in-person payments features to choose from which you can implement during your integration.Manual captureOn-device tippingReceipts Order Developer Terminals To test your integration, you’ll need a developer terminal. The easiest and most convenient option is to order a developer terminal from Tilled. The terminal will arrive within a few business days, fully activated and ready to use. Simply connect it to Wi-Fi to get started. If you already own a developer terminal, you can use it as long as it is a VL100 or VL110 model and suitable for test environments. To use your own terminal: Email support to request an Activation Code. Enter the Activation Code onto the terminal to associate it with your test account. Collect an In-Person Payment If you are already familiar with collecting online payments using Tilled, the process for in-person payments will be similar. Retrieve the terminal idWhen a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique terminal_reader_id. Before processing a payment, List all Terminal ReadersAPI linked to the merchant’s account to specify the device from which the payment will be collected.curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\Create a card-present payment methodTo Create a Payment MethodAPI for an in-person payment, set the type=card_present and include the terminal_reader_id of the intended device.Create a Payment Method sample requestcurl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }'Collect the paymentBegin by creating a payment intent. Specify the payment_method_type property as card_present and use the payment_method_id obtained from the previous step. Confirming the payment intent transitions its status to requires_action, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment.Create a payment intent sample requestcurl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }'Complete the paymentSwipe or tap a payment method on the terminal to complete the payment.Confirm payment intent successCreate a Webhook EndpointAPI for payment_intent_events to receive updates about the success of the payment intent and the associated payment details. Key Scenarios to Handle Partial authorizations A Partial Authorization occurs when a payment is attempted for the full amount, but there are insufficient funds to cover it. Only the available amount is captured. It’s important that your software handles this flow, so that the merchant is aware when the full amount is not captured and can choose to create another payment for the difference. When there is a partial authorization, the API status for the charge is succeeded. Developers should compare either charge.amount_captured or payment_intent.amount_received to the original charge amount to determine how much was actually received. Same-day refunds All refunds are initiated through the Create a RefundAPI endpoint. For same-day refunds on payments made via a Paysafe terminal reader, the refund must be initiated through the terminal reader, which needs to be powered on and connected to the internet. If the terminal is offline, the same-day refund will not go through. Next-day or later refunds can be processed without the terminal being powered on or connected. Make sure your software is set up to handle these refund events: charge.refund.pending and charge.refunded. Same-day refunds for payments made through TSYS terminal readers are not processed through the terminal. Certify Your Integration After completing your integration, you need to certify it by handling specific payment scenarios. If you’ve implemented additional in-person features such as tip settings or card saving, ensure you test those flows as well. The developer tasks below are required to be completed in sandbox before launching your card-present solution with Tilled: Process payments:Create and complete 20 card-present payments.Configure webhooks:Configure and listen to refund webhooks.Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks.Process next-day or later refund:Process a next-day or later refund for 5 card-present payments.Process next-day partial refunds:Partially refund 5 card-present payments.Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers.Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result.Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result.Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. FAQsHow do I calculate the tip amount?To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received.What payment methods are supported?Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time.Can I switch in-person payment providers?Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader.Last updated on March 10, 2025Online PaymentsSubscriptions In-Person Payments Tilled supports in-person payments on both TSYS and Paysafe, giving you the flexibility to choose the processor and terminal setup that best suits your business needs. This guide will walk you through the process of setting up your integration, from selecting your processor and terminals to handling key payment scenarios. Tilled ℹ️Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. ℹ️ Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. Paysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to support@tilled.com. [support@tilled.com](mailto:support@tilled.com) Design Your Integration [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#design-your-integration](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#design-your-integration) Choose your processorTilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which processor you will use.Choose your terminalsThe terminal options available to you depend on the processor you are using for in-person payments.Valor terminals with TSYS VL100: Best for countertop use VL110: Best for handheld use PAX terminals with Paysafe A920 A920 Pro A80 Check out our online store for more information.Identify required functionalityThere are several in-person payments features to choose from which you can implement during your integration.Manual captureOn-device tippingReceipts Choose your processor [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-processor](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-processor) Tilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which processor you will use. Tilled [processor](https://docs.tilled.com/docs/get-started/processor-comparison) Choose your terminals [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-terminals](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#choose-your-terminals) The terminal options available to you depend on the processor you are using for in-person payments. Valor terminals with TSYS Valor terminals with TSYS VL100: Best for countertop use VL110: Best for handheld use VL100: Best for countertop use VL100: VL110: Best for handheld use VL110: PAX terminals with Paysafe PAX terminals with Paysafe A920 A920 Pro A80 A920 A920 A920 Pro A920 Pro A80 A80 Check out our online store for more information. [online store](https://f1e839.myshopify.com/) Identify required functionality [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#identify-required-functionality](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#identify-required-functionality) There are several in-person payments features to choose from which you can implement during your integration. Manual captureOn-device tippingReceipts [Manual capture](https://docs.tilled.com/docs/payments/card/manual-capture) Manual capture [On-device tipping](https://docs.tilled.com/docs/payments/card/on-device-tipping) On-device tipping [Receipts](https://docs.tilled.com/docs/payments/card/receipts) Receipts Order Developer Terminals [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#order-developer-terminals](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#order-developer-terminals) To test your integration, you’ll need a developer terminal. The easiest and most convenient option is to order a developer terminal from Tilled. The terminal will arrive within a few business days, fully activated and ready to use. Simply connect it to Wi-Fi to get started. [order a developer terminal](https://f1e839.myshopify.com/) Tilled If you already own a developer terminal, you can use it as long as it is a VL100 or VL110 model and suitable for test environments. To use your own terminal: Email support to request an Activation Code. Enter the Activation Code onto the terminal to associate it with your test account. Email support to request an Activation Code. Enter the Activation Code onto the terminal to associate it with your test account. Collect an In-Person Payment [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-an-in-person-payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-an-in-person-payment) If you are already familiar with collecting online payments using Tilled, the process for in-person payments will be similar. Tilled Retrieve the terminal idWhen a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique terminal_reader_id. Before processing a payment, List all Terminal ReadersAPI linked to the merchant’s account to specify the device from which the payment will be collected.curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\Create a card-present payment methodTo Create a Payment MethodAPI for an in-person payment, set the type=card_present and include the terminal_reader_id of the intended device.Create a Payment Method sample requestcurl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }'Collect the paymentBegin by creating a payment intent. Specify the payment_method_type property as card_present and use the payment_method_id obtained from the previous step. Confirming the payment intent transitions its status to requires_action, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment.Create a payment intent sample requestcurl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }'Complete the paymentSwipe or tap a payment method on the terminal to complete the payment.Confirm payment intent successCreate a Webhook EndpointAPI for payment_intent_events to receive updates about the success of the payment intent and the associated payment details. Retrieve the terminal id [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#retrieve-the-terminal-id](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#retrieve-the-terminal-id) When a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique terminal_reader_id. Before processing a payment, List all Terminal ReadersAPI linked to the merchant’s account to specify the device from which the payment will be collected. Tilled terminal_reader_id [List all Terminal ReadersAPI](https://docs.tilled.com/api-reference#tag/terminal-readers/get/v1/terminal-readers) API curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\ curl -L https://api.tilled.com/v1/terminal-readers/ { { TERMINAL_ID } } \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ Create a card-present payment method [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#create-a-card-present-payment-method](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#create-a-card-present-payment-method) To Create a Payment MethodAPI for an in-person payment, set the type=card_present and include the terminal_reader_id of the intended device. [Create a Payment MethodAPI](https://docs.tilled.com/api-reference#tag/payment-methods/post/v1/payment-methods) API type=card_present terminal_reader_id Create a Payment Method sample request Create a Payment Method sample request curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' curl -L 'https://api.tilled.com/v1/payment-methods' \\ curl -L 'https://api.tilled.com/v1/payment-methods' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"type\": \"card_present\", \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\" }' Collect the payment [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-the-payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#collect-the-payment) Begin by creating a payment intent. Specify the payment_method_type property as card_present and use the payment_method_id obtained from the previous step. Confirming the payment intent transitions its status to requires_action, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment. payment_method_type card_present payment_method_id requires_action Create a payment intent sample request Create a payment intent sample request curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' curl -L 'https://api.tilled.com/v1/payment-intents' \\ curl -L 'https://api.tilled.com/v1/payment-intents' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\ -H 'Content-Type: application/json' \\ -H 'Content-Type: application/json' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -H 'tilled-api-key: {{SECRET_KEY}}' \\ -d '{ -d '{ \"amount\": 1000, \"currency\": \"usd\", \"payment_method_types\": [ \"card_present\" ], \"confirm\": true, \"capture_method\": \"automatic\", \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\" }' Complete the payment [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#complete-the-payment](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#complete-the-payment) Swipe or tap a payment method on the terminal to complete the payment. Confirm payment intent success [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#confirm-payment-intent-success](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#confirm-payment-intent-success) Create a Webhook EndpointAPI for payment_intent_events to receive updates about the success of the payment intent and the associated payment details. [Create a Webhook EndpointAPI](https://docs.tilled.com/api-reference#tag/webhook-endpoints/post/v1/webhook-endpoints) API payment_intent_events Key Scenarios to Handle [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#key-scenarios-to-handle](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#key-scenarios-to-handle) Partial authorizations [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#partial-authorizations](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#partial-authorizations) A Partial Authorization occurs when a payment is attempted for the full amount, but there are insufficient funds to cover it. Only the available amount is captured. It’s important that your software handles this flow, so that the merchant is aware when the full amount is not captured and can choose to create another payment for the difference. When there is a partial authorization, the API status for the charge is succeeded. Developers should compare either charge.amount_captured or payment_intent.amount_received to the original charge amount to determine how much was actually received. succeeded charge.amount_captured payment_intent.amount_received Same-day refunds [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#same-day-refunds](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#same-day-refunds) All refunds are initiated through the Create a RefundAPI endpoint. [Create a RefundAPI](https://docs.tilled.com/api-reference#tag/refunds/POST/v1/refunds) API For same-day refunds on payments made via a Paysafe terminal reader, the refund must be initiated through the terminal reader, which needs to be powered on and connected to the internet. If the terminal is offline, the same-day refund will not go through. Next-day or later refunds can be processed without the terminal being powered on or connected. Make sure your software is set up to handle these refund events: charge.refund.pending and charge.refunded. charge.refund.pending charge.refunded Same-day refunds for payments made through TSYS terminal readers are not processed through the terminal. Certify Your Integration [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#certify-your-integration](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#certify-your-integration) After completing your integration, you need to certify it by handling specific payment scenarios. If you’ve implemented additional in-person features such as tip settings or card saving, ensure you test those flows as well. The developer tasks below are required to be completed in sandbox before launching your card-present solution with Tilled: [sandbox](https://sandbox-app.tilled.com/) Tilled Process payments:Create and complete 20 card-present payments.Configure webhooks:Configure and listen to refund webhooks.Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks.Process next-day or later refund:Process a next-day or later refund for 5 card-present payments.Process next-day partial refunds:Partially refund 5 card-present payments.Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers.Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result.Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result.Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. Process payments:Create and complete 20 card-present payments. Process payments:Create and complete 20 card-present payments. Process payments: Configure webhooks:Configure and listen to refund webhooks. Configure webhooks:Configure and listen to refund webhooks. Configure webhooks: Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks. Process same-day refund:Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle charge.refund.pending and charge.refunded webhooks. Process same-day refund: charge.refund.pending charge.refunded Process next-day or later refund:Process a next-day or later refund for 5 card-present payments. Process next-day or later refund:Process a next-day or later refund for 5 card-present payments. Process next-day or later refund: Process next-day partial refunds:Partially refund 5 card-present payments. Process next-day partial refunds:Partially refund 5 card-present payments. Process next-day partial refunds: Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers. Create a partial authorization:Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers. Create a partial authorization: Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result. Cancel a payment:Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result. Cancel a payment: Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result. Cancel an incomplete payment:Cancel at least one incomplete card-present payment with the Cancel a Payment IntentAPI endpoint and process the result. Cancel an incomplete payment: [Cancel a Payment IntentAPI](https://docs.tilled.com/api-reference#tag/payment-intents/POST/v1/payment-intents/%7Bid%7D/cancel) API Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. Handle lost webhooks:Ensure that your software can handle lost payment_intent.succeeded webhooks. Handle lost webhooks: payment_intent.succeeded FAQsHow do I calculate the tip amount?To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received.What payment methods are supported?Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time.Can I switch in-person payment providers?Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. FAQs How do I calculate the tip amount?To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received. How do I calculate the tip amount? How do I calculate the tip amount? [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-how-do-i-calculate-the-tip-amount](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-how-do-i-calculate-the-tip-amount) To calculate the tip amount when tips are enabled, subtract the payment_intent.amount from the payment_intent.amount_received. payment_intent.amount payment_intent.amount_received What payment methods are supported?Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time. What payment methods are supported? What payment methods are supported? [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-what-payment-methods-are-supported](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-what-payment-methods-are-supported) Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time. Can I switch in-person payment providers?Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Can I switch in-person payment providers? Can I switch in-person payment providers? [https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-can-i-switch-in-person-payment-providers](https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments#faq-can-i-switch-in-person-payment-providers) Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Manual capture: Manual capture is not supported by the Paysafe in-person payments solution.Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Manual capture: Manual capture is not supported by the Paysafe in-person payments solution. Manual capture: Same-day refunds: Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund. Same-day refunds: Printed receipts: Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader. Printed receipts: Last updated on March 10, 2025 March 10, 2025 Online PaymentsSubscriptions [Online Payments](https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents) [Subscriptions](https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions)",
    "sourceUrl": "https://docs.tilled.com/docs/sdks-applications/example-applications"
  }
]
