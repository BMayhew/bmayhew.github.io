[
  {
    "url": "https://docs.tilled.com",
    "title": "Integrate with Tilled",
    "content": "Docs Status ↗ API ↗ Contact ↗ GitHub Integrate with Tilled Create an exceptional payments experience without the hassle of managing complex payment systems. Get Started API Reference Quick Start Create a sandbox account, get your API keys, and start collecting payments. Start today > Compare Integration Options Compare integration options to fit your use case. Compare options > Explore the API Explore and interact with the API to see everything you can do. Dive in >",
    "referrerUrl": ""
  },
  {
    "url": "https://docs.tilled.com/",
    "title": "Integrate with Tilled",
    "content": "Docs Status ↗ API ↗ Contact ↗ GitHub Integrate with Tilled Create an exceptional payments experience without the hassle of managing complex payment systems. Get Started API Reference Quick Start Create a sandbox account, get your API keys, and start collecting payments. Start today > Compare Integration Options Compare integration options to fit your use case. Compare options > Explore the API Explore and interact with the API to see everything you can do. Dive in >",
    "referrerUrl": "https://docs.tilled.com"
  },
  {
    "url": "https://docs.tilled.com/docs/quick-start",
    "title": "Quick Start",
    "content": "Quick Start\n===========\n\nThis guide outlines the necessary steps and resources needed to set up and manage your integration with Tilled. You’ll find instructions on how to create a sandbox account, generate API keys, and begin exploring the API.\n\n**Resources**\n\n[Integration Options](/docs/get-started/integration-options)[API Reference](/api-reference)[Tilled.js](/docs/sdks-applications/tilledjs)\n\n  \n\n### Create sandbox account[](#create-sandbox-account)\n\nThe first step is to [create a sandbox account](https://sandbox-app.tilled.com/auth/register). Your sandbox account will grant you access to the sandbox Dashboard, which will be used to manage your integration.\n\n### Generate API keys[](#generate-api-keys)\n\nAPI keys are required to access Tilled's API. To generate API keys through the Dashboard:\n\n1.  Navigate to **Developers** and click the **Create API Key** button\n2.  Name the API key\n3.  Select your API key type and scopes, if applicable\n4.  Click the **Create** button\n\nAPI keys can also be generated using the [API keysAPI](/api-reference#tag/api-keys) endpoint.\n\n### Explore Tilled's capabilities[](#explore--capabilities)\n\nUse the API to:\n\n*   [Create a Connected AccountAPI](/api-reference#tag/accounts/post/v1/accounts/connected)\n*   [Create an Auth LinkAPI](/api-reference#tag/auth-links/post/v1/auth-links)\n*   [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents)\n\nUse the Dashboard to:\n\n*   [Customize your branding](/docs/account-configuration/white-label)\n*   [Set up merchant pricing](/docs/merchants/merchant-pricing)\n*   [Create a merchant application](/docs/merchants/onboard-new-merchants)\n\nTest your integration:\n\n*   Simulate [different payment scenarios](/docs/resources/testing)\n*   Verify the [bank account verification](/docs/resources/testing#bank-account-verification) process\n*   Test [webhooks](/docs/resources/testing#webhooks)\n\nLast updated on March 7, 2025",
    "referrerUrl": "https://docs.tilled.com"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/integration-options",
    "title": "Integration Options",
    "content": "Integration Options\n===================\n\nVarious factors may influence how you choose to integrate, including:\n\n*   **Customization needs:** The extent to which your payment experience needs to be customized.\n*   **Time-to-market goals:** How quickly you want to start onboarding merchants and processing payments.\n*   **Payment types processed:** The types of payments processed on your platform.\n*   **Development resource availability:** The availability and expertise of your development team for integration and ongoing support.\n\nBest practice is to split your integration into multiple phases: onboarding, payments, and documents.\n\n[Onboarding](#onboarding)[Payments](#payments)[Documents](#documents)\n\nThe table below compares your integration options for onboarding new merchants.\n\n**API-ONLY**\n\n**HOSTED APPLICATION**\n\nDescription\n\nBuild a custom onboarding flow using the [OnboardingAPI](/api-reference#tag/onboarding).\n\nNo-code option for software platforms to onboard a merchant.\n\nIntegration effort\n\nHighest effort\n\nLowest effort\n\nContinuous optimization\n\nRequires integration changes\n\nAutomatic\n\n**Customization**\n\nUI customization\n\nCustomize and build your own UI\n\nWhite-labeled\n\nFlow logic\n\nExtensive control\n\nLimited control\n\nPre-fill merchant data\n\n✓\n\n✓\n\nMobile support\n\nDependent on implementation\n\nResponsive web\n\n**Features**\n\nDocument upload\n\nDependent on implementation\n\n✓\n\nInvite a collaborator\n\nDependent on implementation\n\n✓\n\nPlaid for bank verification\n\n✗\n\n✓\n\nEmail notifications\n\n✓\n\n✓\n\nWebhook events\n\n✓\n\n✓\n\nNo-Code Modules[](#no-code-modules)\n-----------------------------------\n\nThe table below outlines the key functionality available through Tilled's no-code modules, which enable you to manage operations and process payments without writing a single line of code. White-label settings apply to all modules.\n\nRefer to our [Merchant Preferences guide](/docs/merchants/merchant-preferences) to customize the Onboarding, Payments, and Notifications modules.\n\n**MODULE**\n\n**DESCRIPTION**\n\nOnboarding\n\nThe merchant application must be completed before a merchant can process payments. The hosted application is continuously optimized to increase approval rates, achieving a 50% higher likelihood of instant approvals compared to direct API integrations.\n\nDashboard\n\nThe Dashboard is used to manage daily operations including payment management, reconciliation, dispute resolution, and more.\n\nPayments\n\nMerchants can collect payments using [payment links](/docs/payments/collect-a-payment/payment-intents#collect-a-one-time-payment) and the virtual terminal.\n\nNotifications\n\nAutomated email notifications are sent to your merchants related to their merchant application, information requests, and disputes.\n\nLast updated on February 4, 2025",
    "referrerUrl": "https://docs.tilled.com"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/launch-checklist",
    "title": "Launch Checklist",
    "content": "Launch Checklist\n================\n\nThe launch checklist outlines the prerequisites to launching with Tilled, including operational and developer-specific tasks.\n\nPlease note that this checklist can be updated at any time to reflect new requirements or processes.\n\nOperational Tasks[](#operational-tasks)\n---------------------------------------\n\nThe operational tasks below are required before launching with Tilled:\n\n*   **Submit the Partner Application:**The partner application provides Tilled with insight into your business and processing requirements.\n*   **Sign the Partner Processing Agreement:**Review and sign your agreement with Tilled, which includes your buy-rates and revenue share for [commission](/docs/commissions) purposes.\n*   **Submit W9 and Voided Check:**A W9 and Voided Check (or Bank Letter) are required before receiving your first [commission payout](/docs/commissions#commission-payouts). If providing a Bank Letter, it needs to be dated within the last 30 days.\n*   **Set up merchant pricing:**Align on your pricing strategy and [configure your pricing templates](/docs/merchants/merchant-pricing#configure-merchant-pricing).\n\nIn addition, we recommend you complete the following:\n\n*   **Invite team members:**[Invite additional team members](/docs/account-configuration/users) configure your pricing templates to access the [Dashboard](https://sandbox-app.tilled.com/account).\n*   **Configure white-label:**Configure your [white-label settings](/docs/account-configuration/white-label) to maintain brand consistency across the merchant journey.\n*   **Customize merchant preferences:**[Customize merchant preferences](/docs/merchants/merchant-preferences) if leveraging Tilled's no-code modules.\n*   **Request a SaaS account:**A merchant account is required if you intend to process your platform’s SaaS fee payments through Tilled.\n*   **Order terminals:**Order developer terminals if planning to support [in-person payments](/docs/payments/collect-a-payment/in-person-payments).\n\nDeveloper Tasks[](#developer-tasks)\n-----------------------------------\n\nThe developer tasks below are required to be completed in [sandbox](https://sandbox-app.tilled.com/) before launching with Tilled:\n\n*   **Create API Keys:**Create your secret and publishable API keys in order to access Tilled's API.\n*   **Submit a merchant application:**[Submit a merchant application](/docs/merchants/onboard-new-merchants) using the [OnboardingAPI](/api-reference#tag/onboarding) or through the [Dashboard](https://sandbox-app.tilled.com/merchants).\n*   **Collect a payment:**[Collect a payment](/docs/payments/collect-a-payment/payment-intents) using the [Payment IntentsAPI](/api-reference#tag/payment-intents) or or through the [Dashboard](https://sandbox-app.tilled.com/payments).\n*   **Initiate a refund:**Refund a payment using the [Create a RefundAPI](/api-reference#tag/refunds/post/v1/refunds) endpoint or through the [Dashboard](https://sandbox-app.tilled.com/payments).\n*   **Build a checkout form:**Build a custom checkout form using [Tilled.jsJS](/docs/sdks-applications/tilledjs/).\n*   **Configure webhooks:**[Configure webhooks](/docs/webhooks/how-to-set-up-webhooks) to receive real-time notifications about events occurring on Tilled's platform.\n*   **Share checkout flow:**Provide a live demo of your final checkout flow to our Integrations team, or share access to your demo environment by emailing [integrations@tilled.com](mailto:integrations@tilled.com). This ensures we can review network and console logs, which are not visible in video submissions, for compliance and functionality.\n\nDepending on your integration, you may also need to:\n\n*   **Collect a platform fee:**Include a `platform_fee_amount` when [Creating a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents).\n*   **Collect a payment using a stored payment method:**[Attach a Payment Method to a CustomerAPI](/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) and [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents) using the stored payment method.\n*   **Create a checkout session:**Generate a `checkout_session_url` using the [Create a Checkout SessionAPI](/api-reference#tag/checkout-sessions) endpoint.\n*   **Set up a subscription:**[Set up a subscription](/docs/payments/collect-a-payment/subscriptions) to charge customers on a recurring basis.\n*   **Simulate a dispute:**[Simulate a dispute](/docs/resources/testing#disputes) and submit dispute evidence using the [DisputesAPI](/api-reference#tag/disputes) or through the [Dashboard](https://sandbox-app.tilled.com/disputes).\n*   **Create shared payment methods:**To share payment methods across merchants, [Create a Payment MethodAPI](/api-reference#tag/payment-methods/post/v1/payment-methods) using the partner `account_id`.\n\nLast updated on February 3, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/data-migration",
    "title": "Data Migration",
    "content": "Data Migration\n==============\n\nTilled migrates your existing customer data from your previous payment provider, such as Stripe, to your new Tilled account, ensuring your merchants can continue processing payments using previously saved payment methods.\n\n**Data migration overview**\n\n*   **Seamless data transfer:** Tilled works closely with your payment provider to securely transfer payment and customer data.\n*   **No fees:** Data migrations are done at no cost.\n*   **Quick turnaround:** Migrations are typically completed within 3-5 business days once all required information is received and reviewed.\n\n**Pre-requisities**\n\nA merchant must be approved with Tilled before initiating the migration process.\n\nMigration Process[](#migration-process)\n---------------------------------------\n\n**To initiate the process:**\n\n1.  Provide Tilled’s PCI Attestation of Compliance (AOC) to your payment provider. The current PCI AOC can be requested by emailing [integrations@tilled.com](mailto:integrations@tilled.com).\n2.  Obtain Tilled’s [PGP public encryption key](https://tilled-pgp-public.tilled.com/) for secure data transmission.\n3.  After your payment provider prepares your data, they’ll email you encrypted instructions that Tilled needs in order to download your data securely. Please forward this email to [migrations@tilled.com](mailto:migrations@tilled.com) for decryption and data retrieval by Tilled’s Migration team.\n\n**During the migration:**\n\n1.  Payment provider creates an encrypted file containing card details, email addresses, and any associated metadata. Payment history, subscriptions, and CVVs are not included in the migration.\n2.  Payment provider securely transfers the file to Tilled.\n3.  Tilled imports the data, enabling your merchants to process using the stored payment data right away.\n\nFAQs\n----\n\nAre subscriptions set up as part of the data migration?[](#faq-are-subscriptions-set-up-as-part-of-the-data-migration)No, the import is limited to creating customers and payment methods.How are migration results communicated?[](#faq-how-are-migration-results-communicated)\n\nA result file is generated and sent to the provided email address. Results will include:\n\n*   Account ID\n*   Payment Method ID\n*   Customer ID\n*   Customer Vault ID _\\- this ID is pulled from the imported file and generally provides a link to the prior processor system’s customer record_\n*   Billing ID or Customer Vault ID _\\- this ID is pulled from the imported file and generally provides a link to the prior processor system’s payment method or customer record_\n*   First Name\n*   Last Name\n*   Email\n*   Payment Method Type\n*   Account Number Last Digits _\\- last 2 for Debit, last 4 for Card_\n\nWhy might a row from the imported CSV not be processed?[](#faq-why-might-a-row-from-the-imported-csv-not-be-processed)\n\nA row from the imported CSV might not be processed if it contains issues such as:\n\n*   Missing required information, like a ZIP code\n*   Invalid data, such as an expired card\n\nCan a software platform provide a file to update records after an import?[](#faq-can-a-software-platform-provide-a-file-to-update-records-after-an-import)\n\nWhile our primary focus is on the creation of records rather than ongoing maintenance, the Tilled API does support updates to metadata, customer names, and similar fields. If you have a specific need for updating records via a file, reach out to [integrations@tilled.com](mailto:integrations@tilled.com) for assistance.\n\nIs there any additional information I should be aware of for migrations from Stripe?[](#faq-is-there-any-additional-information-i-should-be-aware-of-for-migrations-from-stripe)No, migrations from Stripe follow the process outlined above. You can learn more about Stripe’s data migration process [here](https://docs.stripe.com/get-started/data-migrations/pan-export).\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/processor-comparison",
    "title": "Processor Comparison",
    "content": "Processor Comparison\n====================\n\nWhen choosing a processor, consider your onboarding and reporting requirements, the desired merchant experience, and any other operational needs.\n\nIf you have questions about processor capabilities, please reach out to [support@tilled.com](mailto:support@tilled.com).\n\n**TSYS**\n\n**PAYSAFE + FLEX BILLING**\n\n**PAYSAFE**\n\n**Processing Capabilities**\n\n[Online payments](/docs/payments/collect-a-payment/payment-intents)\n\n✓\n\n✓\n\n✓\n\n[In-person payments](/docs/payments/collect-a-payment/in-person-payments)\n\n✓\n\n_In beta_\n\n[Bank-to-bank payments (ACH/EFT)](/docs/payments/bank-to-bank/overview)\n\n✗\n\n✓\n\n✓\n\n**Currencies**\n\nUSD\n\n✓\n\n✓\n\n✓\n\nCAD\n\n✗\n\n✗\n\n✓\n\n**Capabilities**\n\n[Apple Pay](/docs/payments/card/applepay)\n\nIn-person payments only\n\nOnline and in-person payments\n\nIn-person payments only\n\nPlatform fees\n\n✗\n\nOnline payments only\n\nCard funding type\n\nAvailable in Q1 '25\n\nAvailable in API response\n\n[**Merchant Pricing**](/docs/merchants/merchant-pricing)\n\nCustom pricing for Amex payments\n\n✗\n\n✓\n\n✓\n\nCustom pricing for in-person payments\n\n✗\n\n✓\n\n✗\n\nPricing template processing time\n\nInstant\n\nInstant\n\nUp to 7 business days\n\nPricing change processing time\n\nImplemented for the following month, if requested before the 12th of the month\n\nInstant\n\nUp to 7 business days\n\n**Billing Frequency**\n\nDaily\n\n✗\n\n✓\n\n✓\n\nWeekly\n\n✗\n\n✓\n\n✗\n\nMonthly\n\n✓\n\n✓\n\n✓\n\n**Settlement Times**\n\nNext-day funding (NDF)\n\n7:30pm EST\n\n4pm EST; payments are batched multiple times a day\n\nStandard payout speed\n\n2:30am EST\n\n12am EST; payments are batched multiple times a day\n\n[**Payout Speed**](/docs/payouts#payout-speed)\n\nNext-day funding (NDF)\n\nDefault\n\n_In beta, requires UW approval_\n\nRequires UW approval\n\nT+0\n\nHigh-risk merchants\n\nDefault\n\nRequires UW approval\n\nT+1\n\nHigh-risk merchants\n\nHigh-risk merchants\n\nDefault\n\n[**Payout Type**](/docs/payouts#payout-type)\n\nGross payouts\n\n✓\n\n_In beta_\n\n✗\n\nNet payouts\n\n✗\n\n✓\n\n✓\n\n[**Payout Frequency**](/docs/payouts#payout-frequency)\n\nDaily\n\n✓\n\n✓\n\n✓\n\nWeekly\n\n✗\n\n✓\n\n✓\n\nMonthly\n\n✗\n\n✓\n\n✓\n\n**Reporting**\n\nTransaction-level fee details\n\n✗\n\n✓\n\n✓\n\nInterchange qualification data\n\n✓\n\n✓\n\n✓\n\n**Onboarding**\n\n[**Merchant onboarding via API**](/docs/merchants/onboard-new-merchants)\n\n✓\n\n✓\n\nExpected approval times\n\nSame day, unless pended for additional information.\n\nCredit checks\n\nA soft credit check will be performed on the application signee.\n\nA soft credit check will be performed on the application signee.\n\nAgreements and digital signature\n\nMerchants can agree and sign by completing an in-app Docusign flow.\n\nMerchants can agree and sign by clicking to agree in the application.\n\nDocuments\n\nMerchants classified as Charities or Religious Organizations who indicate 501(c)(3) status must upload a 501(c)(3) determination letter to submit their application.\n\nDocuments are not required to submit the application. However, additional documentation may be requested after submission.\n\n**Risk**\n\nFunding holds\n\nMerchants will receive an email notification from Tilled and TSYS.\n\nDocument requests can be managed through the Dashboard or API to resolve the funding hold.\n\nMerchants will receive an email notification from Tilled.\n\nDocument requests can be managed through the Dashboard or API to resolve the funding hold.\n\n[**Disputes**](/docs/disputes)\n\nDisputes can be managed through the Dashboard or API.\n\nMerchants will receive an email notification from Tilled and TSYS. TSYS's email subject will be \"Chargeback Notification\" and the sender is cb\\_dispatcherlogin@transfirst.com.\n\nDisputes can be managed through the Dashboard or API.\n\n**In-person payments**\n\nSupported countries\n\nUS\n\nUS, CAD\n\nDevices\n\nValor VL100, VL110\n\nPAX A920, A920 Pro, and A80\n\nCustom pricing for in-person payments\n\n✗\n\n✓\n\n✗\n\n[**Manual capture**](/docs/payments/card/manual-capture)\n\n✓\n\n✗\n\n[**On-device tipping**](/docs/payments/card/on-device-tipping)\n\n✓\n\n✓\n\n[**Printed receipts**](/docs/payments/card/receipts)\n\nManaged through the Dashboard or API\n\nManaged directly on the terminal reader\n\nCard tokenization\n\n✓\n\nAvailable in Q1 '25\n\nReal-time terminal monitoring\n\n✓\n\n✓\n\nTerminal management\n\n✓\n\n✓\n\nPoint-to-point encryption (P2PE)\n\n✓\n\n✓\n\nLast updated on February 6, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-preferences",
    "title": "Merchant Preferences",
    "content": "Merchant Preferences\n====================\n\nCustomize merchant preferences within Tilled's various [no-code modules](/docs/get-started/integration-options#no-code-modules):\n\n*   **Onboarding:** Tailor the hosted application to your software’s vertical.\n*   **Payments:** Restrict merchants from collecting new payments through Tilled's Merchant Dashboard.\n*   **Notifications:** Configure your merchants’ default email settings.\n\n  \n![Manage merchant preferences](/_next/image?url=%2Fimages%2Fmerchant-preferences.png&w=3840&q=75)\n\nEdit capabilities are only available to software platform owner and admin users.\n\nCustomize Merchant Preferences[](#customize-merchant-preferences)\n-----------------------------------------------------------------\n\n[Onboarding](#onboarding)[Payments](#payments)[Notifications](#notifications)\n\nTailor the hosted merchant application to your software's vertical by customizing key fields, helping merchants complete their applications more quickly and accurately.\n\nThe table below outlines all customizable fields in the hosted merchant application.\n\n**APPLICATION FIELD**\n\n**CUSTOMIZATION**\n\nIndustry\n\nSelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.\n\nBusiness type\n\nSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.\n\nDescription of products and services\n\nEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.\n\nProcessing volumes\n\nEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application.\n\n### Configure hosted application preferences\n\nTo configure the hosted merchant application:\n\n1.  Navigate to **Accounts**\n2.  Locate the **Merchant Application Preferences** card and click the **Edit** icon\n3.  Configure your preferences, including the industry, business type, and processing volumes\n4.  Click the **Save Application Preferences** button\n\nLast updated on February 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-pricing",
    "title": "Merchant Pricing",
    "content": "Merchant Pricing\n================\n\nMerchant pricing is managed using pricing templates, which serve as a repository of pricing information for a specific payment method.\n\nConfigure Merchant Pricing[](#configure-merchant-pricing)\n---------------------------------------------------------\n\n### Create pricing template[](#create-pricing-template)\n\nSoftware platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email [support@tilled.com](mailto:support@tilled.com).\n\nTo create a new pricing template:\n\n1.  Navigate to **Pricing Templates**\n2.  Click the **Create Template** button\n3.  Select the payment method type\n4.  Click the **Enter Pricing Template Details** button\n5.  Enter the template nickname, fee type, currency, and fee details\n6.  Click the **Review Pricing Template** button\n7.  After reviewing, click the **Submit** button\n\nOnce the pricing template is created and the status is `active`, it can be applied to new or existing merchants.\n\n### Apply pricing template to merchant[](#apply-pricing-template-to-merchant)\n\n**New merchants**\n\nThe pricing template will need to be supplied before the merchant application is signed and submitted. If the application is created through the Dashboard, the pricing template will need to be selected at application creation. Refer to our [Onboarding guide](/docs/merchants/onboard-new-merchants) for more details on the merchant onboarding process.\n\n**Existing merchants**\n\nTo update an existing merchant’s pricing, email [support@tilled.com](mailto:support@tilled.com) with the desired pricing template to be applied.\n\nFees for Card Payments[](#fees-for-card-payments)\n-------------------------------------------------\n\nMerchants processing card payments can be set up on a flat-rate or interchange++ model.\n\n### Flat-rate model[](#flat-rate-model)\n\nThe flat-rate pricing model involves a fixed discount rate and transaction fee that merchants pay on every transaction.\n\n### Interchange++ model[](#interchange-model)\n\nThe interchange++ model includes three main components:\n\n*   **Interchange fees:** These are the fees charged by the card-issuing banks and are paid to the card issuers. The rates vary depending on the type and brand of card used (e.g., Visa, MasterCard, etc.), the category of the merchant, and the specifics of the transaction (e.g., in-person, online).\n*   **Pass-through fees:** These are fees charged by the card networks (e.g., Visa, MasterCard, etc.). Like interchange fees, they vary by the network.\n*   **Markup:** This is the only component of the interchange++ model that is customizable and commissionable. When creating a pricing template, the markup is split out as the _discount rate_ and _transaction fee_.\n\n### Customizable fees[](#customizable-fees)\n\nThe table below details all fees that can be customized for merchants processing card payments. Depending on the processor and payment method selected when creating a pricing template (card-not-present vs card-present), some fee options may be unavailable.\n\nℹ️\n\nFor [TSYS merchants](/docs/get-started/processor-comparison), unique pricing for Amex payments is not currently available.\n\n**FEE TYPE**\n\n**DESCRIPTION**\n\n**BILLING TRIGGER**\n\n**Processing Fees**\n\nDiscount rate\n\nIncurred every time a charge is processed, unless voided.\n\nPayment settles\n\nTransaction fee\n\nIncurred every time a charge or refund is initiated.\n\nPayment initiated\n\n**Dispute Fees**\n\nRetrieval fee\n\nIncurred when a customer's bank requests additional information in order to verify a transaction.\n\nDispute status = `warning_needs_response`\n\nChargeback fee\n\nIncurred when a transaction is formally disputed by the customer.\n\nDispute status = `needs_response`\n\nReversal fee\n\nIncurred when a dispute is reversed and funds are returned to the merchant.\n\nDispute status = `won`\n\n**Account Fees**\n\nMonthly account fee\n\nMonthly fee for maintaining a merchant card account.\n\nLast day of the month\n\nMonthly minimum fee\n\nFee reflecting the minimum monthly charge a merchant must meet in card fees.\n\nIf total monthly fees are below the set minimum\n\nBank account change fee\n\nIncurred when a merchant updates their bank account information.\n\nBank account information is updated\n\n**Other Fees**\n\nCard Account Updater fee\n\nIncurred when card information is successfully updated using the Card Account Updater service.\n\nCard information is updated successfully\n\nMonthly terminal fee\n\nMonthly fee for maintaining a terminal reader. This fee is specific to card-present pricing templates.\n\nLast day of the month\n\nFees for Bank-to-Bank Payments[](#fees-for-bank-to-bank-payments)\n-----------------------------------------------------------------\n\nMerchants processing bank-to-bank payments are set up on a flat-fee model, where a fixed transaction fee is applied to each payment.\n\n### Customizable fees[](#customizable-fees-1)\n\nThe table below details all fees that can be customized for merchants processing bank-to-bank payments.\n\n**FEE TYPE**\n\n**DESCRIPTION**\n\n**BILLING TRIGGER**\n\nTransaction fee\n\nIncurred each time a bank-to-bank payment is initiated.\n\nPayment initiated\n\nReturn fee\n\nIncurred when a bank-to-bank payment is rejected.\n\nACH status = `returned`\n\n**Account Fees**\n\nMonthly account fee\n\nMonthly fee for maintaining a merchant ACH/EFT account.\n\nLast day of the month\n\nMonthly minimum fee\n\nFee reflecting the minimum monthly charge a merchant must meet in bank-to-bank fees.\n\nIf total monthly fees are below the set minimum\n\nManage Merchant Pricing[](#manage-merchant-pricing)\n---------------------------------------------------\n\n### Create pricing template[](#create-pricing-template-1)\n\nSoftware platforms are prevented from setting the discount rate below their buy-rate. If the discount rate needs to be set below the software platforms’s buy-rate, please email [support@tilled.com](mailto:support@tilled.com).\n\nTo create a new pricing template:\n\n1.  Navigate to **Pricing Templates**\n2.  Click the **Create Template** button\n3.  Select the payment method type\n4.  Click the **Enter Pricing Template Details** button\n5.  Enter the template nickname, fee type, currency, and fee details\n6.  Click the **Review Pricing Template** button\n7.  After reviewing, click the **Submit** button\n\n### Edit pricing template[](#edit-pricing-template)\n\nOnly the nickname of a pricing template can be edited. To edit the nickname:\n\n1.  Navigate to **Pricing Templates**\n2.  Select the pricing template you wish to edit\n3.  Click on the **Edit** icon next to the pricing template nickname\n4.  Update the nickname\n5.  Click on the **Checkmark** icon to save the new nickname\n\n### Archive pricing template[](#archive-pricing-template)\n\nA pricing template can only be archived if it is not actively associated with any merchants. To archive a pricing template:\n\n1.  Navigate to **Pricing Template**\n2.  Select the pricing template you wish to archive\n3.  Click the **Archive Pricing Template** button\n\n### View merchant pricing[](#view-merchant-pricing)\n\nTo view an existing merchant’s pricing:\n\n1.  Navigate to **Merchants**\n2.  Select the respective merchant\n3.  Click on the **Processing Details** tab\n4.  Refer to the **Pricing** card\n\n### Update merchant pricing[](#update-merchant-pricing)\n\nTo update an existing merchant’s pricing, email [support@tilled.com](mailto:support@tilled.com) with the desired pricing template to be applied.\n\nPricing States[](#pricing-states)\n---------------------------------\n\n### Pricing templates[](#pricing-templates)\n\n**STATUS**\n\n**DESCRIPTION**\n\n`pending`\n\nThe pricing template is being processed. It cannot yet be used to onboard new merchants.\n\n`active`\n\nThe pricing template can be used to onboard new merchants and update pricing for existing merchants.\n\n`archived`\n\nThe pricing template cannot be used to onboard new merchants or update pricing for existing merchants.\n\n### Merchant pricing[](#merchant-pricing)\n\n**STATUS**\n\n**DESCRIPTION**\n\n`pending`\n\nThe merchant's pricing is in the process of being updated. The merchant is not yet being billed according to the shown pricing.\n\n`active`\n\nThe merchant is actively being billed according to the shown pricing.\n\n  \n\nFAQs\n----\n\nIs zero-cost processing available to merchants?[](#faq-is-zero-cost-processing-available-to-merchants)Zero-cost processing is only available to software platforms with a 100% revenue share. If you're offering zero-cost processing, keep in mind these key differences between billing owners:\n\n*   **Flex Billing:** You have full control over the pricing and can choose which merchants are set up for zero-cost processing. Software platforms have the flexibility to customize which specific fees are set to $0.\n*   **Processor Billing:** Zero-cost processing must be manually configured on the software platform's account and applies to the entire portfolio. The fee setup is all-or-nothing, meaning individual fees cannot be selectively set to $0.\n\n  \nTo set up a merchant on zero-cost processing, simply set the applicable fees to $0 when creating a pricing template.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/onboard-new-merchants",
    "title": "Merchant Onboarding",
    "content": "Merchant Onboarding\n===================\n\nOnboard new merchants through Tilled's hosted application or build a custom onboarding experience using the [OnboardingAPI](/api-reference#tag/onboarding). To determine which option is best for you, review our [onboarding integration options](/docs/get-started/integration-options).\n\nOnboard New Merchant[](#onboard-new-merchant)\n---------------------------------------------\n\n[Dashboard](#dashboard)[API](#api)\n\nThe merchant onboarding process can be fully managed through the Partner Dashboard.\n\n### Create merchant application\n\nApplications created through the Dashboard utilize the Tilled\\-hosted merchant application. To create a merchant application:\n\n1.  Navigate to **Merchants** and click the **Add Merchant** button\n2.  Enter the business name and business owner’s email\n3.  Select the region, payment methods, and merchant pricing\n4.  Click the **Add Merchant** button\n\n### Pre-fill merchant application (optional)\n\nMerchant applications with the `created` or `started` status can be pre-filled and edited on behalf of the merchant. To edit the merchant application:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Merchant App** tab and click the **Edit** button\n3.  Edit the respective fields and click the **Save and Continue** button\n4.  Click **Done Editing**\n\n### Share merchant application\n\nTo share the merchant application with a business representative:\n\n1.  Navigate to **Merchants**, locate the merchant, and click the **Share** icon\n2.  Enter the business representative’s email address\n3.  Click the **Copy URL** or **Share Via Email** button\n\nOnce shared, the merchant will be navigated to the Tilled\\-hosted application.\n\n### Complete merchant application\n\nThe business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation.\n\nTo monitor the progress of a merchant application:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Merchant App** tab\n\n  \n![Merchant application](/_next/image?url=%2Fimages%2Fmerchant-application.png&w=3840&q=75)\n\nOnboarding Application States[](#onboarding-application-states)\n---------------------------------------------------------------\n\n**STATUS**\n\n**DESCRIPTION**\n\n`created`\n\nOnboarding application has been created\n\n`started`\n\nMerchant has begun filling out the application\n\n`submitted`\n\nOnboarding application has been submitted and is awaiting evaluation from Underwriting\n\n`active`\n\nMerchant has been approved to process payments\n\n`disabled`\n\nMerchant account has been disabled due to suspension or termination\n\n`in_review`\n\nOnboarding application is under review; additional documentation may be requested\n\n`rejected`\n\nOnboarding application has been rejected by Underwriting\n\n`withdrawn`\n\nOnboarding application has been withdrawn\n\nManage Merchant Applications[](#manage-merchant-applications)\n-------------------------------------------------------------\n\n### View application[](#view-application)\n\nTo view a merchant application in the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the desired merchant\n3.  Click the **Merchant App** tab\n\n### Delete application[](#delete-application)\n\nMerchant applications can only be deleted if the application has not yet been submitted. To delete a merchant application via the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the desired merchant\n3.  Click the **Trash** icon\n4.  Select the **Delete Application** button\n\n  \n\nFAQs\n----\n\nDoes Tilled support multi-location merchants?[](#faq-does--support-multi-location-merchants)Yes, merchant users can manage multiple accounts with a single login. To grant a user access to multiple accounts, simply use the same email address when inviting them to each account. Once the user logs in, they will be able to seamlessly toggle between accounts.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/account-requirements",
    "title": "Account Requirements",
    "content": "Account Requirements\n====================\n\nWhen merchants are onboarded to Tilled for payment processing, they undergo underwriting by the processor. As part of this process, merchants are required to provide key details about their business, ownership, and business model in their merchant application.\n\nThis guide outlines the specific information merchants need to submit to onboard their accounts with Tilled and explains how requirements may vary depending on the processor.\n\nBusiness Details[](#business-details)\n-------------------------------------\n\nThe merchant’s business details help verify the legitimacy of their business and ensure it is in good standing with their state’s Secretary of State.\n\n**REQUIRED INFORMATION**\n\n**DESCRIPTION**\n\nStructure\n\nThe legal business structure of the merchant.\n\nLegal business name\n\nThe registered legal business name of the merchant. The legal business name should be entered exactly as it appears on the merchant’s IRS-issued documents.\n\nDoing business as name\n\nThe business name the merchant presents to customers, if different from the legal business name. The DBA is optional.\n\nTax ID number\n\nThe merchant’s Tax ID number. In Canada, this is referred to as the Business Number.\n\nAddress\n\nThe address where the business is physically located. For Sole Proprietorships, this can be their home address if their business does not have a physical address.\n\nCustomer support phone number\n\nThe phone number which customers use to get in contact with the merchant.\n\nCustomer support email address\n\nThe email address which customers use to get in contact with the merchant. The customer support email is optional but recommended for merchants who collect payments online.\n\nWebsite\n\nThe merchant’s publicly available website. The website URL is optional but recommended for merchants who collect payments online. Social media sites are not accepted.\n\nDate of incorporation\n\nThe date when the business was incorporated.\n\nPatriot Act details\n\nBusiness verification information required by the Patriot Act. Only applies to TSYS applications. Details about the merchant’s Articles of Incorporation or Business License must be provided. The physical document is not required.\n\nBusiness Model Details[](#business-model-details)\n-------------------------------------------------\n\nThe merchant’s business model details help assess its risk level, considering factors such as industry, fulfillment timeframe, checkout methods, and business-to-business percentage.\n\n**REQUIRED INFORMATION**\n\n**DESCRIPTION**\n\nIndustry\n\nMerchant category code identifying the industry of the business.\n\nProduct description\n\nDescription of the merchant’s product or services.\n\nFulfillment timeframe\n\nThe number of days billed prior to goods or services being provided.\n\nB2B percentage\n\nThe percentage of a merchant’s overall business that is conducted with other businesses.\n\nCard checkout methods\n\nThe percentage of card volume split between online, MOTO, and in-person payments. The total value must add up to 100%.\n\nProcessing Volumes[](#processing-volumes)\n-----------------------------------------\n\nThe processing volumes provided in the merchant’s onboarding application determine their initial processing thresholds. To avoid delays in fund disbursement, merchants should estimate these values as accurately as possible. Merchants with high monthly processing volumes or average transaction amounts may be required to provide additional documentation, such as processing or bank statements, to support their volume estimates.\n\n**REQUIRED INFORMATION**\n\n**DESCRIPTION**\n\nPrevious payment processor\n\nThe name of the merchant’s previous payment processor. This information is optional but recommended if the merchant has processed payments before.\n\nStatement descriptor\n\nIndicates how the merchant’s business name should appear on customer credit card statements. The descriptor is customizable via API for Paysafe applications and set to the DBA by default for North and TSYS applications.\n\nNumber of terminals\n\nEstimated number of terminals the merchant expects to order. This field is required when a card-present pricing template is applied. Default is 1.\n\nMonthly processing volume\n\nEstimated amount the merchant makes in a month from card and bank-to-bank sales.\n\nMonthly transaction count\n\nEstimated number of payments a merchant makes in a month from card and bank-to-bank sales.\n\nAverage card transaction amount\n\nThe average amount of a single card payment. This field is required if a card-not-present or card-present pricing template is applied.\n\nAverage direct debit transaction amount\n\nThe average amount of a single bank-to-bank payment. This field is required if a bank-to-bank pricing template is applied.\n\nPrincipals[](#principals)\n-------------------------\n\nA principal of the merchant’s business can be the individual applying for the merchant account, an individual with significant operating control, and any individuals with significant ownership in the business. This information is required to comply with anti-money laundering (AML) regulations. Soft credit checks may also be performed on the principals.\n\n**REQUIRED INFORMATION**\n\n**DESCRIPTION**\n\nFirst and last name\n\nThe first and last name of the principal.\n\nControl prong\n\nIndicates whether the principal is the Control Prong for the merchant account. Control Prong is an individual with significant responsibility for managing the merchant legal entity (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts it is required that exactly one of the principals is specified as the Control Prong.\n\nApplicant\n\nIndicates whether this person is the applicant for the merchant account. For US merchant accounts it is required that exactly one of the principals is specified as the applicant.\n\nId number\n\nThe individual’s Social Security Number (US) or Social Insurance Number (CA). This field is optional for Canadian merchant accounts. For US merchant accounts, this field is optional when the business structure is government. For other business structures in the US, the SSN is required per US regulations around anti-money laundering.\n\nDate of birth\n\nThe principal’s date of birth.\n\nJob title\n\nThe principal’s job title. Selected from an enum list of possible job titles. Select the one that most closely matches the job title for the principal.\n\nPercent ownership\n\nThe percentage of the principal’s ownership in the company. It is recommended to provide the personal details for any individual who owns 25% or more of the merchant’s business. For North applications, a minimum of 75% ownership is required. Additionally, all owners with more than 25% ownership are required to DocuSign the [North merchant agreement](/docs/merchants/account-requirements#agreements).\n\nPhone\n\nThe principal’s phone number.\n\nEmail\n\nThe principal’s email address.\n\nPrevious address\n\nThe previous registered residential address for this principal. This field is required for Canadian principals who have lived at their current address for fewer than 3 years.\n\nAddress\n\nThe principal’s residential address.\n\nYears at address\n\nThe number of years the principal resided at this address. This field is only required for Canadian applications.\n\nYears at previous address\n\nRefers to the number of years the principal resided at their previous address. This field is only required for Canadian applications.\n\nBank Account[](#bank-account)\n-----------------------------\n\nThe merchant’s bank account is used for depositing and debiting funds. It must be registered under the same legal name or DBA as the merchant’s business and capable of receiving both ACH/EFT credits and debits.\n\n**REQUIRED INFORMATION**\n\n**DESCRIPTION**\n\nBank account\n\nThe banking details for the business’ payouts\n\nAgreements[](#agreements)\n-------------------------\n\nEach processor has their own Terms and Conditions that the merchant must agree to before submitting their application. All merchants must also agree to the Tilled Privacy Policy and Portal Terms of Service, which are available as links in the Merchant Onboarding API.\n\n**PROCESSOR**\n\n**METHOD TO AGREE**\n\n**NOTES**\n\nNorth\n\nDocuSign\n\nThe principal listed as the applicant and any owners with more than 25% ownership are required to digitally sign the North merchant agreement.\n\nPaysafe\n\nClick to agree\n\nTerms and conditions are available as a link in the hosted merchant application and the Merchant Onboarding API.\n\nTSYS\n\nDocuSign\n\nThe principal listed as the applicant is required to digitally sign the TSYS merchant agreement.\n\nDocuments[](#documents)\n-----------------------\n\n**REQUIRED INFORMATION**\n\n**DESCRIPTION**\n\n501c3 document\n\nThe merchant’s 501c3 letter. Documentation is only required for TSYS applications where the MCC is 8398 or 8661 and the `is_501c3` flag is `true`.\n\nVoided/check bank letter\n\nA voided check or bank letter for the merchant’s bank account. Documentation is only required in the hosted merchant application if Plaid is not used to connect the bank account.\n\n  \n\nFAQs\n----\n\nHow do SSN and TIN requirements vary across business types?[](#faq-how-do-ssn-and-tin-requirements-vary-across-business-types)\n\nThe applicant SSN (Social Security Number) and business TIN (Tax Identification Number) requirements for merchants submitting a payment processing application can vary depending on the type of business they are operating.\n\n  \n**Sole Proprietorship**\n\n*   Applicant SSN is required\n*   Business TIN is required, but the applicant may use their SSN as the TIN\n\n  \n**Partnership**\n\n*   Applicant SSN is required for all partners\n*   Business TIN is required for the partnership\n\n  \n**Limited Liability Company (LLC)**\n\n*   Applicant SSN is required for all members with more than 25% ownership\n*   Business TIN is required for the LLC\n\n  \n**Corporation**\n\n*   Applicant SSN is required for all owners with more than 25% ownership\n*   Business TIN is required for the corporation\n\n  \n**Non-profit Organization**\n\n*   For Paysafe applications, the applicant SSN is not required, wehereas for TSYS applications, the applicant SSN is required.\n*   Business TIN is required for the non-profit organization\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/document-requests",
    "title": "Document Requests",
    "content": "Document Requests\n=================\n\nManage document requests through the Dashboard or build a custom document management experience using the [DocumentsAPI](/api-reference#tag/documents). To determine which option is best for you, review our [integration options for document management](/docs/get-started/integration-options).\n\nManage Document Requests[](#manage-document-requests)\n-----------------------------------------------------\n\n[Dashboard](#dashboard)[API](#api)\n\nDocuments can be fully managed through the Partner Dashboard. When documentation is requested, an email notification is sent to all software platform and merchant users who have email notifications enabled for **Additional information requests**.\n\nTo manage merchant email notifications for document requests, refer to our [Merchant Preferences guide](/docs/merchants/merchant-preferences).\n\n### Upload merchant documentation\n\nTo upload documentation on behalf of a merchant:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Documents** tab\n3.  Click the **Submit Requested Information** button\n4.  Upload the requested information and click the **Submit Additional Information** button\n\n### View request status\n\nTo view the status of a documentation request:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Documents** tab\n3.  Refer to the `status` code of the respective request\n\nRefer to the [Document Request States](/docs/merchants/document-requests#document-request-states) for detailed information on each status.\n\nCommon Reasons for Document Requests[](#common-reasons-for-document-requests)\n-----------------------------------------------------------------------------\n\nFor active merchants using Tilled, it’s not uncommon to receive requests for additional documents. Generally, document requests are part of our ongoing efforts to ensure compliance, security, and smooth operation of the merchant account.\n\nThe table below defines the most common scenarios in which additional documentation may be requested.\n\n**PURPOSE**\n\n**COMMON DOCUMENT REQUESTS**\n\n**New Merchants**\n\nBusiness verification\n\nVerify the legitimacy and standing of the business.\n\n*   Business License\n*   Articles of Incorporation\n\nBusiness owner verification\n\nConfirm the identity of the business owner.\n\n*   Driver’s License or Passport\n\nProcessing volume verification\n\nEnsure reported processing volumes match those stated in the application.\n\n*   Bank Statements\n*   Processing Statements\n*   Financial Statements\n\n**Active Merchants**\n\nPeriodic account review\n\nEnsure all merchant account information is current and compliant with regulatory standards.\n\n*   Business License\n*   Financial Statements\n\nRelease of funding hold\n\nResolve any issues causing a hold on the merchant’s account.\n\n*   Invoice\n*   Financial Statements\n*   Proof of order fulfillment\n\nAccount change verification\n\nVerify significant account changes, like ownership or business structure changes.\n\n*   Articles of Incorporation\n*   EIN Letter\n\nRisk management procedures\n\nReview unusual or significant transaction patterns.\n\n*   Invoice\n*   Financial Statements\n*   Customer contracts\n\nTypes of Document Requests[](#types-of-document-requests)\n---------------------------------------------------------\n\n**DESCRIPTION**\n\n**Files**\n\nBank Letter or Voided Check\n\n**Voided Check:** Official bank document proving an account's authenticity with pre-printed account details. The Voided Check should:\n\n*   Be a pre-printed voided check (not a temporary check)\n*   Include the merchant legal name\n*   Include the merchant business address\n\n**Bank Letter:** Formal letter from the merchant's bank verifying the account holder's details. The Bank Letter should:\n\n*   Be on a bank letterhead\n*   Include the registered name of your business\n*   Include an ACH/EFT routing number\n*   Include an ACH/EFT account number\n*   Be signed and dated by a bank representative within the last 30 days\n\nEIN Letter\n\nConfirmation letter from the IRS that provides the Employer Identification Number.\n\nArticles of Incorporation\n\nOfficial documents that legally establish the creation of a corporation.\n\nBusiness License\n\nGovernment-issued document that certifies a business to operate legally within a certain geographical area. A photo of the Business License is accepted, as long as it is readable.\n\nUtility Bill\n\nMonthly statement from a utility service (e.g., electricity, water, gas) verifying a business's address.\n\nProcessing Statement\n\nRecent statements from a payment processor detailing transaction history. The number of months requested will be specified in the `requestNotes`.\n\nFinancial Statements\n\nComprehensive reports detailing a company's financial performance over a specific period, typically including a Profit and Loss (P&L) statement and a Balance Sheet.\n\nBank Statements\n\nDocuments from a bank detailing the transactions carried out within an account over a specified period. The number of months requested will be specified in the `requestNotes`.\n\n501c3\n\nOfficial documentation proving a non-profit organization's tax-exempt status under IRS section 501(c)(3). 501c3 will only be requested from non-profits.\n\nTax Return\n\nGovernment document detailing income, expenses, and other tax-related information. The year of the requested Tax Return will be specified in the `requestNotes`.\n\nInvoice\n\nDetailed bill from transactions or services provided, listing quantities, prices, and terms. The date and amount of the transaction for which the Invoice is requested will be specified in the `requestNotes`.\n\nDriver’s License or Passport\n\nGovernment-issued identification that includes a photo and personal details. The name of the individual for whom the driver’s license is requested will be written in the `requestNotes`.\n\nDriver’s License - Back side\n\nGovernment-issued identification that includes a photo and personal details.\n\nOther\n\nAny document not listed that may be required based on specific circumstances. If `other` is selected, notes will be provided in the `requestNotes` field to explain the request.\n\n**Written Prompts**\n\nBusiness model\n\nDescription of the merchant’s products/services, target market, and any unique features or value propositions that differentiate the business from others in the industry.\n\nPricing model\n\nDescription of the merchant’s pricing model, including general costs of goods or services.\n\nWebsite\n\nLink to the merchant’s website. Facebook and Instagram websites are not accepted.\n\nNo shopping cart\n\nDescription of how the merchant typically handles order placements, along with the usual lead time between when an order is made and when it’s fulfilled. This information is typically only requested from merchants without a shopping cart on their website.\n\nOther\n\nIf `other` is selected, notes will be provided in the `requestNotes` field to explain the request.\n\nDocument Request Requirements[](#document-request-requirements)\n---------------------------------------------------------------\n\n**TYPE**\n\n**ACCEPTED INPUT**\n\n**DETAILS**\n\nFiles\n\nUpload a file\n\nFile types: .pdf, .png, .jpg, .tiff\n\nFile size limit: 10MB\n\nWritten prompt\n\nSubmit a written response\n\nCharacter limit: Up to 255 characters\n\nDocument Request States[](#document-request-states)\n---------------------------------------------------\n\n**STATUS**\n\n**DESCRIPTION**\n\n`requested`\n\nDocument was requested from the merchant.\n\n`submitted`\n\nDocument was submitted to Tilled and is under review.\n\n`verified`\n\nDocument was verified. No further action is needed.\n\n`rejected`\n\nDocument was rejected for failing to meet the review criteria. Reasons for rejection may include:\n\n*   Blurry or unreadable content, making the document hard to review\n*   Document corruption or technical issues preventing it from being opened\n*   Irrelevance or errors in the document's content\n\nIf a document is rejected, a detailed explanation will be provided and an updated document will be requested.\n\nLast updated on March 3, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/manage-merchants",
    "title": "Manage Merchants",
    "content": "Manage Merchants\n================\n\nTilled's Dashboard provides a centralized way to manage your merchant portfolio.\n\nMerchant Account States[](#merchant-account-states)\n---------------------------------------------------\n\nThe merchant account status provides quick insight into the current state of a merchant’s account, whether they are in the onboarding process or are an active merchant.\n\nIn the Dashboard, red statuses indicate information is being requested from the merchant, while purple statuses show the requested information has been submitted and is under review.\n\n### Onboarding Merchants[](#onboarding-merchants)\n\n**STATUS**\n\n**DESCRIPTION**\n\n`created`\n\nMerchant application has been created\n\n`started`\n\nMerchant has begun filling out the application\n\n`submitted`\n\nMerchant application has been submitted and is awaiting evaluation from Underwriting\n\n`in review`\n\nMerchant application is under review; additional documentation may be requested\n\n`rejected`\n\nMerchant application has been rejected by Underwriting\n\n`withdrawn`\n\nMerchant application has been withdrawn\n\n### Active Merchants[](#active-merchants)\n\n**STATUS**\n\n**DESCRIPTION**\n\n`active`\n\nMerchant account is fully operational with all capabilities active\n\n`partially active`\n\nCertain account capabilities are active while others are under review (e.g., card is `active`, bank-to-bank is `in review`)\n\n`account review`\n\nAn account review has been conducted, and additional information is requested to prevent future processing disruptions\n\n`funding hold`\n\nFunding restrictions are in place for one or more capabilities\n\n`disabled`\n\nMerchant account has been disabled due to suspension or termination\n\nManage Merchant Details[](#manage-merchant-details)\n---------------------------------------------------\n\n### View processing details[](#view-processing-details)\n\nTo view a merchant’s processing details, including MCC, statement descriptor, and billing schedule:\n\n1.  Navigate to **Merchants**\n2.  Select a merchant\n3.  Click on the **Processing Details** tab\n\n### Update business details[](#update-business-details)\n\nTo update business details such as the business address or bank account, contact [support@tilled.com](mailto:support@tilled.com).\n\nWhen updating a bank account, include a voided check or a signed bank letter for the new account with the request. Ensure the bank account name matches either the DBA or the legal name of the business.\n\n  \n\nFAQs\n----\n\nWhen are 1099-K’s sent out?[](#faq-when-are-1099-ks-sent-out)1099-K forms for card accounts are available on January 31st. Forms are mailed to the merchant’s address on file. 1099-K forms are not generated for ACH accounts.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents",
    "title": "Online Payments",
    "content": "Online Payments\n===============\n\nTilled offers various options for collecting one-time, online payments:\n\n*   **API-only:** Build a custom payment flow using the [Payment IntentsAPI](/api-reference#tag/payment-intents).\n*   **Checkout sessions:** Low-code option for software platforms to generate `checkout_session_url` that routes the customer to a Tilled\\-hosted payments page.\n*   **Payment links:** No-code option for merchants to generate a unique payment link from the Dashboard that routes the customer to a Tilled\\-hosted payments page.\n\nTo determine which option is best for you, review our [payment integration options](/docs/get-started/integration-options).\n\nCollect an Online Payment[](#collect-an-online-payment)\n-------------------------------------------------------\n\n[API-Only](#api-only)[Checkout Sessions](#checkout-sessions)[Payment Links](#payment-links)[Manual Payment](#manual-payment)\n\nAsynchronous payment flows are complex to manage because they depend on customer interactions that happen outside of your application. [Payment IntentsAPI](/api-reference#tag/payment-intents) simplify this by tracking the payment status, serving as the source of truth throughout the payment lifecycle.\n\n### Create a payment intent\n\nTo [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents), specify the necessary details such as currency, payment method, and amount.\n\n    curl -L 'https://api.tilled.com/v1/payment-intents' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"amount\": 1000,\n        \"currency\": \"usd\",\n        \"payment_method_types\": [\n          \"card\"\n        ],\n        \"confirm\": true,\n        \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\"\n                }'\n\n**Best practices when creating a payment intent**\n\n*   [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents) at the beginning of the checkout process, once you know the total amount. If the amount changes, you can [Update a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) as needed.\n*   If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session.\n\n### Confirm the payment\n\nIn order to confirm a payment intent, the payment method details or a `payment_method_id` must be specified. You can confirm at creation by setting `confirm=true` in the request body.\n\nIf the payment intent status is `requires_payment_method`, you'll need to attach a payment method using the [Confirm a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) endpoint.\n\n    curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\"\n            }'\n\nPayment Intent States\n---------------------\n\n**STATUS**\n\n**DESCRIPTION**\n\n**ADDITIONAL INFORMATION**\n\n`requires_payment_method`\n\nPayment requires a payment method\n\nIf a payment attempt fails, it reverts to this status.\n\n`requires_confirmation`\n\nPayment method has been provided but the payment requires confirmation\n\nThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.\n\n`requires_capture`\n\nPayment has been authorized but not captured\n\nUsed when authorization and capture are separate actions.\n\n`requires_action`\n\nPayment requires additional action\n\nFor example, action needs to be taken on the terminal reader to complete the payment.\n\n`processing`\n\nPayment is processing\n\nProcessing time varies by payment method.\n\n`succeeded`\n\nPayment has succeeded\n\nA [ChargeAPI](/api-reference#tag/charges) object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.\n\n`canceled`\n\nPayment has been canceled\n\nA payment intent can be canceled before it reaches `processing` or `succeeded` status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed.\n\nFAQs\n----\n\nWhat payment methods are supported?[](#faq-what-payment-methods-are-supported)Card, bank-to-bank, and Apple Pay are supported for online payments. HSA/FSA cards are not supported at this time.What card brands are supported?[](#faq-what-card-brands-are-supported)Visa, Mastercard, Discover, and Amex are supported, with Maestro, Diners, and JCB also available with Paysafe.What is the difference between a payment intent and a charge?[](#faq-what-is-the-difference-between-a-payment-intent-and-a-charge)A payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation. In contrast, charges occur at a singular point in the payment process when a transfer of funds is initiated.Is it possible to perform more than one capture with the same payment intent?[](#faq-is-it-possible-to-perform-more-than-one-capture-with-the-same-payment-intent)No, a payment intent can only be captured once, even if the captured amount is less than the authorized amount.What are platform fees and how are they used?[](#faq-what-are-platform-fees-and-how-are-they-used)\n\nSoftware platforms processing online payments through Paysafe can specify a `platform_fee` amount when [Creating a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents). This fee is deducted from the total payment amount and directed to the software platform, serving as a per-transaction service fee. The `platform_fee` cannot exceed the total payment amount minus processing fees.\n\nFor example, if a customer makes a $10 payment to a merchant with a $1.00 platform fee, the merchant would receive $9.00, while the software platform collects $1.00 as the service fee.\n\nCommon use cases for platform fees include:\n\n*   Passing on the merchant's processing cost to the customer, also known as surcharging\n*   Billing for service or SaaS fees\n*   Enabling tipping and donations\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/in-person-payments",
    "title": "In-Person Payments",
    "content": "In-Person Payments\n==================\n\nTilled supports in-person payments on both TSYS and Paysafe, giving you the flexibility to choose the processor and terminal setup that best suits your business needs. This guide will walk you through the process of setting up your integration, from selecting your processor and terminals to handling key payment scenarios.\n\nℹ️\n\nPaysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to [support@tilled.com](mailto:support@tilled.com).\n\nDesign Your Integration[](#design-your-integration)\n---------------------------------------------------\n\n### Choose your processor[](#choose-your-processor)\n\nTilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which [processor](/docs/get-started/processor-comparison) you will use.\n\n### Choose your terminals[](#choose-your-terminals)\n\nThe terminal options available to you depend on the processor you are using for in-person payments.\n\n**Valor terminals with TSYS**\n\n*   **VL100:** Best for countertop use\n*   **VL110:** Best for handheld use\n\n**PAX terminals with Paysafe**\n\n*   **A920**\n*   **A920 Pro**\n*   **A80**\n\nCheck out our [online store](https://f1e839.myshopify.com/) for more information.\n\n### Identify required functionality[](#identify-required-functionality)\n\nThere are several in-person payments features to choose from which you can implement during your integration.\n\n[Manual capture](/docs/payments/card/manual-capture)[On-device tipping](/docs/payments/card/on-device-tipping)[Receipts](/docs/payments/card/receipts)\n\nOrder Developer Terminals[](#order-developer-terminals)\n-------------------------------------------------------\n\nTo test your integration, you’ll need a developer terminal. The easiest and most convenient option is to [order a developer terminal](https://f1e839.myshopify.com/) from Tilled. The terminal will arrive within a few business days, fully activated and ready to use. Simply connect it to Wi-Fi to get started.\n\nIf you already own a developer terminal, you can use it as long as it is a VL100 or VL110 model and suitable for test environments. To use your own terminal:\n\n1.  Email support to request an Activation Code.\n2.  Enter the Activation Code onto the terminal to associate it with your test account.\n\nCollect an In-Person Payment[](#collect-an-in-person-payment)\n-------------------------------------------------------------\n\nIf you are already familiar with collecting online payments using Tilled, the process for in-person payments will be similar.\n\n### Retrieve the terminal id[](#retrieve-the-terminal-id)\n\nWhen a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique `terminal_reader_id`. Before processing a payment, [List all Terminal ReadersAPI](/api-reference#tag/terminal-readers/get/v1/terminal-readers) linked to the merchant’s account to specify the device from which the payment will be collected.\n\n    curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n\n### Create a card-present payment method[](#create-a-card-present-payment-method)\n\nTo [Create a Payment MethodAPI](/api-reference#tag/payment-methods/post/v1/payment-methods) for an in-person payment, set the `type=card_present` and include the `terminal_reader_id` of the intended device.\n\n**Create a Payment Method sample request**\n\n    curl -L 'https://api.tilled.com/v1/payment-methods' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"type\": \"card_present\",\n      \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\"\n    }'\n\n### Collect the payment[](#collect-the-payment)\n\nBegin by creating a payment intent. Specify the `payment_method_type` property as `card_present` and use the `payment_method_id` obtained from the previous step. Confirming the payment intent transitions its status to `requires_action`, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment.\n\n**Create a payment intent sample request**\n\n    curl -L 'https://api.tilled.com/v1/payment-intents' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"amount\": 1000,\n      \"currency\": \"usd\",\n      \"payment_method_types\": [\n        \"card_present\"\n      ],\n      \"confirm\": true,\n      \"capture_method\": \"automatic\",\n      \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\"\n      }'\n\n### Complete the payment[](#complete-the-payment)\n\nSwipe or tap a payment method on the terminal to complete the payment.\n\n### Confirm payment intent success[](#confirm-payment-intent-success)\n\n[Create a Webhook EndpointAPI](/api-reference#tag/webhook-endpoints/post/v1/webhook-endpoints) for `payment_intent_events` to receive updates about the success of the payment intent and the associated payment details.\n\nKey Scenarios to Handle[](#key-scenarios-to-handle)\n---------------------------------------------------\n\n### Partial authorizations[](#partial-authorizations)\n\nA Partial Authorization occurs when a payment is attempted for the full amount, but there are insufficient funds to cover it. Only the available amount is captured. It’s important that your software handles this flow, so that the merchant is aware when the full amount is not captured and can choose to create another payment for the difference.\n\nWhen there is a partial authorization, the API status for the charge is `succeeded`. Developers should compare either `charge.amount_captured` or `payment_intent.amount_received` to the original charge amount to determine how much was actually received.\n\n### Same-day refunds[](#same-day-refunds)\n\nAll refunds are initiated through the [Create a RefundAPI](/api-reference#tag/refunds/POST/v1/refunds) endpoint.\n\nFor same-day refunds on payments made via a Paysafe terminal reader, the refund must be initiated through the terminal reader, which needs to be powered on and connected to the internet. If the terminal is offline, the same-day refund will not go through. Next-day or later refunds can be processed without the terminal being powered on or connected. Make sure your software is set up to handle these refund events: `charge.refund.pending` and `charge.refunded`.\n\nSame-day refunds for payments made through TSYS terminal readers are not processed through the terminal.\n\nCertify Your Integration[](#certify-your-integration)\n-----------------------------------------------------\n\nAfter completing your integration, you need to certify it by handling specific payment scenarios. If you’ve implemented additional in-person features such as tip settings or card saving, ensure you test those flows as well.\n\nThe developer tasks below are required to be completed in [sandbox](https://sandbox-app.tilled.com/) before launching your card-present solution with Tilled:\n\n*   **Process payments:**Create and complete 20 card-present payments.\n*   **Configure webhooks:**Configure and listen to refund webhooks.\n*   **Process same-day refund:**Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle `charge.refund.pending` and `charge.refunded` webhooks.\n*   **Process next-day or later refund:**Process a next-day or later refund for 5 card-present payments.\n*   **Process next-day partial refunds:**Partially refund 5 card-present payments.\n*   **Create a partial authorization:**Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers.\n*   **Cancel a payment:**Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result.\n*   **Cancel an incomplete payment:**Cancel at least one incomplete card-present payment with the [Cancel a Payment IntentAPI](/api-reference#tag/payment-intents/POST/v1/payment-intents/%7Bid%7D/cancel) endpoint and process the result.\n*   **Handle lost webhooks:**Ensure that your software can handle lost `payment_intent.succeeded` webhooks.\n\nFAQs\n----\n\nHow do I calculate the tip amount?[](#faq-how-do-i-calculate-the-tip-amount)To calculate the tip amount when tips are enabled, subtract the `payment_intent.amount` from the `payment_intent.amount_received`.What payment methods are supported?[](#faq-what-payment-methods-are-supported)Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time.Can I switch in-person payment providers?[](#faq-can-i-switch-in-person-payment-providers)Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:\n\n*   **Manual capture:** Manual capture is not supported by the Paysafe in-person payments solution.\n*   **Same-day refunds:** Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.\n*   **Printed receipts:** Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/subscriptions",
    "title": "Subscriptions",
    "content": "Subscriptions\n=============\n\n[SubscriptionsAPI](/api-reference#tag/subscriptions) allow you to charge customers on a recurring basis. A successful subscription flow follows this sequence:\n\n1.  The subscription is created with a status of `pending`\n2.  On the `billing_cycle_anchor` date, a Payment Intent is created and confirmed\n3.  The subscription status is then updated to `active`\n4.  The subscription remains in the `active` status indefinitely or until it reaches the specified `cancel_at` date, at which point its status changes to `canceled`\n\nSet Up a Subscription[](#set-up-a-subscription)\n-----------------------------------------------\n\nTo set up a new subscription, you need an existing customer and their associated payment method.\n\n### Create a customer[](#create-a-customer)\n\nTo [Create a CustomerAPI](/api-reference#tag/customers/post/v1/customers), specify the customer’s details such as name, email address, and phone number. While you can’t change the customer associated with a subscription, you can update the payment method as needed.\n\n**Create a Customer sample request**\n\n    curl -L 'https://api.tilled.com/v1/customers' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"email\": \"test@email.test\",\n        \"first_name\": \"Jane\",\n          \"middle_name\": \"Andrea\",\n        \"last_name\": \"Doe\",\n        \"metadata\": {\n          \"order_id\": \"100123\",\n          \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\"\n        },\n        \"phone\": \"1234567890\"\n      }'\n\n### Attach a Payment Method[](#attach-a-payment-method)\n\nTo [Attach a Payment Method to a CustomerAPI](/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach), specify the `customer_id`. If you have not yet made a payment method then you will need to [Create a Payment MethodAPI](/api-reference#tag/payment-methods/post/v1/payment-methods).\n\n**Create a Payment Method sample request**\n\n    curl -L 'https://api.tilled.com/v1/payment-methods' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"type\": \"card\",\n        \"card\": {\n            \"number\": \"4111111111111111\",\n            \"exp_month\": 12,\n            \"exp_year\": 2031,\n            \"cvc\": \"123\"\n        },\n        \"billing_details\": {\n            \"address\": {\n                \"zip\": \"33139\"\n            }\n        }\n    }'\n\n**Attach a Payment Method sample request**\n\n    curl -L -X PUT 'https://api.tilled.com/v1/payment-methods/{{PAYMENT_METHOD_ID}}/attach' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"customer_id\": \"{{CUSTOMER_ID}}\"\n    }'\n\n### Create a subscription[](#create-a-subscription)\n\nTo [Create a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions), specify the `customer_id`, `payment_method_id`, `price`, `billing_cycle_anchor`, `interval_unit`, and `interval_count`.  Billing cycles cannot be edited after a subscription is created.\n\n**Create a Subscription sample request**\n\n    curl -L 'https://api.tilled.com/v1/subscriptions' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"billing_cycle_anchor\": \"2024-07-04\",\n        \"currency\": \"usd\",\n        \"customer_id\":  “{{CUSTOMER_ID}}”,\n        \"interval_count\": 1,\n        \"interval_unit\": \"week\",\n        \"metadata\": {\n          \"order_id\": \"100123\",\n          \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\"\n        },\n        \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\",\n        \"platform_fee_amount\": 500,\n        \"price\": 10000\n      }'\n\n### Process the subscription payment[](#process-the-subscription-payment)\n\nWhen a payment is due, Tilled automatically generates a Payment Intent to handle the transaction. If the payment succeeds, the subscription remains active. If the payment fails, the subscription status changes to `past_due` and no further payments are attempted until you [Update the Payment MethodAPI](/api-reference#tag/payment-methods/patch/v1/payment-methods/%7Bid%7D) and [Retry the SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/retry) manually.\n\n**SUBSCRIPTION OUTCOME**\n\n**PAYMENT INTENT STATUS**\n\n**SUBSCRIPTION STATUS**\n\nsuccess\n\n`succeeded`\n\n`active`\n\nfailure\n\n`requires_payment_method`\n\n`past_due`\n\nTo retrieve all the payment attempts associated with a subscription, use the [Payment IntentsAPI](/api-reference#tag/payment-intents) endpoint and pass the `subscription_id` query parameter.\n\nManage a Subscription[](#manage-a-subscription)\n-----------------------------------------------\n\nAlthough you can’t change the customer or billing cycle associated with a subscription, you can update the payment method as needed. Subscriptions can also be paused, resumed, and canceled.\n\n### Define billing cycle[](#define-billing-cycle)\n\nBilling cycles are calculated using a combination of `billing_cycle_anchor`, `interval_unit`, and `interval_count`. The `billing_cycle_anchor` sets the first payment date and determines the schedule for subsequent payments — whether they occur weekly, monthly, or yearly.\n\nIf the scheduled payment day does not exist in a given month, the payment will default to the last day of that month. For instance, a subscription that starts on January 31 would next be billed on February 28 (or 29 in a leap year), then on March 31 and so on. The `interval_count` specifies how many intervals, as defined by the `interval_unit`, will pass between billings.\n\n**BILLING CYCLE ANCHOR**\n\n**INTERVAL UNIT**\n\n**INTERVAL COUNT**\n\n**FIRST 5 PAYMENT DATES**\n\n**DESCRIPTION**\n\n01/01/21\n\nmonth\n\n1\n\n01/01/21, 02/01/21, 03/01/21, 04/01/21, 05/01/21\n\nThe first of every month.\n\n01/01/21\n\nmonth\n\n3\n\n01/01/21, 04/01/21, 07/01/21, 10/01/21, 01/01/22\n\nThe first of every third month.\n\n01/31/21\n\nmonth\n\n1\n\n01/31/21, 02/28/21, 03/31/21, 04/30/21, 05/31/21\n\nThe last day of every month.\n\n01/01/21 (Fri)\n\nweek\n\n2\n\n01/01/21 (Fri), 01/15/21 (Fri), 01/29/21 (Fri), 02/12/21 (Fri), 02/26/21 (Fri)\n\nEvery other Friday.\n\n01/01/21\n\nyear\n\n1\n\n01/01/21, 01/01/22, 01/01/23, 01/01/24, 01/01/25\n\nThe first of every year.\n\n### Pause a subscription[](#pause-a-subscription)\n\nPausing a subscription temporarily stops all payment attempts, giving you flexibility in managing customer accounts.\n\n*   **Pause immediately:** Pause a subscription immediately using the [Pause a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/pause) endpoint.\n*   **Pause on a future date:** Set the `pause_at` attribute to define a future date for when the subscription should be paused. This can be done when you [Create a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions) or [Update a SubscriptionAPI](/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D).\n\n### Resume a subscription[](#resume-a-subscription)\n\nResuming a subscription reactivates the billing cycle and continues the regular payment schedule.\n\n*   **Resume immediately:** Resume a subscription immediately using the [Resume a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/resume) endpoint.\n*   **Resume on a future date:** Set the `resume_at` attribute to define a future date for when the subscription should resume. This can be done when you [Create a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions) or [Update a SubscriptionAPI](/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D).\n\n### Cancel a subscription[](#cancel-a-subscription)\n\nCanceling a subscription permanently stops all future payments.\n\n*   **Cancel immediately:** Cancel a subscription immediately using the [Cancel a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/cancel) endpoint.\n*   **Cancel on a future date:** Set the `cancel_at` attribute to define a future date for the subscription cancellation. This can be done when you [Create a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions) or [Update a SubscriptionAPI](/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D).\n\nSubscription States[](#subscription-states)\n-------------------------------------------\n\n**STATUS**\n\n**DESCRIPTION**\n\n`pending`\n\nThe subscription has been created and is awaiting the initial payment processing at the `billing_cycle_anchor`.\n\n`active`\n\nThe subscription is current, and the most recent payment was successful.\n\n`past_due`\n\nThe latest payment has failed or was not attempted. Further payment attempts will wait until a [retryAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/retry) is initiated.\n\n`paused`\n\nThe subscription is on hold, and no payments will be processed until it is [resumedAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/resume).\n\n`canceled`\n\nThe subscription has been canceled, and no future payments will be made.\n\nSubscription Events[](#subscription-events)\n-------------------------------------------\n\nSubscriptions trigger three specific types of [events](/docs/webhooks/webhook-events):\n\n*   `subscription.created`\n*   `subscription.updated`\n*   `subscription.canceled`\n\nEvents related to Payment Intents are also generated and will include the `subscription_id` in the event payload.\n\nWhen you create a customer with a valid payment method and associate them with a subscription, the following events will be triggered, although their exact order may vary:\n\n*   `customer.created`: Indicates that a customer record has been successfully created.\n*   `payment_method.attached`: Indicates that a payment method has been successfully attached to the customer.\n*   `subscription.created`: Indicates that the subscription has been created.\n*   `payment_intent.created`, `payment_intent.succeeded`, and `charge.succeeded`: These events indicate that the customer’s payment method was successfully charged.\n*   `subscription.updated`: This event is sent when the subscription status changes to active, and the payload includes the `next_payment_at` date, which is when the next automatic payment attempt will occur.\n\nUsing Subscriptions to Schedule One-Time Payments[](#using-subscriptions-to-schedule-one-time-payments)\n-------------------------------------------------------------------------------------------------------\n\nWhile [SubscriptionsAPI](/api-reference#tag/subscriptions) are primarily designed for recurring payments, they can also be adapted to schedule a one-time future payment. To implement this, first [Create a CustomerAPI](/api-reference#tag/customers/post/v1/customers), [Attach a Payment Method to a CustomerAPI](/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach), then you can [Create a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions) and set the `cancel_at` attribute to the day after the `billing_cycle_anchor` date.\n\n**Create a Subscription sample request**\n\n    curl -L 'https://api.tilled.com/v1/subscriptions' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"billing_cycle_anchor\": \"2024-07-04\",\n        \"cancel_at\": \"2025-07-05\",\n        \"currency\": \"usd\",\n        \"customer_id\":  “{{CUSTOMER_ID}}”,\n        \"interval_count\": 1,\n        \"interval_unit\": \"week\",\n        \"metadata\": {\n          \"order_id\": \"100123\",\n          \"internal_customer_id\": \"7cb1159d-875e-47ae-a309-319fa7ff395b\"\n        },\n        \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\",\n        \"platform_fee_amount\": 500,\n        \"price\": 10000\n      }'\n\n  \n\nFAQs\n----\n\nHow do I change the due date for a subscription?[](#faq-how-do-i-change-the-due-date-for-a-subscription)The `billing_cycle_anchor` is fixed throughout the subscription's lifecycle and cannot be modified. Tilled calculates all future payments based on the initial date following the first payment. If you need to change the billing anchor, you will need to cancel the existing subscription and create a new one with the updated anchor.Can I update a subscription’s payment intent directly?[](#faq-can-i-update-a-subscriptions-payment-intent-directly)Yes. However, updating the payment intent will not affect the subscription’s status. If the subscription has a status of `past_due`, users should [Update a SubscriptionAPI](/api-reference#tag/subscriptions/patch/v1/subscriptions/%7Bid%7D) with a valid payment method and [Retry a SubscriptionAPI](/api-reference#tag/subscriptions/post/v1/subscriptions/%7Bid%7D/retry).How do I link a payment intent back to the subscription?[](#faq-how-do-i-link-a-payment-intent-back-to-the-subscription)There are two approaches to linking a payment intent back to the subscription:  \n1\\. Include metadata in your subscription request to query when retrieving a payment intent. The id will be listed in the `subscription_id` object.  \n2\\. Configure webhooks for the `payment_intent.succeeded` event, which includes the `payment_intent_id` and `subscription_id`.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/refunds",
    "title": "Refunds",
    "content": "Refunds\n=======\n\nWhen processing a refund, Tilled dynamically determines whether to issue a refund or void the payment based on the payment’s batch status. If the payment has already been batched, a refund will be processed. If the payment has not been batched, it will be voided, effectively reversing the authorization.\n\nWhen issuing a refund, please keep in mind:\n\n*   The refund amount cannot be greater than the original charge amount\n*   Partial refunds cannot be issued before the payment has been batched and settled\n*   For bank-to-bank payments, a refund greater than $500 may require risk review\n\nIssue a Refund[](#issue-a-refund)\n---------------------------------\n\n[Dashboard](#dashboard)[API](#api)\n\nTo issue a refund:\n\n1.  Navigate to the **Payments** page\n2.  Select the payment you wish to refund\n3.  Click the **Issue Refund** button\n4.  Enter the refund amount and reason\n\nRefund-Related Fees[](#refund-related-fees)\n-------------------------------------------\n\nRefunds incur an additional transaction fee, as well as any fees associated with the original charge. In contrast, voided payments do not incur additional fees and any fees related to the original charge are reversed.\n\nLast updated on February 28, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/declines",
    "title": "Declines",
    "content": "Declines\n========\n\nCard declines can be a frustrating aspect of processing payments, both for customers and merchants. They happen when a cardholder’s bank or card issuer cannot authorize a transaction.\n\nThe table below outlines common reasons for card declines along with recommended resolutions.\n\n**FAILURE CODE**\n\n**FAILURE MESSAGE**\n\n**NEXT STEPS**\n\n`account_closed`\n\nThe account has been closed.\n\nResubmit the payment using an alternative card or payment method.\n\n`authentication_required`\n\nThe cardholder must authenticate this payment using 3D Secure before proceeding.\n\nContact Support for more information.\n\n`avs_check_failed`\n\nThe AVS check failed.\n\nUpdate the address and resubmit the payment. If subsequent payments are declined, advise the customer to contact the card issuer for more information.\n\n`call_issuer`\n\nThe card was declined by the issuer for an unknown reason.\n\nAdvise the customer to contact the card issuer for more information.\n\n`canceled`\n\nThe payment was canceled.\n\nConfirm whether the payment was meant to be canceled and proceed accordingly.\n\n`card_not_supported`\n\nThe card does not support this type of purchase.\n\nResubmit the payment using an alternative card or payment method.\n\n`do_not_honor`\n\nThe card was declined by the issuer for an unknown reason.\n\nAdvise the customer to contact the card issuer for more information.\n\n`duplicate_transaction`\n\nA payment with identical amount and payment information was submitted very recently.\n\nConfirm whether it’s a true duplicate and proceed accordingly.\n\n`expired_card`\n\nThe card has expired.\n\nResubmit the payment using an alternative card or payment method.\n\n`format_error`\n\nThere are one or more issues with data formatting.\n\nUpdate the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.\n\n`fraudulent`\n\nThe payment is suspected to be fraudulent.\n\nAvoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.\n\n`generic_decline`\n\nThe payment was declined by the issuer for an unknown reason.\n\nResubmit the payment. If subsequent payments are declined, contact the card issuer for more information.\n\n`incorrect_cvc`\n\nThe CVV/CVC number is incorrect.\n\nResubmit the payment using the correct CVV/CVC.\n\n`incorrect_pin`\n\nThe PIN is incorrect.\n\nResubmit the payment using the correct PIN.\n\n`insufficient_funds`\n\nThe account has insufficient funds to complete the purchase.\n\nReach out to the account holder to address the issue and resubmit the payment once funds are available.\n\n`invalid_account`\n\nThe account is invalid.\n\nObtain new account information and resubmit the payment.\n\n`invalid_address`\n\nThe address is incorrect.\n\nResubmit the payment using the correct address.\n\n`invalid_amount`\n\nThe amount is invalid.\n\nUpdate the amount and resubmit the payment.\n\n`invalid_credentials`\n\nThe credentials provided with the request are invalid.\n\nUpdate your credentials and resubmit the payment.\n\n`invalid_expiry`\n\nThe expiration date is incorrect.\n\nResubmit the payment using the correct expiration date.\n\n`invalid_field`\n\nOne or more fields are invalid.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.\n\n`invalid_merchant_account`\n\nThe merchant account is not properly set up to process this payment.\n\nContact Support for more information.\n\n`invalid_number`\n\nThe card number is incorrect.\n\nUpdate the payment information and resubmit the payment.\n\n`invalid_request`\n\nThe credentials, URL, or action used in the request are invalid.\n\nVerify the request details and resubmit the payment.\n\n`invalid_token`\n\nThe payment token is invalid or the corresponding account is not active.\n\nUpdate the payment information and resubmit the payment.\n\n`invalid_transaction`\n\nThe transaction referenced is not supported or cannot be found.\n\nContact Support for more information.\n\n`invalid_zip`\n\nThe zip code is incorrect.\n\nResubmit the payment using the correct zip code.\n\n`issuer_not_available`\n\nThe card issuer couldn’t be reached, so the payment couldn’t be authorized.\n\nResubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information.\n\n`limit_exceeded`\n\nThe customer has exceeded their balance or credit limit.\n\nResubmit the payment using an alternative card or payment method.\n\n`lost_card`\n\nThe card cannot be used for payment as it was reported lost.\n\nAvoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.\n\n`no_action_taken`\n\nThe payment failed because no action was taken on the terminal.\n\nResubmit the payment.\n\n`no_card`\n\nEither the card wasn't provided or the card was removed before the payment was completed.\n\nResubmit the payment.\n\n`not_authorized`\n\nThe payment is not authorized.\n\nAdvise the customer to contact the card issuer for more information.\n\n`not_permitted`\n\nThe payment is not permitted.\n\nAdvise the customer to contact the card issuer for more information.\n\n`not_recognized`\n\nThe card is not recognized.\n\nAdvise the customer to contact the card issuer for more information.\n\n`pickup_card`\n\nThe card cannot be used for payment as it may have been reported lost or stolen.\n\nAvoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.\n\n`pin_try_exceeded`\n\nThe allowable number of PIN tries was exceeded.\n\nResubmit the payment using an alternative card or payment method.\n\n`processing_error`\n\nAn error occurred while processing the payment.\n\nResubmit the payment. If subsequent payments are declined, contact Support for more information.\n\n`restricted_card`\n\nThe card cannot be used for payment as it may have been reported lost or stolen.\n\nAvoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.\n\n`risk_blocked`\n\nThe payment was blocked for triggering risk rules.\n\nContact Support for more information.\n\n`service_not_allowed`\n\nThe card was declined by the issuer due to its proprietary card activity regulations.\n\nResubmit the payment using an alternative card or payment method.\n\n`stolen_card`\n\nThe card cannot be used for payment as it was reported stolen.\n\nAvoid providing the customer with specific details. Instead, advise the customer to contact their card issuer.\n\n`terminal_authentication_required`\n\nThe terminal has not been authenticated.\n\nAuthenticate the terminal and resubmit the payment.\n\n`try_again_later`\n\nThe issuer has requested that the payment be tried again later.\n\nResubmit the payment. If subsequent payments are declined, advise the customer to contact their card issuer for more information.\n\nLast updated on March 7, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/level-2-3",
    "title": "Level 2/3",
    "content": "Level 2/3\n=========\n\nCard payment processing is categorized into three levels: Level 1, Level 2, and Level 3. These levels vary based on the amount of payment information required. Level 1 requires the least information, generally resulting in higher interchange fees. Level 2 and Level 3 require more detailed data, which can lower interchange fees. While most businesses process at Level 1, fees can be reduced for merchants handling commercial credit cards by providing the additional data needed for Level 2 and Level 3 payments.\n\nCard Processing Levels[](#card-processing-levels)\n-------------------------------------------------\n\n*   **Level 1:** Basic transaction details like the amount, date, and merchant’s name.\n*   **Level 2:** Includes additional data such as taxes, customer details, and merchant ZIP code. With Level 2, interchange costs are lower than with Level 1.\n*   **Level 3:** Contains the most detailed information, including line-item details, shipping addresses, and invoice numbers. With Level 3, interchange costs are lower than Level 1 or 2.\n\nEligibility Requirements[](#eligibility-requirements)\n-----------------------------------------------------\n\n**LEVEL 2**\n\n**LEVEL 3**\n\n**Merchant Requirements**\n\nMerchant Category Codes (MCC)\n\nRefer to [ineligible MCCs](/docs/payments/card/level-2-3#ineligible-mccs)\n\nAnnual transaction volume\n\n1-6M transactions\n\n20k-1M transactions\n\n**Payment Requirements**\n\nCard brands\n\nVisa, Mastercard, and Amex\n\nVisa and Mastercard\n\nCard types\n\nCommercial credit cards (business, corporate, and purchasing)\n\nSales tax\n\nVisa: sales tax amount must be between 0.1% and 22% of the total payment amount\n\nMastercard: sales tax amount must be between 0.1% and 30% of the total payment amount\n\nNo sales tax requirements\n\nIneligible MCCs[](#ineligible-mccs)\n-----------------------------------\n\nThe following MCCs are not eligible for Level 2 and 3 rates. If you are using Tilled’s hosted merchant application, you can [customize the MCC options](/docs/merchants/merchant-preferences) to prevent merchants from mistakenly selecting an ineligible MCC.\n\n**MCC**\n\n**DESCRIPTION**\n\n3000-3299, 4511\n\nAirlines/Passenger Transport\n\n3351-3500, 7512\n\nCar Rentals/Auto Rental\n\n4411\n\nCruise Lines\n\n5962, 5966, 5967\n\nHigh Risk Direct Marketing\n\n3501-4010, 7011\n\nHotels/Lodging\n\n4112\n\nPassenger Railways\n\n5812, 5814\n\nRestaurants\n\n4722\n\nTravel Agents\n\n7513\n\nTruck and Utility Trailer Rentals\n\nIncluding Level 2/3 Data with a Payment[](#including-level-23-data-with-a-payment)\n----------------------------------------------------------------------------------\n\nWhen [collecting a payment](/docs/payments/collect-a-payment/in-person-payments) using the [Payment IntentsAPI](/api-reference#tag/payment-intents), pass in the required attributes under the `level3` field.\n\nIf you have questions about passing through Level 2/3 data, please reach out to [integrations@tilled.com](mailto:integrations@tilled.com).\n\nData Requirements[](#data-requirements)\n---------------------------------------\n\n**DATA FIELD**\n\n**LEVEL 1**\n\n**LEVEL 2**\n\n**LEVEL 3**\n\nCard number\n\n✓\n\n✓\n\n✓\n\nCard expiration date\n\n✓\n\n✓\n\n✓\n\nCVV code\n\n✓\n\n✓\n\n✓\n\nTransaction amount\n\n✓\n\n✓\n\n✓\n\nDate\n\n✓\n\n✓\n\n✓\n\nMerchant’s name\n\n✓\n\n✓\n\n✓\n\nMerchant category code\n\n✓\n\n✓\n\n✓\n\nCustomer reference number\n\n✗\n\n✓\n\n✓\n\nSales tax amount\n\n✗\n\n✓\n\n✓\n\nTax ID\n\n✗\n\n✓\n\n✓\n\nMerchant state code\n\n✗\n\n✓\n\n✓\n\nMerchant ZIP code\n\n✗\n\n✓\n\n✓\n\nRequestor name\n\n✗\n\n✓\n\n✓\n\nDestination address\n\n✗\n\n✓\n\n✓\n\nDestination state\n\n✗\n\n✓\n\n✓\n\nInvoice number\n\n✗\n\n✗\n\n✓\n\nOrder number\n\n✗\n\n✗\n\n✓\n\nDuty amount\n\n✗\n\n✗\n\n✓\n\nItem ID or SKU\n\n✗\n\n✗\n\n✓\n\nItem description\n\n✗\n\n✗\n\n✓\n\nItem quantity\n\n✗\n\n✗\n\n✓\n\nItem unit of measure\n\n✗\n\n✗\n\n✓\n\nItem commodity code\n\n✗\n\n✗\n\n✓\n\nFreight amount\n\n✗\n\n✗\n\n✓\n\nShip-from zip code\n\n✗\n\n✗\n\n✓\n\nShip-to zip code\n\n✗\n\n✗\n\n✓\n\nLine discount\n\n✗\n\n✗\n\n✓\n\nLast updated on November 1, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/applepay",
    "title": "Apple Pay",
    "content": "Apple Pay\n=========\n\nApple Pay is a seamless and secure payment method that enhances the checkout experience for customers using Apple devices. This guide provides step-by-step instructions for integrating Apple Pay for online payments. For in-person payments, no additional setup is needed—simply start accepting Apple Pay right away.\n\n**Eligibility**\n\nApple Pay for online payments is only available to merchants onboarded to Flex Billing with Paysafe. If you have questions about your merchant’s processor and billing owner, reach out to [support@tilled.com](mailto:support@tilled.com).\n\n**Prerequisites**\n\nBefore you begin, ensure you have the following:\n\n*   An Apple Developer account\n*   Access to your Tilled API keys\n*   An Apple Pay-enabled device for testing\n\nImplement Apple Pay[](#implement-apple-pay)\n-------------------------------------------\n\n### Verify your domain for Apple Pay[](#verify-your-domain-for-apple-pay)\n\nTo use Apple Pay, you will need to register and verify every domain and subdomain where the Apple Pay button will appear. For example, if you display the Apple Pay button on [https://pay.example.com/](https://pay.example.com/) and [https://example.com/](https://example.com/), you need to verify both domains.\n\n#### Sandbox environment[](#sandbox-environment)\n\nDomain verification is not required, but you must still adhere to domain requirements.\n\n#### Production environment[](#production-environment)\n\nTo obtain your domain verification files for Apple Pay, provide the following details to [integrations@tilled.com](mailto:integrations@tilled.com):\n\n*   **Number of domains:** Specify how many domains will host the Apple Pay button. If each merchant uses a different domain or subdomain, include that information.\n*   **Number of merchants:** Indicate how many merchants will be enabled for Apple Pay.\n*   **Checkout method:** Specify whether you will use your own checkout page (using [Tilled.jsJS](/docs/sdks-applications/tilledjs/)) or Tilled's hosted options such as [Payment Links](/docs/payments/collect-a-payment/payment-intents) or [Checkout Sessions](/docs/payments/collect-a-payment/payment-intents).\n\n### Initialize Tilled.js[](#initialize-js)\n\nTo accept Apple Pay payments through Tilled using your own checkout page, you need to include [Tilled.jsJS](/docs/sdks-applications/tilledjs/) on your page. Add the following HTML snippet to your web page, preferably within the `<head>` tag.\n\n    <script src=\"https://js.tilled.com\"></script>\n\nAfter including [Tilled.jsJS](/docs/sdks-applications/tilledjs/), you need to set it up by providing your publishable API key and the `account_id` of the merchant account you are performing the action on behalf of:\n\n    const tilled = new Tilled('pk_…', 'acct_…');\n\nUse `new Tilled(publishableKey, tilledAccount, options?)` to create an instance of the `Tilled` object, which provides access to the rest of the [Tilled.jsJS](/docs/sdks-applications/tilledjs/) SDK. Your Tilled publishable API key is required for this function. Replace the sample API key with your actual API key.\n\n### Create Payment Request[](#create-payment-request)\n\nIn this example, we’ll use a `<div id=\"native-payment-element\">` container to inject the PaymentRequest button (Apple Pay button) if `paymentRequest.canMakePayment(): Promise<boolean>` returns `true`.\n\nPaymentRequest instances emit several types of events. We will use `tilled.paymentRequest` to create a PaymentRequest object.\n\nIn Safari, `tilled.paymentRequest` uses Apple Pay.\n\n    const paymentRequest = tilled.paymentRequest({\n    total: {\n    \tlabel: \"Tilled tee\",\n    \tamount: paymentIntent.amount,\n    },\n    style: {\n    \ttype: \"donate\",\n    \ttheme: \"black\",\n    },\n    requestPayerName: true,\n    requestPayerEmail: true,});\n\nWhen creating a PaymentRequest for Apple Pay, collecting the customer’s name is highly recommended. This also results in the collection of the billing address, which can be used for address verification. Set `requestPayerName` to `true` to collect the customer name.\n\nFor a full list of PaymentRequest `options` properties, refer to the documentation [here](https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest).\n\nNeither Apple Pay nor PaymentRequest are unique payment method types. Payment methods created by a PaymentRequest will have a type of `card`.\n\n### Display Apple Pay button[](#display-apple-pay-button)\n\nTo ensure that only customers with an active Apple Pay Wallet see the option to pay with Apple Pay, use the `paymentRequest.canMakePayment()` method. This method returns a `Promise` that resolves to `true` if an enabled wallet is available and ready to pay. If no wallet is available, it resolves to `false`.\n\nThe following example demonstrates how to inject the Apple Pay button into a `<div id=\"native-payment-element\">` container if `paymentRequest.canMakePayment()` resolves to `true`:\n\n    var prButton = form.createField('paymentRequestButton', {\n    paymentRequest: paymentRequest,\n    });\n    \n    paymentRequest.canMakePayment().then((result) => {\n    if (result) {\n      // Inject paymentRequestButton Form Field to the DOM\n      prButton.inject('#native-payment-element');\n    }\n    });\n\n### Create a payment method[](#create-a-payment-method)\n\n[Tilled.jsJS](/docs/sdks-applications/tilledjs/) automatically creates a payment method once the customer completes the payment process in their browser. You can access the created payment method by listening for the paymentmethod event using `paymentRequest.on('paymentmethod', handler): void`.\n\nPayment methods created through Apple Pay will have a `type` of `card` and a validity period of 5 minutes.\n\n### Create and confirm the payment intent[](#create-and-confirm-the-payment-intent)\n\nBefore displaying your checkout form and confirming the payment, your backend server needs to [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents) with the payment amount. Pass the `client_secret` of the intent to your frontend.\n\n    paymentRequest.on('paymentmethod', (ev) => {\n    let paymentMethod = ev.paymentMethod;\n    tilled\n      .confirmPayment(paymentIntentClientSecret, {\n        payment_method: paymentMethod.id,\n      })\n      .then(\n        (paymentIntent) => {\n          // The payment intent confirmation occurred, but the\n          // actual charge may still have failed. Check\n          if (\n            paymentIntent.status === 'succeeded' ||\n            paymentIntent.status === 'processing'\n          ) {\n            ev.complete('success');\n            alert('Successful payment');\n          } else {\n            ev.complete('fail');\n            const errMsg = paymentIntent.last_payment_error?.message;\n            alert('Payment failed: ' + errMsg);\n          }\n        },\n        (err) => {\n          ev.complete('fail');\n        },\n      );\n    });\n\nTest Apple Pay Integration[](#test-apple-pay-integration)\n---------------------------------------------------------\n\nApple allows developers to test Apple Pay either before or after implementation by using a [sandbox tester account](https://developer.apple.com/apple-pay/sandbox-testing/#:~:text=supports%20TLS%201.2.-,Create%20a%20Sandbox%20Tester%20Account,-To%20create%20a).\n\n### Validate domain requirements[](#validate-domain-requirements)\n\n*   Confirm that your domain is secured with HTTPS (TLS 1.2 or later).\n*   Verify that you have a valid SSL Certificate.\n*   Make sure your domain has been validated utilizing Tilled's API and is actively hosting the Domain Verification file at the path: `/.well-known/apple-developer-merchantid-domain-association`.\n\n### Enroll in Apple Developer Program[](#enroll-in-apple-developer-program)\n\nIf you haven’t already, enroll in the [Apple Developer Program](https://developer.apple.com/programs/enroll/) to access necessary developer resources.\n\n### Create sandbox tester account[](#create-sandbox-tester-account)\n\nTo create a sandbox tester account, refer to [Apple’s instructions](https://developer.apple.com/apple-pay/sandbox-testing/#:~:text=supports%20TLS%201.2.-,Create%20a%20Sandbox%20Tester%20Account,-To%20create%20a).\n\n### Test Apple Pay checkout flow[](#test-apple-pay-checkout-flow)\n\n1.  Sign into your sandbox tester account on the device used to test your integration.\n2.  Add a test card number to your Apple Pay Wallet from the selection of test cards provided by Apple.\n3.  Checkout using the Apple Pay test card.\n\nLast updated on January 2, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/card-account-updater",
    "title": "Card Account Updater",
    "content": "Card Account Updater\n====================\n\nCard Account Updater (CAU) helps merchants keep customer credit card information current by automatically updating expired or replaced cards. This service reduces payment disruptions caused by outdated card details, making it especially useful for businesses with recurring payments or subscriptions.\n\nℹ️\n\nCard Account Updater is only available for online payments.\n\nHow Card Account Updater Works[](#how-card-account-updater-works)\n-----------------------------------------------------------------\n\nCard Account Updater must be enabled on your account to take advantage of automatic updates to card details. If you are interested in enabling Card Account Updater, please reach out to [support@tilled.com](mailto:support@tilled.com).\n\n### Card details are checked[](#card-details-are-checked)\n\nTilled checks stored card details for updates weekly, on Mondays. The process to check for updates takes up to 3 days. If an update is found, the card on file is automatically updated with the new credit card details.\n\n### Webhook event is triggered[](#webhook-event-is-triggered)\n\nEach time a card is checked, Tilled triggers a `payment_method.updated` event containing the response from the [response](/docs/payments/card/card-account-updater#card-account-updater-responses) and the `updated_at` timestamp.\n\nView Card Account Updater Results[](#view-card-account-updater-results)\n-----------------------------------------------------------------------\n\n[Dashboard](#dashboard)[API](#api)\n\nTo view Card Account Updater responses via the Dashboard:\n\n1.  Navigate to the **Payment** page\n2.  Select the payment you wish to review\n3.  Locate the **Payment Method** card\n\nIn the **Payment Method** card, you'll see a row displaying the **Last Updater Response** and the **Last Updated At** timestamp.\n\nCard Account Updater Responses[](#card-account-updater-responses)\n-----------------------------------------------------------------\n\n**RESPONSE**\n\n**DESCRIPTION**\n\n**BILLABLE**\n\n`account_closed`\n\nIssuer has communicated that this account is no longer available for processing. The payment method is no longer chargeable.\n\n✓\n\n`account_expiration_date_updated`\n\nThe expiration number has been updated.\n\n✓\n\n`account_number_updated`\n\nThe account number has been updated or both the account number and expiration date combined were updated.\n\n✓\n\n`contact_cardholder`\n\nThe issuer has identified that this consumer has requested not to have account details updated.\n\n✓\n\n`inactive_card`\n\nThis card number has not had an authorization over $.01 in the past 24 months and will not be able to receive updates on this card number until it sees payment volume. This response is only applicable to Amex cards.\n\n✗\n\n`new_card`\n\nCard account was recently opened. No updates available yet from the card brand.\n\n✗\n\n`no_match`\n\nThere is no known update available. Currently the card brand may not have a matching card on file, potentially because there is no update.\n\n✗\n\n`valid_account`\n\nAccount is valid. Currently there is no update available.\n\n✗\n\n  \n\nFAQs\n----\n\nWhich card brands is Card Account Updater compatible with?[](#faq-which-card-brands-is-card-account-updater-compatible-with)Card Account Updater is compatible with Visa, Mastercard, Discover, and Amex cards.Is development work required to take advantage of Card Account Updater?[](#faq-is-development-work-required-to-take-advantage-of-card-account-updater)Your integration must be using [Tilled.jsJS](/docs/sdks-applications/tilledjs/) v2. If you are already using v2, then no development work is required.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/surcharging",
    "title": "Surcharging",
    "content": "Surcharging\n===========\n\nSurcharging is the practice of adding an extra fee to a payment when a customer chooses to pay with a credit card. This allows businesses to offset the processing costs associated with credit card payments.\n\nℹ️\n\nOfficial support for surcharging will be available in Q2 2025.\n\nSurcharging Regulations[](#surcharging-regulations)\n---------------------------------------------------\n\nSurcharging is subject to strict regulations that vary by region and card network. Below are some critical areas to consider.\n\n### Legal restrictions by jurisdiction[](#legal-restrictions-by-jurisdiction)\n\nSome countries and states prohibit or heavily restrict surcharging, while others allow it under certain conditions. Always verify the local laws to ensure compliance, as surcharging may be entirely banned in certain areas (e.g., certain U.S. states).\n\n### Card brand rules[](#card-brand-rules)\n\nMajor card brands like Visa, Mastercard, American Express, and Discover each have specific rules for surcharging. For example:\n\n*   **Disclosure requirements:** Card brands typically require clear, conspicuous disclosure of surcharges at the point of entry (e.g., store signage) and on receipts.\n*   **Surcharge limits:** Card networks cap surcharges at the actual cost of processing or a maximum percentage (e.g., 3% or 4%), whichever is lower.\n*   **Card type restrictions:** Surcharging is generally allowed only on credit card payments, not on debit or prepaid cards.\n\nSurcharging with Tilled[](#surcharging-with-)\n---------------------------------------------\n\nSoftware platforms have two options for setting up surcharging with Tilled. In both cases, the software platform is responsible for controlling the surcharge logic and ensuring compliance with card brand rules.\n\n*   **Surcharging with platform fees:** The software platform controls surcharge logic using [Platform FeesAPI](/api-reference#tag/platform-fees). This option is only available for software platform processing on Paysafe.\n*   **Surcharging without platform fees:** Surcharging is handled by programmatically increasing the payment amount on the [Payment IntentAPI](/api-reference#tag/payment-intents/POST/v1/payment-intents). For example, for a 2.9% surcharge on a $100 purchase, the payment intent amount would be updated to $102.90.\n\nSurcharging Resources[](#surcharging-resources)\n-----------------------------------------------\n\n*   [Surcharging Considerations and Requirements - Visa](https://usa.visa.com/content/dam/VCOM/global/support-legal/documents/merchant-surcharging-considerations-and-requirements.pdf)\n*   [Surcharging Frequently Asked Questions - Visa](https://usa.visa.com/content/dam/VCOM/global/support-legal/documents/merchant-surcharging-qa-for-web.pdf)\n*   [Surcharge Rules - Mastercard](https://www.mastercard.us/en-us/business/overview/support/merchant-surcharge-rules.html)\n*   [Surcharging Frequently Asked Questions - Mastercard](https://www.mastercard.us/content/dam/public/mastercardcom/na/us/en/documents/Merchant_Surcharge_FAQ.pdf)\n*   [Surcharging - Amex](https://www.americanexpress.com/en-nz/credit-cards/about-credit-cards/surcharge/)\n\nLast updated on February 4, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/manual-capture",
    "title": "Manual Capture",
    "content": "Manual Capture\n==============\n\nManual capture lets you place a pre-authorization on a card for a specific amount, then manually capture the full amount or a portion of it later. This approach verifies that the account is valid and has sufficient funds to cover the payment without immediately debiting the cardholder’s account.\n\nTo pre-authorize an amount, set the `capture_method` to `manual` when [Creating a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents). When you’re ready to complete the payment, use the [Capture a Payment IntentAPI](/api-reference#tag/payment-intents/POST/v1/payment-intents/%7Bid%7D/capture) endpoint.\n\nℹ️\n\nManual capture is not available for payments processed through [Paysafe terminal readers](/docs/get-started/processor-comparison).\n\nLast updated on October 25, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/on-device-tipping",
    "title": "On-Device Tipping",
    "content": "On-Device Tipping\n=================\n\nOn-device tipping allows customers to select a tip percentage directly on the payment terminal during the checkout process. The currently available tip options are 10%, 15%, 20%, 25%, with an additional option for customers to input a custom amount.\n\nTip settings are configured at the terminal reader level and are disabled by default. You can enable and configure these settings either through the Dashboard or using the [Update a Terminal ReaderAPI](/api-reference#tag/terminal-readers/post/v1/terminal-readers/%7Bid%7D) endpoint.\n\n[Dashboard](#dashboard)[API](#api)\n\nTo configure on-device tipping:\n\n1.  Navigate to the **Terminals** page\n2.  Select the terminal you wish to configure\n3.  Toggle the **Tips** option to **On**\n\nLast updated on December 23, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/receipts",
    "title": "Receipts",
    "content": "Receipts\n========\n\nEnabling printed receipts allows the terminal to print copies of the transaction receipt for both the customer and the merchant. This feature provides businesses with a physical proof of purchase.\n\nReceipt settings for TSYS terminal readers are configured at the terminal level and are disabled by default. You can enable and configure these settings either through the Dashboard or using the [Update a Terminal ReaderAPI](/api-reference#tag/terminal-readers/post/v1/terminal-readers/%7Bid%7D) endpoint.\n\nReceipt settings for Paysafe terminal readers are configured directly on the terminal reader.\n\n[Dashboard](#dashboard)[API](#api)[Terminal](#terminal)\n\nTo configure receipt printing for TSYS terminals via the Dashboard:\n\n1.  Navigate to the **Terminals** page\n2.  Select the terminal you wish to configure\n3.  Toggle the **Receipts** option to “On”\n\nLast updated on December 27, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/bank-to-bank/overview",
    "title": "How Bank-to-Bank Payments Work",
    "content": "How Bank-to-Bank Payments Work\n==============================\n\nTilled facilitates bank-to-bank payments via ACH (Automated Clearing House) in the U.S. and EFT (Electronic Funds Transfer) in Canada, currently supporting only debit ACH and EFT payments.\n\n**Limitations of bank-to-bank payments**\n\n*   **Longer funding times:** Bank-to-bank payments typically take longer to process than credit card payments.\n*   **No immediate reversals:** Once a bank transfer is processed and batched, it cannot be stopped or reversed. Payments cannot be refunded until they have settled.\n*   **Return and failure delays:** Unlike credit card payments that provide immediate feedback on declined cards, failures in bank account payments may not become apparent for several days.\n*   **Strict processing limits:** A merchant cannot process a single payment that exceeds their approved limit or exceed the number of payments they are underwritten for in a month.\n\nACH Payment Lifecycle[](#ach-payment-lifecycle)\n-----------------------------------------------\n\n### Initiation[](#initiation)\n\nThe payment starts when either the merchant or customer initiates an ACH payment.\n\n### Submission[](#submission)\n\nThe bank or payment processor submits the payments to the ACH network, where it can be batched with other payments.\n\n### Clearing[](#clearing)\n\nThe Federal Reserve checks and validates the payment details as the clearinghouse.\n\n### Processing[](#processing)\n\nThe Federal Reserve processes the payment by crediting the recipient’s bank account or debiting the payer’s bank account. This typically occurs within 1-2 days of payment initiation.\n\n### Settlement[](#settlement)\n\nThe banks finalize the fund transfer through the Federal Reserve.\n\n### Funds availability[](#funds-availability)\n\nThe transferred funds become available in the recipient’s account or are confirmed taken from the payer’s account. This typically occurs within 2-5 days of payment initiation.\n\nWhile the typical timeline for ACH payments outlined is generally reliable, several factors can delay the timeline:\n\n*   **Cut-off times:** Payments initiated after the batch cut-off time may not be sent for processing until the next business day.\n*   **Weekends and holidays:** Weekends and bank holidays can add delays. Refer to [U.S. bank holidays](https://www.federalreserve.gov/aboutthefed/k8.htm) for ACH payments and [Canada bank holidays](https://www.bankofcanada.ca/press/upcoming-events/bank-of-canada-holiday-schedule/) for EFT payments.\n*   **Bank policies:** Different banks may have varying processing rules and times, which can affect the speed of payment completion.\n\nACH Payment States[](#ach-payment-states)\n-----------------------------------------\n\nWebhooks can be configured, particularly the `payment_intent.updated` and `charge.updated` events, to receive real-time updates when the status of a bank-to-bank payment changes.\n\n**DASHBOARD STATUS**\n\n**API STATUS**\n\n**DESCRIPTION**\n\n**NEXT STEPS**\n\n`failed`\n\n`failed`\n\nThe payment failed immediately upon attempt.\n\nReview the payment details for errors and attempt to resolve them. Re-initiate the payment if necessary.\n\n`pending`\n\n`pending`\n\nThe payment has been initiated and is currently being processed in the ACH network. It has not yet been cleared or settled.\n\nNo immediate action required; monitor the payment status for updates.\n\n`succeeded`\n\n`succeeded`\n\nThe payment has successfully cleared and settled.\n\nNo action required.\n\n`returned`\n\n`failed`\n\nThe payment was returned by the recipient's bank for reasons such as insufficient funds, incorrect account details, or a stop payment request.\n\nReview the failure code and address the reason for the return.\n\nLast updated on September 27, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/bank-to-bank/timing",
    "title": "Timing",
    "content": "Timing\n======\n\nBank-to-bank payments typically take up to 5 business days to complete. However, merchants may receive an early payout before the payment is fully processed, depending on their specific payout speed.\n\n**PAYOUT SPEED**\n\n**DAY 1**\n\n**DAY 2**\n\n**DAY 3**\n\n**DAY 4**\n\n**DAY 5**\n\nT+0\n\nPayment initiated\n\nPayout initiated\n\n\\-\n\n\\-\n\nPayment completed\n\nT+1\n\nPayment initiated\n\n\\-\n\nPayout initiated\n\n\\-\n\nPayment completed\n\nT+2\n\nPayment initiated\n\n\\-\n\n\\-\n\nPayout initiated\n\nPayment completed\n\nFAQs\n----\n\nWhy is the status of my ACH payment still pending after it has been paid out?[](#faq-why-is-the-status-of-my-ach-payment-still-pending-after-it-has-been-paid-out)Even though funds are available, the payment may still be [returned](/docs/payments/bank-to-bank/ach-returns). For this reason, we initially set the status to `pending` when the payment intent is confirmed. If the payment isn't returned, the status will update to `succeeded`​ on the sixth business day at approximately 6:00 AM ET.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/bank-to-bank/ach-returns",
    "title": "ACH Returns",
    "content": "ACH Returns\n===========\n\nACH payments can sometimes fail due to various issues related to the sender’s or recipient’s bank account. The table below outlines common ACH return codes, their associated failure messages, and recommended resolutions to help merchants efficiently handle these returns.\n\n**FAILURE CODE**\n\n**FAILURE MESSAGE**\n\n**NEXT STEPS**\n\n`R01`\n\nThe account has insufficient funds to complete the purchase.\n\nReach out to the account holder to address the issue, and resubmit the payment once funds are available.\n\n`R02`\n\nThe account is closed.\n\nObtain new account information and resubmit the payment.\n\n`R03`\n\nThe account number or routing information doesn’t match any accounts at the receiving bank.\n\nConfirm the payment information and resubmit the payment.\n\n`R04`\n\nThe account number provided is incorrect.\n\nCorrect the account number and resubmit the payment.\n\n`R05`\n\nA corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.\n\nContact Support for more information.\n\n`R06`\n\nThe originating bank returned the payment.\n\nContact Support for more information.\n\n`R07`\n\nThe customer revoked the authorization of the payment.\n\nConfirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.\n\n`R08`\n\nThe account holder placed a stop payment order on this specific payment.\n\nContact the account holder to resolve the issue.\n\n`R09`\n\nThe account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.\n\nResubmit the payment once the funds are collected.\n\n`R10`\n\nThe customer stated that the payment was not authorized.\n\nConfirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.\n\n`R11`\n\nA truncation (check-clearing) error occurred.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are declined, contact Support for more information.\n\n`R12`\n\nThe customer changed banks and the account has been transferred to another receiving bank.\n\nConfirm the payment information and resubmit the payment.\n\n`R13`\n\nThe ACH routing number is incorrect.\n\nCorrect the routing number and resubmit the payment.\n\n`R14`\n\nThe representative payee is deceased or cannot perform duties.\n\nObtain a new representative payee and update records.\n\n`R15`\n\nThe beneficiary or account holder is deceased.\n\nObtain new account information and resubmit the payment.\n\n`R16`\n\nThe account is frozen due to legal action or bank policy.\n\nObtain new account information and resubmit the payment.\n\n`R17`\n\nEntries contain invalid formatting or data.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R18`\n\nPayment was initiated with an incorrect effective entry date.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R19`\n\nAmount entered in the Amount field is invalid.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R20`\n\nPolicies or regulations prevent ACH payments on this account.\n\nUse an alternative bank account or payment method.\n\n`R21`\n\nCompany ID information is incorrect or outdated.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R22`\n\nIndividual ID information is incorrect or outdated.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R23`\n\nThe receiving bank refused the credit entry.\n\nContact Support for more information.\n\n`R24`\n\nThe same payment was submitted more than once.\n\nConfirm whether it’s a true duplicate and proceed accordingly.\n\n`R25`\n\nThe addenda record is incorrect or out of sequence.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R26`\n\nA required field is missing information.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R27`\n\nTrace numbers submitted are not consistent with the trace numbers in the addenda record.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R28`\n\nThe check digit in the routing number is incorrect.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R29`\n\nThe corporate account holder notified the receiving bank that the payment is not authorized.\n\nConfirm the payment's legitimacy with the customer and receive proper authorization. Because unauthorized transactions cannot be re-attempted within 60 days, advise the customer to provide a different payment method or wait to collect the payment after the 60-day period.\n\n`R30`\n\nThe receiving bank does not participate in the check truncation program.\n\nUse an alternative bank account or payment method.\n\n`R31`\n\nThe receiving bank has asked the originating bank if it can return the corporate credit or debit card or Corporate Trade Exchange (CTX) payment format, and the originating bank has agreed.\n\nContact Support for more information.\n\n`R32`\n\nThe receiving bank is not able to settle the entry for various reasons.\n\nAdvise the customer to contact their bank for more information.\n\n`R33`\n\nThe receiving bank has returned the entry for a lost, destroyed, or damaged check (XCK entry).\n\nAdvise the customer to contact their bank for more information.\n\n`R34`\n\nA federal or state regulator has limited the receiving bank’s ability to process ACH payments.\n\nAdvise the customer to contact their bank for more information.\n\n`R35`\n\nA debit entry has been improperly submitted.\n\nAdvise the customer to contact their bank for more information.\n\n`R36`\n\nA credit entry has been improperly submitted.\n\nAdvise the customer to contact their bank for more information.\n\n`R37`\n\nA duplicate payment was attempted by presenting the source document related to an existing ACH payment for processing.\n\nValidate whether the payment is a duplicate and proceed accordingly.\n\n`R38`\n\nThe receiving account holder requests to stop payment on a check that’s been converted into an electronic payment.\n\nContact the account holder to resolve the issue.\n\n`R39`\n\nThe source document related to the ACH payment is incorrect or inadequate.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R40`\n\nA federal government agency has returned an automated enrollment entry (ENR entry).\n\nContact Support for more information.\n\n`R41`\n\nTransaction code is incorrect.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R42`\n\nThe check digit at the end of the routing number is incorrect.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R43`\n\nReceiving bank account number is incorrect.\n\nCorrect the account number and resubmit the payment.\n\n`R44`\n\nIndividual identification number provided doesn’t match the ID number on record.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R45`\n\nAccount holder’s name is incorrect or misspelled.\n\nCorrect the account holder's name and resubmit the payment.\n\n`R46`\n\nRepresentative payee indicator code is incorrect.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R47`\n\nThe same ENR has been submitted more than once.\n\nValidate whether the payment is a duplicate and proceed accordingly.\n\n`R50`\n\nThe receiving bank is either in a state that doesn’t allow digital payments or requires canceled checks to be returned.\n\nContact Support for more information.\n\n`R51`\n\nItem related to RCK entry is ineligible or RCK entry is improper.\n\nContact Support for more information.\n\n`R52`\n\nThe account holder places a stop order on a bounced check that’s being reprocessed electronically.\n\nContact the account holder to resolve the issue.\n\n`R53`\n\nBoth the original payment and its corresponding RCK entry have been submitted, resulting in a duplicate payment.\n\nValidate whether the payment is a duplicate and proceed accordingly.\n\n`R61`\n\nA reversed payment has been sent to the incorrect institution.\n\nCorrect the routing number and resubmit the payment.\n\n`R62`\n\nA debit entry was sent in error or needs to be reversed.\n\nNo action needed.\n\n`R63`\n\nThe dollar amount specified in the payment is wrong.\n\nCorrect the amount and resubmit the payment.\n\n`R64`\n\nThe individual ID number in the return payment doesn’t match the one in the original entry.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R65`\n\nThe transaction code is not correct for the type of payment.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R66`\n\nThe company ID in the payment doesn’t match the ID number in the batch header record.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R67`\n\nThe return entry was already processed, resulting in a duplicate.\n\nNo action needed.\n\n`R68`\n\nThe return was not processed within the required time frame.\n\nNo action needed.\n\n`R69`\n\nOne or more fields contain incorrect information as entered by the originating bank.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R70`\n\nA valid return entry was not processed as it should have been, or a return was not requested by the originating bank.\n\nContact Support for more information.\n\n`R71`\n\nA dishonored return entry has not been sent to the correct institution.\n\nContact Support for more information.\n\n`R72`\n\nA dishonored return was not processed within the required time frame.\n\nContact Support for more information.\n\n`R73`\n\nThe receiving bank is confirming that the original return was processed within the required time frame.\n\nNo action needed.\n\n`R74`\n\nA previously improperly processed return has since been corrected.\n\nNo action needed.\n\n`R75`\n\nThis is a response to rejection code R67. The receiving bank is contesting an improper dishonor of a return entry by the originating bank.\n\nNo action needed.\n\n`R76`\n\nThis is a response to rejection code R69, in which the originating bank indicated field errors.\n\nNo action needed.\n\n`R77`\n\nThis is a response to rejection code R62, indicating that the receiving bank has either already returned the incorrect payment and the reversal, or it cannot recover the funds from the recipient as specified by R62.\n\nContact Support for more information.\n\n`R80`\n\nCoding errors exist in the IAT entry.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R81`\n\nThe receiving bank doesn’t participate in the IAT program.\n\nUse an alternative bank account or payment method.\n\n`R82`\n\nThe foreign receiving bank’s identification is incorrect.\n\nConfirm the payment information and resubmit the payment. If subsequent payments are returned, contact Support for more information.\n\n`R83`\n\nThe foreign receiving bank cannot complete the payment.\n\nContact Support for more information.\n\n`R84`\n\nThe entry hasn’t been processed by the designated gateway.\n\nContact Support for more information.\n\n`R85`\n\nAn outbound international payment has been incorrectly coded.\n\nContact Support for more information.\n\nPrevent ACH Returns[](#prevent-ach-returns)\n-------------------------------------------\n\n*   **Verify account information:** Ensure that all account details, including routing and account numbers, are accurate and current before initiating payments.\n*   **Use verification tools:** Implement tools, such as Plaid, to confirm the validity of account details. This helps avoid payments to closed or invalid accounts.\n*   **Monitor funding:** Regularly check account balances to confirm sufficient funds are available prior to initiating ACH payments.\n*   **Strengthen authorization protocols:** Secure explicit customer approvals for recurring payments and periodically update these authorizations as needed.\n\nLast updated on October 17, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/statement-descriptors",
    "title": "Statement Descriptors",
    "content": "Statement Descriptors\n=====================\n\nStatement descriptors clarify payments on customer statements. By using clear, accurate descriptors, businesses can help customers recognize transactions, reducing the likelihood of disputes.\n\nDescriptors for card payments will always contain a “Pay\\*” prefix whereas descriptors for bank-to-bank payments will not. For example, a statement descriptor of “PBJ Pay” will show up as:\n\n*   **USD card:** Pay\\*PBJ Pay\n*   **CAD card:** NBX\\*PBJ Pay\n*   **Bank-to-bank:** PBJ Pay\n\nStatement Descriptor Requirements[](#statement-descriptor-requirements)\n-----------------------------------------------------------------------\n\nA complete statement descriptor must meet the following requirements:\n\n*   Reflects the merchant’s Doing Business As (DBA) name\n*   Contains only Latin characters\n*   Contains between 1 and 20 characters:\n    *   Descriptors for card payments have a 20-character limit, including the required Pay\\* prefix\n    *   Descriptors for bank-to-bank payments have a 12-character limit\n*   Doesn’t contain any of the following special characters: `<`, `>`, `\\`, `'`, `\"`, `*`\n*   Contains more than a single common term or common website URL; a website URL is acceptable only if it provides a clear and accurate description of a transaction on a customer’s statement\n\nManage Statement Descriptors[](#manage-statement-descriptors)\n-------------------------------------------------------------\n\n### Configure statement descriptor[](#configure-statement-descriptor)\n\nThe merchant will be prompted to configure their default statement descriptor when completing their merchant application.\n\nA dynamic descriptor can also be configured by setting a `statement_descriptor_suffix` in the [Payment IntentsAPI](/api-reference#tag/payment-intents). When provided, this dynamic descriptor overrides the merchant’s default descriptor.\n\n### View statement descriptor[](#view-statement-descriptor)\n\nTo view a merchant’s statement descriptor in the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the respective merchant\n3.  Select the **Processing Details** tab\n4.  Locate the **General** widget for the desired payment method\n\nIf a dynamic statement descriptor is being used, the descriptor can be viewed within the Payment Details page.\n\n### Update statement descriptor[](#update-statement-descriptor)\n\nTo update a merchant’s statement descriptor, email [support@tilled.com](mailto:support@tilled.com) with the new descriptor.\n\nLast updated on March 3, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/terminal-readers",
    "title": "Terminal Readers",
    "content": "Terminal Readers\n================\n\nLearn how to manage PAX and Valor terminal readers, including:\n\n*   Setting up and activating a terminal reader\n*   Maintaining connectivity and managing Wi-Fi or hotspot configurations\n*   Performing manual tasks such as batching and resetting the terminal reader\n*   Troubleshooting common hardware-related issues\n\nℹ️\n\nThe Paysafe PAX solution is currently in beta.\n\n**Additional resources**\n\n[On-Device Tipping](/docs/payments/card/on-device-tipping)[Receipts](/docs/payments/card/receipts)[Manual Capture](/docs/payments/card/manual-capture)\n\nPaysafe PAX Terminal Readers\n----------------------------\n\nConfigure printed receipts on PAX terminal reader[](#faq-configure-printed-receipts-on-pax-terminal-reader)\n\nPrinted receipts can be configured directly from the Payments app on the PAX terminal reader.\n\n**Disable or enable Customer/Merchant printed receipts**\n\n1.  Turn on the terminal reader by pressing and holding the power button for 3-5 seconds\n2.  Open the Handpoint Payments App\n3.  Select the Settings icon\n4.  Select **“Printing Options”**\n5.  Toggle **“Automatic Printing”** on or off\n\n**Update the font size on printed receipts**\n\n1.  Turn on the terminal reader by pressing and holding the power button for 3-5 seconds\n2.  Go to the Device Settings (password: `pax9876@@` or `9876`)\n3.  Select **“Display”**\n4.  Select **“Font Size”**\n5.  Select the desired size\n\nUpdating the font size will impact the font size on the device and on printed receipts.\n\n**Change the printer roll in the PAX A920 or A920 Pro**\n\nThe PAX A920 includes a built-in printer for printing receipts with a thermal paper roll. To change the printer roll:\n\n1.  On the back of the terminal reader, pull down the paper lid release lever and take the whole lid casing away\n2.  Remove the paper roll\n3.  Insert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the top\n4.  Pull out approximately 2 inches of the paper and close the lid securely until it snaps into place\n5.  Tear off any excess paper\n\nNow your card reader is ready to produce receipts after a transaction\n\n**Change the printer roll in the PAX A80**\n\nThe PAX A80 includes an in-built printer for printing receipts with a thermal paper roll. To change the printer roll:\n\n1.  On the top of the terminal reader, pull out the paper lid release lever (towards the front) and open the lid casing\n2.  Remove the paper roll\n3.  Insert the new thermal paper roll into the slot with the glossy side of the paper facing outward at the top\n4.  Pull out approximately 2 inches of the paper and close the lid securely until it snaps into place\n5.  Tear off any excess paper\n\nConnect PAX terminal reader to WiFi or iPhone hotspot[](#faq-connect-pax-terminal-reader-to-wifi-or-iphone-hotspot)\n\n**To connect a PAX A920, A920 Pro, or A80 terminal reader to WiFi or iPhone hotspot**\n\n1.  Turn on the terminal reader by pressing and holding the power button for 3-5 seconds\n2.  Use the touch screen to bring the settings bar down from the top of the screen; pull it all the way down until the settings appear in full with icon names\n3.  Select the toggle switch to enable Wi-Fi\n4.  Choose the desired Wi-Fi network or iPhone hotspot\n5.  Enter the Wi-Fi password (case sensitive)\n\n**Tips for connecting to iPhone hotspot**\n\nTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the **Maximize Compatibility** setting is activated in the iPhone's Personal Hotspot settings.\n\nTo enable **Maximize Compatibility** on the iPhone hotspot:\n\n1.  Access the iPhone's **Settings**\n2.  Tap on **Personal Hotspot**\n3.  Ensure that the **Maximize Compatibility** option is switched to **On**\n\nConnect PAX A920 or A920 Pro terminal reader to a cellular network[](#faq-connect-pax-a920-or-a920-pro-terminal-reader-to-a-cellular-network)\n\nTo install and configure a mini-SIM in your PAX A920 or A920 Pro terminal reader:\n\n**1\\. Insert the mini-SIM**\n\n1.  Locate the battery cover slide latch on the back of the card reader\n2.  Push the latch to the right and open the battery cover\n3.  Remove the battery case by lifting it from the bottom\n4.  Take out the battery by lifting it from the bottom\n5.  Insert the SIM card into the **SIM1 card slot** on the left-hand side of the terminal\n\n**2\\. Enable cellular connectivity**\n\n1.  Turn on the terminal reader and access the settings (password: `pax9876@@` or `9876`)\n2.  Select **More** and then tap **Cellular Networks**\n3.  Check the box near **Data roaming**\n\n**3\\. Configure preferred network settings**\n\n1.  Access the terminal reader settings (password: `pax9876@@` or `9876`)\n2.  Navigate to **Wireless**\\->**Networks**\\->**Mobile Networks**\n3.  Tap **Preferred Network Type** and select **4G Preferred**\n4.  Ensure **3G/4G** is not selected as the primary network in the terminal settings\n\n**4\\. Verify SIM APN settings**\n\n1.  Access the terminal reader settings (password: `pax9876@@` or `9876`)\n2.  Navigate to **Wireless**\\->**Networks**\\->**Mobile Networks**\n3.  Select **Access Point Names**\n4.  Confirm that the SIM APN settings are correctly configured\n\n**Recommendations for using mini-SIMs**\n\n*   Ensure the SIM card has an active data plan to facilitate transaction processing.\n*   If WiFi connectivity is unreliable, disconnect from WiFi to prioritize the SIM card for a stronger connection. PAX terminal readers default to WiFi if available.\n\nPAX terminal reader and Handpoint Payment App passwords[](#faq-pax-terminal-reader-and-handpoint-payment-app-passwords)\n\nYour PAX devices uses two types of passwords for different purposes:\n\n**PAX terminal reader password**\n\nThe terminal reader password is required to configure key terminal reader settings, such as Wi-Fi. This is a default password set by the manufacturer and cannot be changed by the merchant.\n\nThe default terminal reader password is either `pax9876@@` or `9876`.\n\n**Handpoint Payment App password**\n\nWhen activating the Handpoint Payment App for the first time, merchants are prompted to create a 4-digit passcode for the app.\n\nTo change your Handpoint Payment App password:\n\n1.  Tap the **Settings** cogwheel in the Payments App\n2.  Select **“Security Options”**\n3.  Update your password\n\nIf you forget your password, contact [support@tilled.com](mailto:support@tilled.com) for assistance.\n\nTroubleshooting your PAX terminal readers[](#faq-troubleshooting-your-pax-terminal-readers)\n\n**ERROR MESSAGE**\n\n**DESCRIPTION**\n\n**NEXT STEPS**\n\nReader Not Assigned\n\nThe terminal has not been assigned to your account.\n\nContact [support@tilled.com](mailto:support@tilled.com) for assistance.\n\nServer Not Available\n\nYour internet connection is unstable or unavailable.\n\nRestart your router. If the issue persists and only impacts your terminal reader, contact [support@tilled.com](mailto:support@tilled.com) for assistance.\n\nFailed Card Reader Authentication\n\nThe terminal cannot authenticate the card reader.\n\nRestart your POS application. If the issue persists:\n\n1.  Go to terminal reader settings (password: `pax9876@@` or `9876`)\n2.  Navigate to **Apps** → **Handpoint** → **Storage**\n3.  Select **CLEAR DATA**\n\nIf the issue continues, contact [support@tilled.com](mailto:support@tilled.com).\n\nCloud Connection Unavailable\n\nThe terminal cannot connect to the cloud.\n\nContact [support@tilled.com](mailto:support@tilled.com) for assistance.\n\nWhite-list URLs for PAX terminal readers[](#faq-white-list-urls-for-pax-terminal-readers)\n\nIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.\n\n*   gw1.handpoint.com: port 443\n*   gw2.handpoint.com: port 443\n*   gw3.handpoint.com: port 443\n*   gw4.handpoint.com: port 443\n*   tm.handpoint.com: port 443\n*   cloud.handpoint.com: port 443\n*   hipos.handpoint.com: port 443\n*   express.handpoint.com: port 443\n*   merchant.handpoint.com: port 443\n*   txnfeed.handpoint.com: port 443\n*   network.handpoint.com: port 443\n*   3.14.9.119: port 88 (PAX OS OTA services)\n*   supl.google.com/: port 7275 (GPS assistant location for high precision positioning)\n*   \\*.izatcloud.net/: port 80 (GPS chipset firmware)\n*   \\*.paxstore.us: ports 80, 443 (PAXStore US services)\n*   \\*.amazonaws.com: port 443 (PAXStore cloud file service)\n*   \\*.paxsaas.com: port 8089 (Airviewer server and cloud messaging)\n*   rki.pax.us: port 33519 (Remote Key Injection)\n*   \\*.qq.com: port 443 (GPS geo-location services)\n\nTSYS Valor Terminal Readers\n---------------------------\n\nActivate Valor terminal reader[](#faq-activate-valor-terminal-reader)\n\nOccasionally, you may need to activate the developer terminal reader. Tilled's Integrations team will send you an Activation Code. If you have not received an activation code for your terminal reader, please contact us at [integrations@tilled.com](mailto:integrations@tilled.com).\n\n**Steps to activate a terminal reader**\n\nBefore activating the terminal reader, ensure it is connected to WiFi. Once connected, follow these steps:\n\n1.  Select the **Star** menu (located at the bottom-left corner of the homescreen)\n2.  Use the **down arrow** to navigate to the next screen of menu items\n3.  Select **6\\. Download Package**\n4.  When prompted, the screen will display **“Enter EPI ID”** Enter the Activation Code as follows:\n    1.  Input the Activation Code (also referred to as the EPI ID) and tap **OK**\n    2.  After tapping **OK** the terminal reader will begin downloading the software and provisioning the device\n    3.  This process may take a few seconds to complete\n5.  Once activation is complete, the terminal reader will display **“Waiting... Valor Connect”**\n\nAutomatically batch payments on Valor terminal reader[](#faq-automatically-batch-payments-on-valor-terminal-reader)\n\nValor terminal readers are set to automatically close the daily batch at 7:30 PM EST. For this process to occur, the terminal reader must be turned on and connected to the internet at that time. Failing to meet this condition will prevent the batch from closing automatically, potentially missing the cutoff for next-day funding and causing delays in receiving funds.\n\nRecommendations:\n\n*   Keep your terminal reader on and plugged in overnight to ensure it remains online during the auto-batch time of 7:30 PM EST.\n*   If your terminal reader cannot remain on during the auto-batch time, you will need to manually batch it at the end of each day. Refer to the instructions in [this article](/docs/terminal-readers#faq-manually-batch-payments-on-valor-terminal-reader) for step-by-step guidance on performing a manual batch.\n\nCharge Valor terminal reader[](#faq-charge-valor-terminal-reader)\n\nThe charging port is located on the left side of the terminal reader. When charging properly, the orange light next to the charging port will stay on. If the orange light does not stay on, the terminal reader is not charging properly and you should try using a different charger.\n\n**Charging recommendations**\n\n*   Use the charging cable that the terminal reader came with\n*   Charge the terminal reader whenever possible, as the battery drains quickly\n*   Check that the orange light stays on while charging\n\nConnect Valor terminal reader to WiFi or iPhone hotspot[](#faq-connect-valor-terminal-reader-to-wifi-or-iphone-hotspot)\n\n**To connect to WiFi or iPhone hotspot**\n\n1.  Disconnect from **Valor Connect mode**\n2.  Select the **Star** menu (located at the bottom-left corner of the homescreen)\n3.  Select **2\\. Comm Config**\n4.  Select **1\\. Wifi**\n5.  Choose the desired Wi-Fi network or iPhone hotspot\n6.  Select **Configure**\n7.  Enter the Wi-Fi password (case sensitive)\n8.  Tap **OK** to confirm the password or **Cancel** to return to the previous screen\n9.  Select **Connect**\n\n**Tips for connecting to iPhone hotspot**\n\nTerminal readers typically operate on 2.4GHz Wi-Fi, whereas iPhone hotspots usually run on 5.0GHz. To enable the terminal reader to detect and connect to a iPhone hotspot, ensure that the **Maximize Compatibility** setting is activated in the iPhone's Personal Hotspot settings.\n\nTo enable **Maximize Compatibility** on the iPhone hotspot:\n\n1.  Access the iPhone's **Settings**\n2.  Tap on **Personal Hotspot**\n3.  Ensure that the **Maximize Compatibility** option is switched to **On**\n\nManage Valor Connect mode[](#faq-manage-valor-connect-mode)\n\nValor Connect enables merchants to initiate transactions from their point-of-sale and collect payments using a terminal reader. Always ensure the terminal reader is in Valor Connect mode when processing payments to streamline reconciliation. Payments made outside this mode will still be settled and paid to the merchant; however, they will not be reported on in the API or Dashboard, making reconciliation more challenging.\n\nTo accept card-present transactions, the terminal reader must be in **Valor Connect mode**. When the terminal reader is in this mode, the screen displays the message **\"Waiting… Valor Connect\"**. This indicates that the terminal reader is ready to receive transactions from the point-of-sale.\n\n**Disconnect terminal reader from Valor Connect**\n\nTo update the WiFi settings on the terminal reader, the terminal reader must first be disconnected from Valor Connect mode. To disconnect:\n\n1.  From the **\"Waiting… Valor Connect\"** screen, press the red **X** on the keyboard\n2.  Select **Yes** to disconnect from Valor Connect\n\n**Reconnect terminal reader to Valor Connect**\n\nTo resume accepting card-present transactions, the terminal reader needs to be reconnected to Valor Connect. To reconnect:\n\n1.  From the main screen, tap the **Star** menu\n2.  Select **10\\. Start VC** from the menu\n3.  Tap **Yes** to confirm\n4.  Allow a few seconds for the connection process to complete\n\nOnce successfully connected, the terminal reader screen will display **\"Waiting… Valor Connect\"**.\n\nManually batch payments on Valor terminal reader[](#faq-manually-batch-payments-on-valor-terminal-reader)\n\nTo manually batch a terminal reader:\n\n1.  Disconnect from **Valor Connect mode**\n2.  Select the **Star** menu (located at the bottom-left corner of the homescreen)\n3.  Select **2\\. Settlement**\n4.  Enter the password (last 4 digits of your activation code)\n5.  Select **Yes** on the confirmation prompt\n\nThe terminal reader will now attempt to:\n\n*   Settle the current batch\n*   Print a Batch Summary\n*   Print a Batch Closed confirmation\n\nOnce the payments have been batched, reconnect to **Valor Connect** to continue collecting payments.\n\nTurn Valor terminal reader on/off[](#faq-turn-valor-terminal-reader-onoff)To power the device on or off, press and hold the power button located at the bottom left of the keyboard.Reset a Valor terminal reader[](#faq-reset-a-valor-terminal-reader)\n\n1.  Tap the the **Main** menu (three horizontal lines, located at the bottom of the homescreen)\n2.  Select **2\\. Host Utility**\n3.  Enter the password (last 4 digits of your activation code)\n4.  Select **1\\. Reset Terminal**\n5.  Enter the Valor master password: 82567729\n6.  Select **No** to retain the local database; if you intend to clear the Wi-Fi settings while resetting, choose **Yes** instead\n\nWhite-list URLs for Valor terminal readers[](#faq-white-list-urls-for-valor-terminal-readers)\n\nIf you have a firewall filtering traffic, please whitelist the following URLs and IP addresses to ensure proper connectivity. If no firewall is in place, no action is required.\n\n*   txnlive.valorpaytech.com: port 6789\n*   52.3.127.186\n*   54.196.180.136\n*   52.205.40.220\n\nLast updated on February 3, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchant-billing",
    "title": "Merchant Billing",
    "content": "Merchant Billing\n================\n\nMerchant billing is the process by which fees are calculated and charged to a merchant based on their payment and account activity within a set billing cycle, such as daily, weekly, or monthly. Billing includes fees for processing payments, account maintenance, and additional charges, as defined by the [merchant’s pricing](/docs/merchants/merchant-pricing).\n\nFee Collection[](#fee-collection)\n---------------------------------\n\nA merchant’s [payout type](/docs/payouts#payout-type) determines how merchant fees are collected:\n\n*   **Net payout:** Fees are taken directly from the merchant’s payout before it is deposited.\n*   **Gross payout:** Fees are withdrawn directly from the merchant’s bank account.\n\nBilling Frequency[](#billing-frequency)\n---------------------------------------\n\nA merchant’s billing frequency refers to how often the merchant is billed for fees.\n\n**Paysafe - Flex Billing**\n\nMerchants can be set up on daily, weekly, or monthly billing:\n\n*   Daily billing is the default for flat-rate pricing\n*   Weekly billing is the default for interchange++ pricing\n\nThe billing day for weekly and monthly billing can be customized and will include any fees incurred since the last billing date.\n\n**Paysafe - Processor Billing**\n\nDaily billing is the default for all merchants. Monthly billing requires Risk team approval; if approved, merchants will be billed on the last day of the month.\n\n**TSYS**\n\nMonthly billing is the only option for merchants, occurring around the 10th of each month and covering any fees incurred in the previous calendar month.\n\n### Manage billing frequency[](#manage-billing-frequency)\n\nUpdating the billing frequency through the Dashboard is exclusive to merchants on Flex Billing. For merchants on Processor Billing, please email [support@tilled.com](mailto:support@tilled.com).\n\nTo view and update a merchant’s billing frequency in the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the respective merchant\n3.  Select the **Processing Details** tab\n4.  Locate the **Billing & Payout Schedule** widget for the desired payment method and click the **Edit** icon\n5.  Select the desired billing frequency and anchor day, if applicable\n6.  Click the **Save Billing and Payout Schedule** button\n\n  \n\nFAQs\n----\n\nWhich day of the month are monthly account fees billed?[](#faq-which-day-of-the-month-are-monthly-account-fees-billed)The monthly account fee is posted to the account on the last day of the month. The specific billing day depends on the merchant's billing schedule.How do I interpret TSYS's monthly statement?[](#faq-how-do-i-interpret-tsyss-monthly-statement)\n\nTSYS's merchant statement outlines a merchant’s account activity, fees, and deposits for the statement period.\n\n**Quick facts about the merchant statement**\n\n*   TSYS mails the statement directly to the merchant by the 10th of each month.\n*   The branding is generic - there is no mention of Tilled or the software platform.\n*   TSYS support details are included on the statement. The merchant can reach out to Tilled or TSYS for support.\n\n**Understanding the merchant statement**\n\nThe merchant’s monthly statement is divided into several key sections, each designed to provide specific information about the account's activity and charges. Here's what you'll find in the statement:\n\n_Plan Summary_\n\nThe Plan Summary section outlines the specifics of your merchant plan, including the pricing model and any special terms or conditions applicable to your account. This serves as a quick reference to understand the merchant's rates and fees. Key definitions include:\n\n*   **Base P/I (Per Item):** This is the transaction fee charged on top of interchange costs. It's a fixed fee applied to each transaction processed.\n*   **Base Rate:** This is the discount rate applied on top of interchange costs. It's expressed as a percentage of each transaction amount.\n\n_News For You_\n\nThis section communicates updates, news, or important information relevant to your account. It may include changes in processing fees, compliance updates, or new features available to you.\n\n_Deposits_\n\nThe Deposits section details the transactions processed during the statement period. It includes the date of each transaction, the amount, and the total sum deposited into the merchant’s account after processing.\n\n_Fees_\n\nHere, all fees incurred during the statement period are itemized. This includes transaction fees, monthly account fees, and any other charges applied to the merchant’s account.\n\n  \n![TSYS monthly statement](/_next/image?url=%2Fimages%2Ftsys-monthly-statement.png&w=3840&q=75)\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payouts",
    "title": "Payouts",
    "content": "Payouts\n=======\n\nPayouts represent any deposits and withdrawals against a merchant’s bank account. Merchant payout details are accessible in the **Payouts** tab of the Dashboard and can also be retrieved via the [PayoutsAPI](/api-reference#tag/payouts) endpoint.\n\n  \n![View payouts](/_next/image?url=%2Fimages%2Fpayouts.png&w=3840&q=75)\n\nPayout Speed[](#payout-speed)\n-----------------------------\n\nA merchant’s payout speed indicates the interval between a transaction’s settlement and the initiation of the payout, typically denoted as `T+X` days. `T` signifies the day of transaction settlement, while `X` represents the days until the funds are available for payout.\n\n**PAYOUT SPEED**\n\n**DAY 1**\n\n**DAY 2**\n\n**DAY 3**\n\n**DAY 4**\n\n**DAY 5**\n\nNDF (Next Day Funding)\n\nPayment initiated and payout is sent\n\nFunds arrive in merchant's bank account\n\nT+0\n\nPayment initiated\n\nPayment settles and payout is sent\n\nFunds arrive in merchant's bank account\n\nT+1\n\nPayment initiated\n\nPayment settles\n\nPayout is sent\n\nFunds arrive in merchant's bank account\n\n### View payout speed[](#view-payout-speed)\n\nTo view a merchant’s payout speed in the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the respective merchant\n3.  Select the **Processing Details** tab\n4.  Locate the **Billing & Payout Schedule** widget for the desired payment method\n\nPayout Type[](#payout-type)\n---------------------------\n\nTilled supports both gross and net payouts, depending on the merchant’s processor and payment method:\n\n*   For online payments processed through Paysafe, gross and net funding are available.\n*   For online and in-person payments processed through TSYS, only gross funding is available.\n*   For bank-to-bank payments, only net funding is available.\n\n### Net payouts[](#net-payouts)\n\nIn net payouts, processing fees are deducted from the gross charge amount before depositing funds into the merchant’s account. The merchant receives the net amount, which is the charge amount minus the processing fees. In this case, the processing fees are deducted automatically, and the merchant doesn’t need to separately pay the fees.\n\nFor example, if a customer makes a $100 purchase and the processing fee is 2%, the merchant would receive the net amount of $98 directly, with the $2 processing fee already deducted.\n\n### Gross payouts[](#gross-payouts)\n\nIn gross payouts, the merchant receives the full amount of the payments processed. Processing fees are deducted separately from the merchant’s bank account.\n\nFor example, if a customer makes a $100 purchase and the processing fee is 2%, the merchant would receive the full $100, and the processing fee of $2 would be billed separately.\n\n### View payout type[](#view-payout-type)\n\nTo view a merchant’s payout type in the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the respective merchant\n3.  Select the **Processing Details** tab\n4.  Locate the **Billing & Payout Schedule** widget for the desired payment method\n\nPayout Frequency[](#payout-frequency)\n-------------------------------------\n\nA merchant’s payout frequency refers to how often funds are paid out to their bank account. By default, all merchants are set up for daily payouts (excluding weekends).\n\n### Manage payout frequency[](#manage-payout-frequency)\n\nUpdating the payout frequency through the Dashboard is exclusive to merchants on Flex Billing. For merchants on Processor Billing, please email [support@tilled.com](mailto:support@tilled.com).\n\nTo view and update a merchant’s payout frequency in the Dashboard:\n\n1.  Navigate to **Merchants**\n2.  Select the respective merchant\n3.  Select the **Processing Details** tab\n4.  Locate the **Billing & Payout Schedule** widget for the desired payment method and click the **Edit** icon\n5.  Select the desired payout frequency and anchor day, if applicable\n6.  Click the **Save Billing and Payout Schedule** button\n\nPayout States[](#payout-states)\n-------------------------------\n\n**DASHBOARD STATUS**\n\n**API STATUS**\n\n**DESCRIPTION**\n\n`pending`\n\n`pending`\n\nFunds are accumulating but the payout has not been initiated.\n\n`paid`\n\n`paid`\n\nThe payout has been initiated. Funds will be deposited in the merchant's bank account.\n\n`withdrawn`\n\n`paid`\n\nA negative payout, also known as a collection, has been initiated. Funds will be withdrawn from the merchant's bank account.\n\n`failed`\n\n`failed`\n\nThe payout attempt failed. The payout will be automatically retried.\n\n  \n\nFAQs\n----\n\nA payout was initiated but hasn't arrived in the merchant's bank account. Where is it?[](#faq-a-payout-was-initiated-but-hasnt-arrived-in-the-merchants-bank-account-where-is-it)If the merchant expected a payout and it was sent less than 5 business days ago, the payout is currently being processed by the bank. Banks can delay processing due to weekends and holidays. Once the bank finishes processing the payout, the funds will be deposited into the merchant's account automatically.A payout hasn't been initiated. Why is that?[](#faq-a-payout-hasnt-been-initiated-why-is-that)A merchant's payout may be delayed for the following reasons:\n\n*   **Minimum account balance:** The merchant's account balance doesn't meet the minimum payout amount of $5.00.\n*   **Payout speed:** Due to the merchant's [payout speed](/docs/payouts#payout-speed), their funds have not been released.\n*   **Funding hold:** A funding hold may be placed on a merchant's account if there are issues related to bank verification, suspected fraud, or volume limit exceptions. To release the hold, additional documentation will be requested from the merchant.\n\nHow do disputes, refunds, and ach returns impact the merchant payout?[](#faq-how-do-disputes-refunds-and-ach-returns-impact-the-merchant-payout)Disputes, refunds, and ACH returns each affect a merchant's payout differently, as they represent funds being pulled back from a previously processed transaction. Here’s a breakdown of how each impacts the payout amount:\n\n*   **Disputes:** When a customer initiates a dispute (also known as a chargeback), the disputed amount is deducted from the merchant’s payout. If the dispute is resolved in favor of the merchant, the funds may be returned in a future payout. However, if the dispute is lost, the funds remain permanently deducted, along with any applicable dispute fees.\n*   **Refunds:** When a merchant processes a refund, the refunded amount is subtracted from their next payout. This ensures that funds returned to customers are balanced against the merchant’s available payout amount. If a refund exceeds the current payout, it may result in a negative payout balance, which could be deducted from a future payout or directly from the merchant’s bank account.\n*   **ACH Returns:** An ACH return occurs when a previously settled ACH transaction is reversed, often due to issues like insufficient funds or account closure. The amount of the returned ACH transaction is deducted from the merchant’s payout. If the return exceeds the available payout, similar to refunds, it could result in a negative balance that may be offset in a future payout or withdrawn directly from the merchant’s bank account.\n\n  \nFees associated with disputes, refunds, and ACH returns will continue to be collected based on the merchant’s billing schedule.The Payout Details page includes a 'Balance Carried Forward'. What is that?[](#faq-the-payout-details-page-includes-a-balance-carried-forward-what-is-that)The 'Balance Carried Forward' on the Payout Details page represents any funds from a previous payout cycle that were not included in that payout, often due to timing issues. This can happen for several reasons:\n\n*   **Unsettled funds:** Sometimes, payments or adjustments may not fully settle before the payout is processed. In such cases, these unsettled amounts are carried forward to the next payout period.\n*   **Negative balances:** If the account had a negative balance due to refunds, disputes, or other adjustments, that balance may carry forward until sufficient positive funds are available to offset it.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/disputes",
    "title": "Disputes",
    "content": "Disputes\n========\n\nDisputes occur when a customer challenges a payment on their credit card statement. A customer may challenge a payment for various reasons:\n\n*   **Misunderstanding:** Customer may not recognize a transaction due to unclear statement descriptors.\n*   **Unauthorized charge:** Customer may claim the transaction wasn’t authorized.\n*   **Dissatisfaction:** Customer is unhappy with the product or service received.\n\nMerchants can manage disputes through the Dashboard. Alternatively, a custom dispute management experience can be built using the [DisputesAPI](/api-reference#tag/disputes).\n\nDispute Lifecycle[](#dispute-lifecycle)\n---------------------------------------\n\n### Payment processed[](#payment-processed)\n\nA purchase or payment is processed on a cardholder’s account.\n\n### Dispute initiation[](#dispute-initiation)\n\nIf the cardholder does not recognize the transaction or is dissatisfied, they can initiate a dispute through their bank.\n\n### Investigation[](#investigation)\n\nThe bank reviews the dispute and requests information from the merchant to verify the transaction’s validity. The disputed amount is deducted from the merchant’s account balance, along with any associated fees.\n\nAt this stage the dispute status will update to `X days to respond` in the Dashboard.\n\n### Evidence submission[](#evidence-submission)\n\nOnce the dispute has been posted to the merchant’s account, the merchant has 9 business days to respond with [compelling evidence](/docs/disputes#compelling-evidence) that supports their case.\n\nTo submit evidence through the Dashboard:\n\n1.  Navigate to **Disputes** and select the desired dispute\n2.  Click on **Respond to Dispute** in the alert banner\n3.  Upload compelling evidence\n4.  Click the **Submit** button\n\nAlternatively, dispute evidence can be submitted using the [Create Dispute EvidenceAPI](/api-reference#tag/disputes/post/v1/disputes/%7Bid%7D) endpoint. Once submitted, the dispute status will update to `under_review`.\n\nIf evidence is not provided by the evidence due date, the dispute will be automatically accepted and the dispute status will update to `deadline missed` in the dashboard.\n\n### Resolution[](#resolution)\n\nThe bank evaluates the merchant’s response and supporting evidence before making a final decision. If the dispute is ruled in favor of the merchant, the funds are reversed and the merchant’s account balance is restored. However, if the dispute is upheld, the funds remain debited from the account balance.\n\nDepending on the outcome, the dispute status will update to `won` or `lost`.\n\nCompelling Evidence[](#compelling-evidence)\n-------------------------------------------\n\n“Compelling evidence” for disputes includes any documentation that proves a customer authorized the transaction and received the goods or services as agreed. This evidence varies by product and dispute reason but commonly includes:\n\n*   **Proof of delivery:** This can include shipment tracking information, delivery confirmation, or signed receipts from the customer acknowledging receipt of the goods or services.\n*   **Customer communication:** Any correspondence or communication with the customer that demonstrates their satisfaction with the transaction, such as emails, chat logs, or support tickets.\n*   **Transaction records:** Detailed records of the transaction, including invoices, receipts, order forms, or any other relevant documentation that clearly shows the purchase was authorized and completed by the customer.\n*   **Product or service descriptions:** Descriptions or specifications of the product or service offered, including pricing, features, terms, and conditions, to establish that the customer was aware of what they were purchasing.\n*   **Contracts or agreements:** If applicable, contracts or agreements between the merchant and the customer that outline the terms of the transaction, refund policies, or any other relevant terms and conditions.\n*   **Proof of identity:** In cases where identity verification is crucial, providing evidence that verifies the customer’s identity, such as government-issued identification documents or authentication records.\n\nIf a single card has multiple disputed payments, the bank will require separate submission packets for each payment.\n\nDispute States[](#dispute-states)\n---------------------------------\n\nThe dispute status is updated throughout the dispute lifecycle. You can actively monitor these updates by setting up webhooks or configuring your email preferences to receive real-time notifications about key status changes.\n\nEmail notifications are sent when action is required from the merchant and upon dispute resolution.\n\n**DASHBOARD STATUS**\n\n**API STATUS**\n\n**DESCRIPTION**\n\n**NEXT STEPS**\n\n`X days to respond`\n\n`warning_needs_response`\n\nCustomer is inquiring about the transaction. This is known as a retrieval or inquiry.\n\nEvidence is submitted automatically on behalf of the merchant. Most disputes will skip this status.\n\n`inquiry under review`\n\n`warning_under_review`\n\nEvidence has been submitted in response to the inquiry.\n\nNo action needed.\n\n`inquiry closed`\n\n`warning_closed`\n\nIf a chargeback was not opened within 120 days of the inquiry, the inquiry will be closed.\n\nNo action needed.\n\n`deadline missed`\n\n`warning_closed`\n\nMerchant did not submit evidence in response to the inquiry prior to the evidence due date.\n\nNo action needed.\n\n`X days to respond`\n\n`needs_response`\n\nCustomer has officially disputed the transaction. This is known as a chargeback.\n\nMerchant needs to submit evidence.\n\n`under review`\n\n`under_review`\n\nMerchant has submitted evidence in response to the dispute.\n\nNo action needed.\n\n`won`\n\n`won`\n\nThe dispute has been won and a reversal was initiated.\n\nNo action needed.\n\n`lost`\n\n`lost`\n\nThe dispute was lost.\n\nNo action needed.\n\n`deadline missed`\n\n`closed`\n\nMerchant did not submit evidence in response to the dispute prior to the evidence due date.\n\nNo action needed.\n\nPrevent Disputes[](#prevent-disputes)\n-------------------------------------\n\nMerchants can take various steps to protect themselves from disputes:\n\n*   **Utilize clear statement descriptors:** Ensure statement descriptors are clear and concise to minimize customer confusion and prevent disputes from unrecognized charges.\n*   **Provide detailed descriptions:** Offer comprehensive information on products and services to set accurate expectations and reduce misunderstandings.\n*   **Resolve customer issues promptly:** Address and resolve customer concerns quickly to avoid escalations to dispute filings.\n*   **Verify AVS and CVV for online transactions:** Confirm the cardholder’s presence by verifying the address (AVS) and Card Verification Value (CVV), reducing the risk of fraud-related disputes. By default, AVS and CVV checks must pass to process a payment through Tilled.\n*   **Define refund policies and Terms of Service clearly:** Effectively communicate your policies to help customers understand their options, preventing disputes related to policy misunderstandings.\n\nLast updated on October 1, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/reporting",
    "title": "Reporting",
    "content": "Reporting\n=========\n\nTilled's preconfigured reports help you manage business operations and reconcile account activity. Use the table below to identify the most suitable report for your specific task.\n\n**TASK**\n\n**SUGGESTED REPORT**\n\n*   View payment activity\n*   Analyze payment failures\n\nPayments\n\n*   View all fees applied to the merchant account\n*   Analyze merchant's processing costs\n\nMerchant Fees\n\n*   Reconcile payouts against bank deposits\n*   View details for multiple payouts\n*   View merchant fees billed\n\nPayouts\n\n*   View dispute activity\n*   Analyze dispute win rates\n\nDisputes\n\n*   View summary of a merchant's processing activity\n*   Compare processing activity across merchants\n\nProcessing Summary\n\n*   Analyze interchange costs\n*   Optimize merchant pricing\n\nInterchange Details\n\nGenerate a Report[](#generate-a-report)\n---------------------------------------\n\n[Dashboard](#dashboard)[API](#api)\n\nTo download a preconfigured report via the Dashboard:\n\n1.  Navigate to the **Reports** page\n2.  Locate the report you wish to download and click the **Generate Report** button\n3.  Apply report filters and click the **Generate Report** button\n4.  Click the **Download** icon once the report has completed downloading\n\n### Report customization\n\nReports can be filtered by account, timezone, and date range. Column selection options are also available for certain reports.\n\n**Account filter**\n\nReports can be downloaded for a single account or across your entire portfolio.\n\n**Timezone filter** - _coming soon_\n\nReports downloaded through the Dashboard default to the user's local timezone. Soon, users will have the ability to adjust the timezone to Pacific, Mountain, Central, or Eastern time.\n\n**Date range filter**\n\nReports can be filtered on predefined date ranges or a custom date selection. The selected dates are inclusive. For example, selecting a date range of January 1, 2025 – January 31, 2025 will include data from 12:00 a.m. on January 1 through 11:59 p.m. on January 31 in the respective time zone.\n\n**Custom columns** - _coming soon_\n\nUsers can customize the columns in the Payments and Payout Details reports. Available options include default columns, all columns, or custom columns. If custom columns are selected, users can choose which data to include in the report. Selected columns will be saved and automatically applied the next time the report is downloaded.\n\nReport Details[](#report-details)\n---------------------------------\n\n### Payments report[](#payments-report)\n\nℹ️\n\nThe report details below reflect upcoming changes to Tilled's downloadable Payments report, expected to be released in April 2025.\n\nThe Payments report is useful for tracking payment activity and analyzing payment failures. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `payments_summary_2`.\n\n**Default columns**\n\n**FIELD**\n\n**DETAILS**\n\n`merchant_account_id`\n\nUnique merchant account id\n\n`merchant`\n\nMerchant name\n\n`transaction_date`\n\nDate transaction was processed\n\n`transaction_type`\n\nType of transaction, such as a charge or refund\n\n`payment_method`\n\nPayment method used for the transaction\n\n`transaction_id`\n\nUnique charge or refund id\n\n`transaction_status`\n\nStatus of the charge or refund\n\n`failure_code`\n\nFailure code, if payment failed\n\n`failure_description`\n\nFailure description, if payment failed\n\n`authorized`\n\nAmount authorized\n\n`captured`\n\nAmount captured\n\n`fees`\n\nTotal amount of associated fees\n\n`net`\n\nNet amount of the payment; `net` = `captured` minus `fees` plus `tips`\\*\n\n`related_charge_id`\n\nRelated charge id, if payment was a refund\n\n`payout_id`\n\nUnique payout id\n\n`payout_date`\n\nDate payout was initiated\n\n\\*Accounts processing in-person payments can include the tip amount when customizing report columns.\n\n### Payout Details report[](#payout-details-report)\n\nℹ️\n\nThe report details below reflect upcoming changes to Tilled's downloadable Payout Details report, expected to be released in March 2025.\n\nThe Payout Details report is useful for reconciling individual transactions within a payout. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `payouts_detail_1`.\n\n**Default columns**\n\n**FIELD**\n\n**DESCRIPTION**\n\n`merchant_account_id`\n\nUnique merchant account id\n\n`merchant`\n\nMerchant name\n\n`payout_date`\n\nDate payout was initiated\n\n`payout_id`\n\nUnique payout id\n\n`transaction_date`\n\nDate transaction was processed\n\n`payment_method`\n\nPayment method associated with the transaction\n\n`source_id`\n\nUnique source id\n\n`transaction_type`\n\nType of transaction, such as a charge, refund, dispute, or adjustment\n\n`description`\n\nDetailed description of the transaction\n\n`gross`\n\nGross amount of the transaction\n\n`fees`\n\nTotal fees withdrawn from the payout that are associated with the transaction\n\n`net`\n\nNet amount of the transaction; `net` = `gross` minus `fees`\n\n### Payout Summary report[](#payout-summary-report)\n\nℹ️\n\nThe report details below reflect Tilled's new downloadable Payout Summary report, expected to be released in March 2025.\n\nThe Payout Summary report is useful for tracking payout activity and reconciling bank deposits. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `payouts_summary_3`.\n\n**Available columns**\n\n**FIELD**\n\n**DESCRIPTION**\n\n`merchant_account_id`\n\nUnique merchant account id\n\n`merchant`\n\nMerchant name\n\n`payout_date`\n\nDate payout was initiated\n\n`payout_id`\n\nUnique payout id\n\n`gross`\n\nSum of all transactions associated with the payout, include charges, refunds, disputes, and adjustments\n\n`fees`\n\nTotal fees withdrawn from the payout\n\n`net`\n\nPayout amount deposited or withdrawn from the merchant's bank account; `net` = `gross` minus `fees`\n\n### Merchant Fees report[](#merchant-fees-report)\n\nThe Merchant Fees report is useful for tracking posted fees, analyzing total processing costs, and understanding the amount due in the merchant’s next billing cycle. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `fees_summary_1`.\n\n**FIELD**\n\n**DESCRIPTION**\n\n`merchant_name`\n\nMerchant name\n\n`account_id`\n\nUnique merchant account id\n\n`balance_transaction_id`\n\nUnique balance transaction id\n\n`balance_transaction_created_at`\n\nDate the fee was created\n\n`source_id`\n\nUnique id of fee source, such as the charge or refund id\n\n`source_type`\n\nSource of balance transaction, such as the charge or refund\n\n`payout_id`\n\nUnique payout id\n\n`amount`\n\nAmount of the fee\n\n`description`\n\nFee description\n\n`fee_type`\n\nFee type, such as discount, transaction, or pass-through\n\n`fee_subtype`\n\nFee subtype, such as the pass-through fee type\n\n`payment_method_type`\n\nPayment method used for the transaction\n\n`card_brand`\n\nCard brand, if applicable\n\n`payment_intent_id`\n\nUnique id of the payment intent\n\n`charge_amount_captured`\n\nAmount captured\n\n### Interchange Details report[](#interchange-details-report)\n\nℹ️\n\nThe report details below reflect upcoming changes to Tilled's downloadable Interchange Details report, expected to be released in March 2025.\n\nThe Interchange Details report is useful for analyzing interchange costs and identifying factors that impact interchange qualification. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `interchange_detail_2`.\n\n**Factors impacting interchange costs**\n\n*   **Payment method:** Online payments generally have higher interchange costs than in-person payments.\n*   **Funding type:** Credit cards typically cost more to process than debit cards.\n*   **Card type:** Consumer and international cards often incur higher rates than business or commercial cards.\n*   **Settlement time:** Transactions settled more than two days after authorization may result in higher costs.\n*   **Level 2/3 data:** Payments missing level 2/3 data qualify only for level 1 rates.\n*   **AVS/CVV data:** Incorrect or missing avs/cvv data can lead to higher interchange fees.\n*   **Merchant category code:** Certain MCCs are subject to higher interchange rates.\n\n**Available columns**\n\n**FIELD**\n\n**DESCRIPTION**\n\n`software_platform`\n\nSoftware platform name\n\n`merchant`\n\nMerchant name\n\n`merchant_account_id`\n\nUnique merchant account id\n\n`processor`\n\nProcessor through which payment was routed\n\n`transaction_id`\n\nUnique charge or refund id\n\n`transaction_type`\n\nType of transaction\n\n`payment_method`\n\nPayment method type, such as online or in-person\n\n`transaction_date`\n\nDate transaction was processed\n\n`settlement_date`\n\nDate transaction settled\n\n`funding_type`\n\nCard funding type, such as debit or credit\n\n`card_brand`\n\nCard brand\n\n`card_bin`\n\nCard BIN\n\n`interchange_program`\n\nInterchange program\n\n`avs_address`\n\nResults of the AVS address check\n\n`avs_zip_code`\n\nResults of the AVS zip code check\n\n`cvv`\n\nResults of the CVV/CVC check\n\n`level_2_3`\n\nIndicates whether level 2/3 data was provided\n\n`interchange_discount_rate`\n\nInterchange discount rate; the rate does not include any markups\n\n`interchange_transaction_fee`\n\nInterchange transaction fee; the amount does not include any markups\n\n`transaction_amount`\n\nAmount of the charge or refund\n\n`total_interchange_cost`\n\nTotal interchange cost = (<code>transaction\\_amount</code>\\*<code>interchange\\_discount\\_rate</code>) plus <code>interchange\\_transaction\\_fee</code>\n\n### Processing Summary report[](#processing-summary-report)\n\nThe Processing Summary report is useful for comparing processing activity across merchants. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `processing_summary_1`.\n\n**FIELD**\n\n**DETAILS**\n\n`merchant_name`\n\nMerchant name\n\n`account_id`\n\nUnique merchant account ID\n\n`start_at`\n\nStart date of the selected time period\n\n`end_at`\n\nEnd date of the selected time period\n\n`succeeded_charge_volume`\n\nVolume of successful charges\n\n`succeeded_charge_count`\n\nNumber of successful charges\n\n`failed_charge_volume`\n\nVolume of failed charges\n\n`failed_charge_count`\n\nNumber of failed charges\n\n`succeeded_refund_volume`\n\nVolume of successful refunds\n\n`succeeded_refund_count`\n\nNumber of successful refunds\n\n`won_dispute_volume`\n\nVolume of disputes, where dispute was ruled in favor of the merchant\n\n`won_dispute_count`\n\nNumber of disputes, where dispute was ruled in favor of the merchant\n\n`lost_dispute_volume`\n\nVolume of disputes, where dispute was ruled in favor of the cardholder\n\n`lost_dispute_count`\n\nNumber of disputes, where dispute was ruled in favor of the cardholder\n\n`total_dispute_volume`\n\nTotal volume of disputes\n\n`total_dispute_count`\n\nTotal number of disputes\n\n`charge_fee_volume`\n\nVolume of charge-related fees\n\n`refund_fee_volume`\n\nVolume of refund-related fees\n\n`dispute_fee_volume`\n\nVolume of dispute-related fees\n\n`administrative_fee_volume`\n\nVolume of administrative-related fees\n\n### Disputes report[](#disputes-report)\n\nThe Disputes report is useful for analyzing dispute activity, including dispute reasons. If generating via the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint, set `type` = `disputes_summary_1`.\n\n**FIELD**\n\n**DETAILS**\n\n`account_id`\n\nUnique merchant account id\n\n`merchant_name`\n\nMerchant name\n\n`dispute_id`\n\nUnique dispute id\n\n`created_at`\n\nDate dispute was created\n\n`currency`\n\nCurrency of the original payment\n\n`dispute_amount`\n\nAmount being disputed by the cardholder\n\n`reason_description`\n\nReason for the dispute, as provided by the cardholder\n\n`status`\n\nStatus of the dispute when the report is generated\n\n`closing_at`\n\nDeadline to submit evidence in response to the dispute\n\n`reversed_at`\n\nDate dispute was reversed, if applicable\n\n`charge_id`\n\nUnique id of the original payment\n\n`charge_amount_captured`\n\nAmount of the original payment\n\n`charge_refunded`\n\nWhether the payment was refunded\n\n`amount_refunded`\n\nAmount of the refund, if payment was refunded\n\nFAQs\n----\n\nHow do I reconcile a merchant payout?[](#faq-how-do-i-reconcile-a-merchant-payout)Payouts can be reconciled directly in the Dashboard or using a CSV report.\n\n**Reconcile using the Dashboard**\n\n1.  Navigate to the **Payouts** page\n2.  Select the payout you want to reconcile\n3.  Review transactions associated with the payout\n\n**Reconcile using a CSV report**\n\n1.  [Generate](/docs/reporting#generate-a-report) a **Payout** report\n2.  Open the CSV file (assuming you are using Excel for the following steps)\n3.  Select the **Custom Sort** option\n4.  Sort by **payout ID**, followed by **source ID**\n5.  Review transactions associated with the payout\n\nAre commission reports available in the Dashboard?[](#faq-are-commission-reports-available-in-the-dashboard)Commission reports are not currently available in the Dashboard. For more details, refer to our [Commissions guide](/docs/commissions#commission-reports).How do I determine whether a payment has been batched?[](#faq-how-do-i-determine-whether-a-payment-has-been-batched)\n\nThe batch status is not currently exposed in the Dashboard or API. To determine the batch status manually, you can compare the `captured_at` property of a charge with the most recent batch time.\n\n    const capturedAt = new Date(charge.captured_at);\n    \n    const now = new Date();\n    \n    // Note: we need this conditional to deal with charges that occur between 11:59PM\n    // and 12:00AM\n    const batchTime = now.getUTCHours() === 18 && now.getMinutes() === 59 ? (\n    new Date()\n      .setUTCHours(18, 59, 0, 0) // 18:59:00 represents an 11:59 EST batch time\n    ) : (\n    new Date()\n      .setDate(now.getDate() - 1)\n      .setUTCHours(18, 59, 0, 0)\n    );\n    \n    const hasBatched = capturedAt > batchTime;\n\nHow do I retrieve all transactions associated with a single payout via the API?[](#faq-how-do-i-retrieve-all-transactions-associated-with-a-single-payout-via-the-api)To retrieve all transactions associated with a single payout, use the [List all Balance TransactionsAPI](/api-reference#tag/balance-transactions/GET/v1/balance-transactions) endpoint and pass the `payout_id` in the query parameters.\n\nLast updated on March 12, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/commissions",
    "title": "Commissions",
    "content": "Commissions\n===========\n\nCommissions refer to the revenue generated from processing payments with Tilled. Merchant fees eligible for commissions, along with the software platform’s buy-rates and revenue share percentage, are outlined in the software platform’s Payment Processing Agreement.\n\nOverview[](#overview)\n---------------------\n\n### Commission reports[](#commission-reports)\n\n*   **Recipients:** Reports are emailed to the software platform’s primary commissions contact.\n*   **Frequency:** Reports are sent before the commission payout.\n*   **Format:** Reports are shared as Excel files.\n\n### Commission payouts[](#commission-payouts)\n\n*   **Schedule:** Commissions are paid on the last day of the month following the month of payment processing activity. For instance, commissions for activity in April are paid on May 31.\n*   **Method:** Commissions are sent via ACH to the bank account provided during onboarding.\n\n### Calculating commissions[](#calculating-commissions)\n\nThe commission equation for each fee type is:\n\n`software platform commission` = (`merchant revenue` - `software platform cost`) \\* `software platform revenue share`\n\nIf the merchant’s revenue is less than the software platform’s cost, the software platform is responsible for the full difference. For instance, if the merchant’s revenue is $100 and the software platform’s cost is $150, the software platform is responsible for the $50 difference.\n\nKey Terms[](#key-terms)\n-----------------------\n\n**TERM**\n\n**DEFINITION**\n\nSoftware platform’s buy-rate\n\nThe software platform’s cost structure as defined in the Schedule A. Also known as a fee schedule.\n\nMerchant pricing\n\nThe merchant’s cost structure as defined in the merchant application and Dashboard. Also known as a merchant fee schedule.\n\nSoftware platform cost\n\nThe total cost incurred by the software platform, calculated using their buy-rate.\n\nMerchant revenue\n\nThe total revenue generated off the merchant, calculated using their pricing. Also known as the gross revenue.\n\nRevenue share\n\nThe portion of net revenue (merchant revenue minus software platform’s cost) distributed to the software platform.\n\nCommission Report v2[](#commission-report-v2)\n---------------------------------------------\n\nTilled is introducing a new commission report that uses automated calculations to eliminate manual errors and provide more detailed insights.\n\nℹ️\n\nThe v2 report is in beta. If you are interested in joining the beta, please reach out to [support@tilled.com](mailto:support@tilled.com).\n\n### Report structure[](#report-structure)\n\n**Partner Summary**\n\nThe **Partner Summary** tab provides an overview of your commission activity, broken down by payment method, including: gross processing volume, merchant and transaction count, total revenue, total costs, and net commissions paid.\n\n**Card Summary**\n\nThe **Card Summary** tab details the revenue, costs, and net commissions by merchant for all online and in-person card volume. This is a flexible, pivot table view where you can adjust filters and columns as needed.\n\n**Bank-to-Bank Summary**\n\nThe **Bank-to-Bank Summary** tab details the revenue, costs, and net commissions by merchant for all bank-to-bank volume. This is a flexible, pivot table view where you can adjust filters and columns as needed.\n\n**Transaction Details**\n\nThe **Transaction Details** tab includes transaction-level calculation details.\n\n**Glossary**\n\nThe **Glossary** tab defines all fields within the **Transaction Details** tab.\n\nLast updated on March 12, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/white-label",
    "title": "White-Label",
    "content": "White-Label\n===========\n\nSoftware platforms can white-label Tilled to maintain brand consistency across the merchant journey. White-label settings are applied across all product areas, ensuring zero break-through interactions.\n\nWhite-Label Settings[](#white-label-settings)\n---------------------------------------------\n\nThe table below outlines all customizable white-label settings.\n\n**CONFIGURATION**\n\n**DESCRIPTION**\n\nSubdomain\n\nThe Dashboard, merchant application, and payment links are hosted on your custom subdomain. Transactional emails are sent from the paymentsonline.io domain.\n\n**Logos**\n\nLight mode logo\n\nThe light mode logo is used against light backgrounds, such as the merchant application and transactional emails.\n\nDark mode logo\n\nThe dark mode logo is used against dark backgrounds, such as the sidebar navigation in the Dashboard.\n\n**Brand Colors**\n\nPrimary color\n\nThe primary color is used for the sidebar navigation in the Dashboard. A darker color is recommended for optimal contrast.\n\nAccent color\n\nThe accent color is used for buttons, hyperlinks, and icons against light backgrounds. A darker color is recommended for optimal contrast.\n\n**Merchant Support Details**\n\nSupport phone\n\nThe merchant support phone number is exposed in the Dashboard. If a phone number is not provided, Tilled's will be used.\n\nSupport email\n\nThe merchant support email is exposed in the Dashboard and transactional emails. If a support email is not provided, Tilled's will be used.\n\nHelp center\n\nThe merchant help center is exposed in the Dashboard and transactional emails. If a merchant help center is not linked, Tilled's will be used.\n\nManage White-Label[](#manage-white-label)\n-----------------------------------------\n\nWhite-label settings can be easily managed through the Partner Dashboard. Software platforms can:\n\n*   Configure white-label settings\n*   Access the white-labeled Dashboard\n*   Preview a white-labeled transactional email\n\n  \n![Manage white-label](/_next/image?url=%2Fimages%2Fwhite-label.png&w=3840&q=75)\n\n### Configure white-label settings[](#configure-white-label-settings)\n\nOnly Owner and Admin users can edit white-label settings.\n\nTo configure your white-label settings:\n\n1.  Navigate to **Account** > **White-Label**\n2.  Click the **Manage White-Label** button and select **Edit Settings**\n3.  Customize your subdomain, brand colors, support details, and upload your logos\n4.  Click the **Save** button\n\n### Preview white-labeled Dashboard[](#preview-white-labeled-dashboard)\n\nThe white-labeled Dashboard is also accessible to anyone by entering the white-labeled domain into a web browser.\n\nTo preview your white-labeled Dashboard:\n\n1.  Navigate to **Account** > **White-Label**\n2.  Click the **Manage White-Label** button and select **Preview Dashboard**\n3.  Login using your credentials\n\n### Preview white-labeled transactional emails[](#preview-white-labeled-transactional-emails)\n\nTo preview a white-labeled email:\n\n1.  Navigate to **Account** > **White-Label**\n2.  Click the **Manage White-Label** button and select **Preview Email**\n\n  \n\nFAQs\n----\n\nThe white-label settings have been saved, but they're not reflecting in the Dashboard or email previews. How do I troubleshoot this?[](#faq-the-white-label-settings-have-been-saved-but-theyre-not-reflecting-in-the-dashboard-or-email-previews-how-do-i-troubleshoot-this)For white-label settings to be applied, a custom subdomain, logos, and colors must be provided. Double check that each item was provided and update if not.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/users",
    "title": "Users",
    "content": "Users\n=====\n\nTilled supports the following user roles:\n\n*   **Owner:** Full access to all features and settings.\n*   **Admin:** Manages accounts, users, and reports with edit capabilities.\n*   **Analyst:** Primarily view-only access to financial and reporting features.\n*   **Developer:** Focused on technical configurations.\n*   **View-only:** Can view but not modify data.\n\nUser Permissions Matrix[](#user-permissions-matrix)\n---------------------------------------------------\n\n**ADMIN**\n\n**ANALYST**\n\n**DEVELOPER**\n\n**VIEW ONLY**\n\nRead\n\nUpdate\n\nRead\n\nUpdate\n\nRead\n\nUpdate\n\nRead\n\nUpdate\n\n**Merchant Management**\n\nMerchant accounts\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✓\n\n✓\n\n✗\n\nPricing templates\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✗\n\n✓\n\n✗\n\n**Reporting**\n\nPayments\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✓\n\n✓\n\n✗\n\nPayouts\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✗\n\n✓\n\n✗\n\nDisputes\n\n✓\n\n✓\n\n✓\n\n✓\n\n✓\n\n✓\n\n✓\n\n✗\n\nCSV reports\n\n✓\n\n✓\n\n✓\n\n✓\n\n✓\n\n✓\n\n✓\n\n✗\n\n**Account**\n\nMerchant preferences\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✗\n\n✓\n\n✗\n\nWhite-label\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✓\n\n✓\n\n✗\n\nUsers\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✗\n\n✓\n\n✗\n\nUser invites\n\n✓\n\n✓\n\n✗\n\n✗\n\n✗\n\n✗\n\n✗\n\n✗\n\n**Developers**\n\nAPI keys\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✓\n\n✗\n\n✗\n\nWebhook endpoints\n\n✓\n\n✓\n\n✓\n\n✗\n\n✓\n\n✓\n\n✗\n\n✗\n\nManage Users[](#manage-users)\n-----------------------------\n\n[Dashboard](#dashboard)[API](#api)\n\nYou can manage users for your account and connected accounts, such as software platforms or merchants. To manage users for your account, navigate to **Account** > **Users**.\n\nTo manage users for a connected account, navigate to the list of connected accounts, locate the respective account, and proceed to the **Users** tab.\n\n  \n![Invite account user](/_next/image?url=%2Fimages%2Finvite-account-user.png&w=3840&q=75)\n\n### Invite user\n\nTo invite a user:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Invite User** button\n3.  Enter the user’s email address and select their role\n\nThe user will receive an email notification to set up their account.\n\n### Resend user invitation\n\nTo resend a user invitation:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Kebab Menu** icon\n3.  Select **Resend Invitation**\n\nThe user will receive an email notification to set up their account.\n\n### Update a user's role\n\nTo update a user's role:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Kebab Menu** icon\n3.  Select **Edit Role**\n4.  Select the user's new role\n5.  Click the **Save User** button\n\nThe user's role will be updated immediately.\n\n### Reassign account owner\n\nTo reassign the account's owner, reach out to [support@tilled.com](mailto:support@tilled.com).\n\n### Delete user\n\nTo delete a user:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Kebab Menu** icon\n3.  Select **Revoke Access**\n\nThe user's access will be revoked immediately.\n\n  \n\nFAQs\n----\n\nHow do I reset my password?[](#faq-how-do-i-reset-my-password)\n\nTo reset your password, click **Forgot Password?** on the sign in page.\n\n  \n![Reset password](/_next/image?url=%2Fimages%2Fsign-in.png&w=3840&q=75)\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/notifications",
    "title": "Notifications",
    "content": "Notifications\n=============\n\nTilled supports a variety of automated email notifications to help software platforms and merchants stay informed about important events. These notifications cover merchant onboarding, account updates, and disputes.\n\nEmail Matrix[](#email-matrix)\n-----------------------------\n\nThe table below outlines the types of transactional emails supported by Tilled, their triggers, and whether they are supported for merchants, software platforms, or resellers.\n\n**TRIGGER**\n\n**MERCHANTS**\n\n**SOFTWARE PLATFORMS**\n\n**RESELLERS**\n\n**Core**\n\nNew user invite\n\n✓\n\n✓\n\n✓\n\nForgotten password\n\n✓\n\n✓\n\n✓\n\nPassword reset successfully\n\n✓\n\n✓\n\n✓\n\n**Onboarding**\n\nInvite to access merchant application\\*\n\n✓\n\n✗\n\n✗\n\nMerchant application submitted\n\n✓\n\n✓\n\n✗\n\nApplication signature reminder\n\n✓\n\n✓\n\n✗\n\nMerchant application approved\n\n✓\n\n✓\n\n✗\n\nMerchant application declined\n\n✓\n\n✓\n\n✗\n\n**Additional information requests**\n\nNew information request\n\n✓\n\n✓\n\n✗\n\nInformation request reminder\n\n✓\n\n✓\n\n✗\n\n**Disputes**\n\nNew retrieval request\n\n✓\n\n✓\n\n✗\n\nNew dispute\n\n✓\n\n✓\n\n✗\n\nDispute won\n\n✓\n\n✓\n\n✗\n\nDispute lost\n\n✓\n\n✓\n\n✗\n\n\\*The invitation email granting access to the merchant application is not sent automatically. It must be explicitly triggered by the user during the application creation process, whether initiated through the Dashboard or the API. If onboarding emails are disabled, the invitation email can still be triggered.\n\nManage Email Notifications[](#manage-email-notifications)\n---------------------------------------------------------\n\n### Personal email notifications[](#personal-email-notifications)\n\nTo update your personal email preferences:\n\n1.  Navigate to **Account** > **User Profile** in the Dashboard\n2.  Adjust your email preferences by category\n\nCore emails cannot be disabled.\n\n### Default email notifications[](#default-email-notifications)\n\nDefault email notifications can be configured and will apply to all users on the partner account and associated merchants. For detailed steps, refer to the [Merchant Preferences guide](/docs/merchants/merchant-preferences).\n\nLast updated on March 12, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/webhooks/overview",
    "title": "Webhooks Overview",
    "content": "Webhooks Overview\n=================\n\n[WebhooksAPI](/api-reference#tag/webhook-endpoints) provide real-time notifications to your application about events occurring on Tilled's platform. This ensures applications can react promptly to events as they happen.\n\nWithin a Tilled account, some actions happen directly after you ask for them. For example, if you add a new customer, you immediately get back information about that customer. Those instances don’t trigger a webhook, however, other events within an account are asynchronous, occurring at a later time and not as a direct result of your code execution.\n\n**Common asynchronous events**\n\n*   Successful processing of a pending ACH debit charge\n*   Notifications regarding payouts\n*   Changes in connected account statuses, which are particularly relevant during the onboarding process\n\nFor these asynchronous events, Tilled notifies your integration about status changes, enabling your system to take appropriate follow-up actions. The specific responses of your webhook endpoint can vary based on the event type.\n\n**Examples of actions triggered by webhooks**\n\n*   Updating a customer’s membership status\n*   Emailing a receipt to a customer\n*   Signaling that an order is ready for fulfillment\n\nHow Webhooks Work[](#how-webhooks-work)\n---------------------------------------\n\nEvent details are sent in JSON format, with Tilled issuing a POST request to your designated notification URL. It’s expected that your server acknowledges webhook notifications with a 2xx response code to confirm successful receipt.\n\nTilled webhook endpoints are configured at the parent account level, ensuring that notifications encompass events across all connected accounts.\n\nRetry Behavior[](#retry-behavior)\n---------------------------------\n\nThe current retry policy for webhook deliveries involves attempting to send the webhook 6 times over a span of approximately 65 minutes. The approximate intervals between each attempt are as follows:\n\n*   10 seconds for the first retry\n*   30 seconds for the second retry\n*   2 minutes for the third retry\n*   10 minutes for the fourth retry\n*   52 minutes for the final retry\n\nLast updated on February 5, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/webhooks/how-to-set-up-webhooks",
    "title": "How to Set Up Webhooks",
    "content": "How to Set Up Webhooks\n======================\n\nThis guide outlines how to configure and verify webhooks.\n\n### Identify the events to monitor[](#identify-the-events-to-monitor)\n\nIdentify the specific [events](/docs/webhooks/webhook-events) and their associated data objects your webhook endpoint will need to interpret.\n\n### Create a webhook endpoint[](#create-a-webhook-endpoint)\n\nSet up an HTTP endpoint on your local server capable of handling unauthenticated POST requests. You can utilize tools like [ngrok](https://ngrok.io/) to make your local server accessible online for testing purposes.\n\n### Configure webhook endpoints[](#configure-webhook-endpoints)\n\nTo configure webhooks through the Partner Dashboard:\n\n1.  Navigate to **Developers > Webhooks** and click the **Create Endpoint** button\n2.  Enter a webhook description and URL\n3.  Select which events the webhook should trigger; specifying `*` will enable all events\n4.  Click the **Create** button\n\nWebhook endpoints can also be configured using the [Webhook EndpointsAPI](/api-reference#tag/webhook-endpoints).\n\n### Handle requests from Tilled[](#handle-requests-from-)\n\nYour endpoint must be configured to read event objects for the type of event notifications you want to receive. Tilled sends events to your webhook endpoint as part of a POST request with a JSON payload.\n\n*   **Inspect event objects:** Each event is delivered as an object containing an `id`, `account_id`, `type` and related resource information within a nested data structure. Ensure your endpoint verifies the event type and decodes the payload accordingly.\n*   **Acknowledge receipt:** Immediately return a 2xx series response to confirm receipt of each event, before any complex processing that might delay the response. For instance, send a 200 response before marking an order as paid in your system.\n*   **Understand built in retries:** Tilled automatically retries sending webhook events for non-2xx responses. Events not acknowledged with a 2xx response are considered failed, but you can query missed events to update your records accordingly.\n\n### Check webhook signatures[](#check-webhook-signatures)\n\nSecure your webhook data by verifying signatures provided in the request headers. This step confirms the authenticity of the webhook requests, ensuring they are indeed from Tilled and not a third-party impersonating Tilled.\n\n**1\\. Get the webhook endpoint’s secret:** You can get this secret key from the Dashboard or API when you first configure the endpoint.\n\n**2\\. Get the header values from the POST:** Tilled employs SHA-256 hash-based message authentication codes (HMAC) for this purpose, with a focus on the “v1” signature scheme as the only valid method for live signatures. Each webhook sent by Tilled is signed, including a UTC timestamp and one or more signatures in the `tilled-signature` header.\n\n    let tilledSignature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\"\n    const details = tilledSignature.split(',').reduce(\n    (accum, item) => {\n    const kv = item.split('=');\n    if (kv[0] === 't') {\n     accum.timestamp = kv[1];\n    }\n    if (kv[0] === scheme) {\n     accum.signature = kv[1];\n    }\n    return accum;\n    },\n    {\n    timestamp: -1,\n    signature: -1,\n    }\n    );\n\n**3\\. Prepare the signed payload:** Combine the timestamp (as a string), a period (.), and the actual JSON payload from the request body to create the signed payload string.\n\n    let payload = details.timestamp + \".\" + JSON.stringify(webhookBody);\n\n**4\\. Identify the expected signature:** Use the SHA256 hash function to create an HMAC. The signing secret of the endpoint is your key, and the `signed_payload` string is your message.\n\n    let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex);\n\n**5\\. Compare the signatures:** Match the expected signature against the one(s) provided in the header. To validate the timing, check the difference between the current timestamp and the received timestamp, ensuring it’s within your acceptable range. For security against timing attacks, employ a constant-time string comparison method to compare the expected signature with each received signature.\n\n    if (expectedSignature === details.signature) {\n    console.log(\"Signature match with tilled_signature\");\n    }\n\nRefer to the following example:\n\n    // Can be found in the webhook payload header\n    let tilled_signature = \"t=1614049713663,v1=8981f5902896f479fa9079eec71fca01e9a065c5b59a96b221544023ce994b02\"\n    // Can be found in the payload\n    let body = JSON.stringify(webhook.body);\n    \n    const details = parseHeader(tilled_signature, \"v1\");\n    \n    console.log(details);\n    \n    if (!details || details.timestamp === -1) {\n    try {\n    throw new Error(\"Unable to extract timestamp and signature from header\")\n    console.log(\"Unable to extract timestamp and signature from header\")\n    } catch (e) {\n    console.log(e.name, e.message);\n    }\n    }\n    \n    if (!details || details.signature === -1) {\n    try {\n    throw new Error(\"No signature found with expected scheme\")\n    console.log(\"No signature found with expected scheme\")\n    } catch (e) {\n    console.log(e.name, e.message);\n    }\n    }\n    \n    let payload = details.timestamp + \".\" + body;\n    let expectedSignature = CryptoJS.HmacSHA256(payload, private_key).toString(CryptoJS.enc.Hex);\n    \n    console.log(expectedSignature);\n    \n    if(expectedSignature == details.signature) {\n    console.log(\"Signature match with tilled_signature\");\n    }\n    \n    function parseHeader(header, scheme) {\n    if (typeof header !== 'string') {\n    return null;\n    }\n    \n    return header.split(',').reduce(\n    (accum, item) => {\n     const kv = item.split('=');\n    \n     if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n     }\n    \n     if (kv[0] === scheme) {\n      accum.signature = kv[1];\n     }\n    \n     return accum;\n    },\n    {\n     timestamp: -1,\n     signature: -1,\n    }\n    );\n    }\n\nLast updated on July 23, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/webhooks/webhook-events",
    "title": "Webhook Events",
    "content": "Webhook Events\n==============\n\nEach event is delivered as an object containing an `id`, `account_id`, `type` and related resource information within a nested data structure.\n\n**KEY**\n\n**TYPE**\n\n**DESCRIPTION**\n\n`id`\n\nstring\n\nUnique identifier of the event\n\n`account_id`\n\nstring\n\nUnique identifier of the associated account\n\n`type`\n\nstring\n\nDescription of the event\n\n`data`\n\nstring\n\nData associated with the event\n\nRefer to the sample event payload for the `payment_intent.succeeded` event:\n\n    {\n    \"id\": \"evt_qLX9Fqyspi8bk0j06yc7s\",\n    \"account_id\": \"acct_QvlHDyOkQ44HFHsZGs0Gi\",\n    \"type\": \"payment_intent.succeeded\",\n    \"data\": {\n    \"id\": \"pi_Hf068QvxJax26OBIKgmw9\",\n    \"status\": \"succeeded\",\n    ...\n    }\n    }\n\nEvent Types[](#event-types)\n---------------------------\n\nThe table below defines the available webhook events.\n\n**EVENT**\n\n**DESCRIPTION**\n\n`account.updated`\n\nOccurs when an account is updated, such as the merchant application status switching from `in_review` to `active`\n\n`charge.captured`\n\nOccurs when a charge is captured\n\n`charge.expired`\n\nOccurs when a charge expires\n\n`charge.failed`\n\nOccurs when a charge fails\n\n`charge.succeeded`\n\nOccurs when a charge succeeds\n\n`charge.pending`\n\nOccurs when a pending charge is created\n\n`charge.refunded`\n\nOccurs when a charge is refunded\n\n`charge.refund.pending`\n\nOccurs when a refund is pending\n\n`charge.refund.updated`\n\nOccurs when a refund is confirmed as succeeded or failed\n\n`charge.updated`\n\nOccurs when a charge is updated\n\n`customer.created`\n\nOccurs when a customer is created\n\n`customer.deleted`\n\nOccurs when a customer is deleted\n\n`customer.updated`\n\nOccurs when a customer is updated\n\n`dispute.created`\n\nOccurs when a customer disputes a charge\n\n`dispute.updated`\n\nOccurs when a dispute is updated, such as being ruled won or lost\n\n`payment_intent.canceled`\n\nOccurs when a payment intent is canceled\n\n`payment_intent.created`\n\nOccurs when a payment intent is created\n\n`payment_intent.payment_failed`\n\nOccurs when a payment intent fails\n\n`payment_intent.processing`\n\nOccurs when a payment intent begins processing\n\n`payment_intent.requires_action`\n\nOccurs when a payment intent requires action, such as adding a payment method\n\n`payment_intent.succeeded`\n\nOccurs when a payment intent succeeds\n\n`payment_intent.amount_capturable_updated`\n\nOccurs when the capturable amount on a payment intent succeeds\n\n`payment_method.attached`\n\nOccurs when a payment method is attached to a customer\n\n`payment_method.detached`\n\nOccurs when a payment method is detached from a customer\n\n`payment_method.updated`\n\nOccurs when a payment method is updated by the Card Account Updater service\n\n`payout.created`\n\nOccurs when a pending payout is created\n\n`payout.failed`\n\nOccurs when a payout fails, such as when the merchant’s bank account information is incorrect\n\n`payout.paid`\n\nOccurs when a payout is sent to the merchant\n\n`payout.updated`\n\nOccurs when a payout is updated\n\n`platform_fee.created`\n\nOccurs when a platform fee is successfully collected\n\n`platform_fee.refunded`\n\nOccurs when a platform fee is refunded\n\n`subscription.created`\n\nOccurs when a subscription is created\n\n`subscription.canceled`\n\nOccurs when a subscription is canceled\n\n`subscription.updated`\n\nOccurs when a subscription is updated\n\n`report_run.succeeded`\n\nOccurs when a report successfully generates\n\n`report_run.failed`\n\nOccurs when a report fails to generate\n\nLast updated on October 25, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/glossary",
    "title": "Glossary",
    "content": "Glossary\n========\n\nFamiliarize yourself with key terms and concepts.\n\n**TERM**\n\n**DEFINITION**\n\nConnected account\n\nAn account linked to a parent account. For software platforms accounts, connected accounts represent their merchants, while for reseller accounts, connected accounts include both their software platforms and merchants.\n\nMerchant\n\nA business using a software platform to manage their operations and process payments.\n\nMetadata\n\nAllows you to attach key-value pairs to Tilled objects, providing additional structured information about Account, Customer, Payment Intent, Refund, and Subscription objects.\n\nPartner\n\nA software platform leveraging Tilled for its payment capabilities.\n\nPayment intent\n\nA payment intent represents the entire lifecycle of a payment, from initiation to completion or cancellation.\n\nPayout\n\nFunds deposited or withdrawn from a merchant’s bank account.\n\nPricing template\n\nUsed to onboard new merchants and update pricing for existing merchants, the pricing template stores key pricing details related to a payment method.\n\nReseller\n\nAn organization managing a portfolio of software platforms and their associated merchants.\n\nSaaS account\n\nA software platform’s merchant account that is typically used to bill their customers for SaaS fees.\n\nSettlement\n\nThe process by which authorized payments are batched and sent for processing by the card networks for clearing and funding.\n\nLast updated on February 5, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/metadata",
    "title": "Metadata",
    "content": "Metadata\n========\n\nUpdatable Tilled objects—including [AccountsAPI](/api-reference#tag/accounts), [CustomersAPI](/api-reference#tag/customers), [Payment IntentsAPI](/api-reference#tag/payment-intents), [RefundAPI](/api-reference#tag/refunds), and [SubscriptionsAPI](/api-reference#tag/subscriptions)—have a metadata parameter for attaching key-value data. Metadata allows you to attach key-value pairs of data, providing a flexible way to store additional information that is not directly used by Tilled, such as a user’s full name or unique identifiers.\n\nOverview[](#overview)\n---------------------\n\n### Key aspects[](#key-aspects)\n\n*   You may specify up to 50 keys.\n*   Key names can be up to 40 characters long.\n*   Values can contain up to 500 characters each.\n\n### Important considerations[](#important-considerations)\n\n*   Only string values are permissible; null values will be disregarded.\n*   Avoid storing sensitive information within metadata to maintain data security.\n*   Do not include objects, arrays, or booleans in metadata unless they are converted to strings.\n\n### Filter by metadata tags[](#filter-by-metadata-tags)\n\nTilled's API supports filtering records by metadata tags. This is useful for segmenting your data and simplifying the retrieval of specific records based on set criteria.\n\nFiltering across metadata is available when using the LIST operation. To filter by a metadata tag, include a query parameter in your API request that specifies the metadata key and value you want to filter by. For example, to filter for customers with a specific membership level, use the query below.\n\n    LIST /customers?metadata[membership_level]=gold\n\nThis request will return only those customers whose `membership_level` metadata is set to “gold”. Utilizing metadata for filtering is particularly effective for segmenting your data and simplifying the retrieval of specific records based on set criteria.\n\nSample Use Cases[](#sample-use-cases)\n-------------------------------------\n\n**USE CASE**\n\n**OBJECT**\n\n**METADATA KEY**\n\n**DESCRIPTION**\n\nEnhanced reporting and tracking\n\n[Payment IntentsAPI](/api-reference#tag/payment-intents)\n\n`invoice_number`\n\nAttach your platform's invoice number to each payment, facilitating easier cross-referencing and reconciliation across your software and Tilled.\n\nCustom payment tags\n\n[Payment IntentsAPI](/api-reference#tag/payment-intents)\n\n`payment_tag`\n\nCreate custom tags for payments to categorize them for various purposes such as marketing campaigns, product lines, or sales channels.\n\nCustomer identification\n\n[CustomersAPI](/api-reference#tag/customers)\n\n`platform_customer_id`\n\nStore unique customer identifiers within the Tilled platform, allowing seamless integration and easy lookup of customer information, enhancing customer management and support\n\nAdditional customer information\n\n[CustomersAPI](/api-reference#tag/customers)\n\n`customer_notes`\n\nAdd notes or additional information about customers that may be relevant for support or marketing purposes, such as preferences or account status.\n\nSubscription tier information\n\n[SubscriptionsAPI](/api-reference#tag/subscriptions)\n\n`subscription_tier`\n\nInclude details about subscription plans (e.g., gold, silver, platinum) to help manage and categorize subscriptions.\n\nDetailed refund reasons\n\n[RefundsAPI](/api-reference#tag/refunds)\n\n`refund_reason_detail`\n\nProvide detailed reasons for refunds beyond standard reason properties, adding notes and context for complex scenarios.\n\nLast updated on July 18, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/testing",
    "title": "Testing",
    "content": "Testing\n=======\n\nThis guide provides test card numbers, banking numbers, and additional information to ensure your integration functions correctly. Utilize these resources to simulate various scenarios within the sandbox environment and verify that they are handled appropriately.\n\nCard Payments[](#card-payments)\n-------------------------------\n\n**BRAND**\n\n**REGION**\n\n**CARD NUMBER**\n\n**CVV / CVC**\n\n**EXPIRATION DATE**\n\nVisa (Credit)\n\nUS and Canada\n\n4111 1111 1111 1111\n\nAny 3 digits, except 333 or 666\n\nAny future date\n\nVisa (Credit)\n\nUS and Canada\n\n4900 7700 0000 0001\n\nAny 3 digits, except 333 or 666\n\nAny future date\n\nMastercard\n\nUS and Canada\n\n5100 4000 0000 0000\n\nAny 3 digits, except 333 or 666\n\nAny future date\n\nDiscover\n\nUS only\n\n6011 2345 6789 0123\n\nAny 3 digits, except 333 or 666\n\nAny future date\n\nAmerican Express\n\nUS only\n\n3701 234567 89017\n\nAny 4 digits\n\nAny future date\n\nBank-to-Bank Payments[](#bank-to-bank-payments)\n-----------------------------------------------\n\n### ACH Debit (USD)[](#ach-debit-usd)\n\n**BANK NAME**\n\n**ROUTING NUMBER**\n\n**ACCOUNT NUMBER**\n\nBank of America\n\n011000138\n\nAny 4-17 digit number, except ‘123456789’\n\nChase\n\n021000021\n\nAny 4-17 digit number, except ‘123456789’\n\nWells Fargo Bank\n\n021101108\n\nAny 4-17 digit number, except ‘123456789’\n\nHSBC\n\n021004823\n\nAny 4-17 digit number, except ‘123456789’\n\nTD Bank Connecticut\n\n011103093\n\nAny 4-17 digit number, except ‘123456789’\n\n### EFT Debit (CAD)[](#eft-debit-cad)\n\n**BANK NAME**\n\n**INSTITUTION ID**\n\n**ACCOUNT NUMBER**\n\n**TRANSIT NUMBER**\n\nBank of Montreal\n\n001\n\nAny 4-12 digit number\n\n22446\n\nScotiabank (The Bank of Nova Scotia)\n\n002\n\nAny 4-12 digit number\n\n81349\n\nRoyal Bank of Canada\n\n003\n\nAny 4-12 digit number\n\n04356\n\nThe Toronto-Dominion Bank\n\n004\n\nAny 4-12 digit number\n\n00012\n\nNational Bank of Canada\n\n006\n\nAny 4-12 digit number\n\n48121\n\nDeclines[](#declines)\n---------------------\n\nTo simulate a decline, pass-through the respective amount when [Creating a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents). An amount of 777701 represents $7777.01.\n\n**FAILURE CODE**\n\n**FAILURE MESSAGE**\n\n**AMOUNT**\n\n`insufficient_funds`\n\nThe account has insufficient funds to complete the purchase.\n\n777701\n\n`avs_check_failed`\n\nThe AVS check failed.\n\n777702\n\n`generic_decline`\n\nThe payment was declined by the issuer for an unknown reason.\n\n777703\n\n`call_issuer`\n\nThe card was declined by the issuer for an unknown reason.\n\n777704\n\n`expired_card`\n\nThe card has expired.\n\n777705\n\n`pickup_card`\n\nThe card cannot be used for payment as it my have been reported lost or stolen.\n\n777706\n\n`invalid_number`\n\nThe card number is incorrect.\n\n777707\n\n`limit_exceeded`\n\nThe customer has exceeded their balance or credit limit.\n\n777708\n\n`not_permitted`\n\nThe payment is not permitted.\n\n777709\n\n`incorrect_cvc`\n\nThe CVV/CVC number is incorrect.\n\n777710\n\n`service_not_allowed`\n\nThe card was declined by the issuer due to its proprietary card activity regulations.\n\n777711\n\n`invalid_expiry`\n\nThe expiration date is incorrect.\n\n777712\n\n`card_not_supported`\n\nThe card does not support this type of purchase.\n\n777713\n\n`restricted_card`\n\nThe card cannot be used for payment as it may have been reported lost or stolen.\n\n777714\n\n`fraudulent`\n\nThe payment is suspected to be fraudulent.\n\n777715\n\n`processing_error`\n\nAn error occurred while processing the payment.\n\n777716\n\nACH Returns[](#ach-returns)\n---------------------------\n\nTo simulate an ACH return, pass-through the respective amount when [Creating a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents). An amount of 888801 represents $8888.01.\n\nACH payments will move from a status of `processing` to `failed` at 8 AM EST the day after the payment is initiated.\n\n**FAILURE CODE**\n\n**FAILURE MESSAGE**\n\n**AMOUNT**\n\n`R01`\n\nThe account has insufficient funds to complete the purchase.\n\n888801\n\n`R02`\n\nThe account is closed.\n\n888802\n\n`R03`\n\nThe account number or routing information doesn’t match any accounts at the receiving bank.\n\n888803\n\n`R04`\n\nThe account number provided is incorrect.\n\n888804\n\n`R05`\n\nA corporate Standard Entry Class (SEC) code was incorrectly used for a consumer account.\n\n888805\n\n`R06`\n\nThe originating bank returned the payment.\n\n888806\n\n`R07`\n\nThe customer revoked the authorization of the payment.\n\n888807\n\n`R08`\n\nThe account holder placed a stop payment order on this specific payment.\n\n888808\n\n`R09`\n\nThe account may have deposits that have not yet cleared, resulting in insufficient funds for the payment.\n\n888809\n\n`R10`\n\nThe customer stated that the payment was not authorized.\n\n888810\n\n`R11`\n\nA truncation (check-clearing) error occurred.\n\n888811\n\nAVS Responses[](#avs-responses)\n-------------------------------\n\nBy default, card transactions that include valid `billing_details` addresses will successfully pass address verification checks. To test different outcomes, you can prefix the `billing_details.address.street` property with a single letter code listed in the table below.\n\nFor example, setting `billing_details.address.street` to ‘A11 123 Main Street’ will simulate the address check failing because the postal code doesn’t match. You can find the results of these checks in the `payment_method.card.checks` property.\n\n**DESCRIPTION**\n\n**CHECK RESULTS**\n\n**PREFIX**\n\nBoth street and postal code match\n\n`address_line1_check=pass` `address_postal_code_check=pass`\n\n10\n\nStreet matches, but postal code does not\n\n`address_line1_check=pass` `address_postal_code_check=fail`\n\n11\n\nPostal code matches, but street does not\n\n`address_line1_check=fail` `address_postal_code_check=pass`\n\n12\n\nAddress information is unavailable\n\n`address_line1_check=unchecked` `address_postal_code_check=unchecked`\n\n18\n\nAddress information is unavailable\n\n`address_line1_check=unavailable` `address_postal_code_check=unavailable`\n\n15\n\nDisputes[](#disputes)\n---------------------\n\nTo simulate a dispute, pass-through the respective amount when [Creating a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents). An amount of 777797 represents $7,777.97.\n\n**DESCRIPTION**\n\n**DISPUTE STATUS**\n\n**STATUS HISTORY**\n\n**AMOUNT**\n\nInquiry\n\n`warning_under_review`\n\n`warning_needs_response` `warning_under_review`\n\n777797\n\nInquiry followed by a formal dispute\n\n`needs_response`\n\n`warning_needs_response` `warning_under_review` `needs_response`\n\n777798\n\nFormal dispute\n\n`needs_response`\n\n`needs_response`\n\n777799\n\nWhen you submit evidence, using the precise phrases provided below in the `evidence_description` will trigger the dispute to be resolved as won or lost.\n\n**RESULTING DISPUTE STATUS**\n\n**EVIDENCE DESCRIPTION**\n\n`won`\n\nREVERSAL\n\n`lost`\n\nLOSS\n\nFor the purposes of [certification](/docs/get-started/launch-checklist#simulate-a-dispute), you will need to submit dispute evidence. You must use `777798` or `777799` as the amount to trigger the dispute status of `needs_response`, allowing you to respond to the dispute and complete the checklist task.\n\nBank Account Verification[](#bank-account-verification)\n-------------------------------------------------------\n\nTo test the Plaid Bank Account Verification feature within the hosted merchant application:\n\n1.  Navigate to the **Bank Account** section within the merchant application and click on the **Connect Account** button. Then, in the popup that appears, click **Continue**.\n2.  On the **“Select your institution”** page, pick any of the banks listed that are supported by Plaid and click **Continue**.\n3.  When prompted to sign in, use these test credentials:\n    1.  Username: user\\_good\n    2.  Password: pass\\_good\n4.  After inputting the credentials, you’ll be taken to the **“Verify your identity”** page. Here, click the **Get code** button. For the code input, use 1234 and then click **Submit**.\n5.  Select any of the test accounts and click **Continue**.\n\nYou can then proceed with the remainder of the application. If you submit a test application and choose manual bank verification instead of Plaid, the merchant application’s status will change from in-review to approved within 5 minutes. Using the tax ID 909909909 will keep the application in the `in-review` status, preventing it from changing to `approved`.\n\nWebhooks[](#webhooks)\n---------------------\n\nYou can test your integration by completing actions in the sandbox environment that send events to your needed endpoint, and then verifying the results by checking the API for the correct event data. For example, creating a charge will trigger the `charge.succeeded` event which will hold the correct charge data.\n\nRefer to our [Webhook documentation](/docs/webhooks/overview) for more details.\n\nLast updated on March 7, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/error-codes",
    "title": "Error Codes",
    "content": "Error Codes\n===========\n\nIdentify and address server and Tilled.js error codes.\n\nTilled\\-Specific Server Error Codes[](#-specific-server-error-codes)\n--------------------------------------------------------------------\n\n**ERROR CODE**\n\n**DESCRIPTION**\n\n**SOLUTION**\n\n400 (Bad request)\n\nMissing `tilled-account` header\n\nSpecify an `account_id`.\n\n401 (Unauthorized)\n\nInvalid or missing `tilled-api-key` header\n\nVerify that you are using the correct API key with the necessary permissions for your request.\n\n401 (Unauthorized)\n\ntilled\\-account is not accessible via `api_key.account_id` that was used for authentication\n\nProvide an API key that is associated with the specified account.\n\n403 (Forbidden)\n\nEither the `tilled-account` is a type that is incapable of making your request or your request is originating from a provider on our blocked list\n\nVerify that your hosting provider is not on our blocked list. If so, please contact our team at [support@tilled.com](mailto:support@tilled.com). If it is not on the list, reattempt this request with your partner `account_id`.\n\n404 (Not found)\n\nInvalid `tilled-account-id` header\n\nVerify that you are using the correct `account_id`.\n\nTilled.js Error Codes[](#js-error-codes)\n----------------------------------------\n\n**DISPLAY MESSAGE**\n\n**DESCRIPTION**\n\n**SOLUTION**\n\n`paymentRequest` is required for form field type `paymentRequestButton`\n\nThe field was created with a `type` of `paymentRequestButton`, but the `paymentRequest` was not set in the `forms.fieldOptions` parameter.\n\nSet the `paymentRequest` attribute in your form.createField like so: `var prButton = form.createField('paymentRequestButton', { paymentRequest: paymentRequest, });`.\n\nUnable to start Apple Pay session\n\nThe merchant does not have the capabilities (i.e. does not support either the country, currency, or card network) to process this payment or Tilled was unable to initialize the ApplePaySession.\n\nVerify that the merchant is capable of processing the Payment Intent and that you have completed the steps to verify your domain.\n\nNo DOM Element found with id {selector}\n\nThe selector provided in your `inject` method call does not exist in the DOM.\n\nDouble-check that you are passing the correct element id when attempting to inject your PaymentRequest button.\n\nselector + `DOM Element must have a parent container`\n\nThe user attempted to inject an element that does not have a parent element.\n\nNest your `PaymentRequest example` button element within a container element.\n\nField type of `FIX` is required\n\nThe build method failed because the necessary fields for the payment method’s type were not created.\n\nVerify that you created all the necessary fields with the `createField` method.\n\nUnhandled payment method type\n\nThe user attempted to confirm a payment intent with a `payment_method.type` that is not supported by Tilled.js.\n\nVerify that the payment intent’s `payment_method.type` matches one of the following: `card`, `ach_debit`, or `eft_debit`.\n\nThe payment intent client secret is required\n\nThe user did not specify a client secret in their call to the `confirmPayment` method.\n\nPass a Payment Intent's client secret into the call to the `confirmPayment` method.\n\n`payment_method` is a required property\n\nThe user did not specify the `payment_method` parameter in their call to the `confirmPayment` method.\n\nPass a `payment_method` parameter into the call to the `confirmPayment` method.\n\nA `form` is required\n\nThe user attempted to confirm a Payment Intent with the `confirmPayment` method without building a form object.\n\nVerify that the form has been successfully built with the `build` method.\n\nA `tilled.form()` is required prior to creating a payment method\n\nThe user attempted to create a payment method without building a `form` object.\n\nVerify that the form has been successfully initialized with the `form` method.\n\nField of type `{fieldType}` is not valid\n\nThe user entered a value that did not pass our form validation.\n\nDisable the submit button if the form is invalid.\n\nExpected `document.body` not to be null\n\nThe user attempted to initialize a Tilled instance in an HTML page without a `body` element.\n\nVerify that the page has a `body` element and add one if necessary.\n\nUnauthorized: jwt malformed\n\nThe publishable key or `account_id` is missing or invalid.\n\nVerify that you have specified a valid `account_id` and publishable key when initializing a `Tilled` object instance.\n\nLast updated on July 18, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/resources/pci-compliance",
    "title": "PCI Compliance",
    "content": "PCI Compliance\n==============\n\nPCI DSS (Payment Card Industry Data Security Standard) compliance is required for all merchants processing credit card payments through TSYS. As a Level 1 PCI DSS-certified provider, Tilled partners with MaxPCI to offer merchants a free, streamlined compliance process.\n\nAlthough Tilled is PCI compliant, merchants are required to validate their own PCI compliance annually by completing the necessary assessments and certifications because:\n\n*   It’s required by card networks for any business handling credit card data\n*   Merchants can be held liable for data breaches or fraud if they are not PCI-compliant\n*   Some payment processors charge higher transaction fees to non-compliant merchants\n*   Non-compliance can result in fines ranging from $5,000-$100,000 per month\n*   In extreme cases, merchants can lose the ability to process credit card payments altogether\n\nMaxPCI Platform[](#maxpci-platform)\n-----------------------------------\n\nMaxPCI provides merchants with:\n\n*   Monthly enrollment, account setup information, and reminder emails to renew compliance\n*   A free online tool to complete a PCI Self-Assessment Questionnaire (SAQ)\n*   Network vulnerability scanning\n*   Dedicated support via phone, chat, and email\n\n### Accessing MaxPCI[](#accessing-maxpci)\n\nMerchants will receive a welcome email from MaxPCI or their software platform with information about accessing MaxPCI including their username and a temporary password. Once they receive their login credentials merchants can sign into the MaxPCI portal and set a new password.\n\n### Support Contact Information[](#support-contact-information)\n\nSupport is available Monday-Friday, 9AM-6PM EST.\n\n*   Login: [https://maxpcicomply.com/login](https://maxpcicomply.com/login)\n*   Email: [support@maxpcicomply.com](mailto:support@maxpcicomply.com)\n*   Phone: 800-803-8515\n\n### Communication Options[](#communication-options)\n\nMaxPCI offers two communication options: partner-managed and MaxPCI-direct.\n\n**Partner-Managed Communication**\n\nSoftware platforms can choose to manage all PCI-related communications themselves to:\n\n*   Maintain consistent branding\n*   Control merchant messaging\n*   Handle compliance tracking directly\n\nPartner-managed communications are recommended for software platforms who want full control over how they communicate with their customers.\n\n**MaxPCI-Direct Communication**\n\nMaxPCI handles all compliance-related communications, allowing merchants to receive automated enrollment emails and reminders under MaxPCI branding. The software platform is mentioned in the communications, but is not responsible for managing them. Tilled is never exposed to merchants.\n\n### Alternative Compliance Submission[](#alternative-compliance-submission)\n\nMerchants who have completed PCI compliance through another vendor can upload their Certificate of Compliance to MaxPCI, including SAQ information and scan results if required.\n\nLast updated on March 7, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/sdks-applications/tilledjs",
    "title": "Tilled.js",
    "content": "Tilled.js\n=========\n\nTilled.js allows you to seamlessly integrate a payment form into your application and securely store payment information on Tilled’s remote servers, minimizing your PCI compliance burden.\n\nImplement Tilled.js[](#implement-tilledjs)\n------------------------------------------\n\n### Include Tilled.js in your webpage[](#include-tilledjs-in-your-webpage)\n\nTo start, embed the Tilled.js script directly in the `<head>` tag of your HTML to ensure it loads before your page content. You may use the `defer` attribute to avoid blocking the parser; however, use of the `async` attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles.\n\n    <script src=\"https://js.tilled.com/v2\" defer></script>\n\n### Initialize Tilled.js[](#initialize-tilledjs)\n\nInstantiate Tilled.js using your publishable API key, the `account_id`, and the initialization options.\n\n    const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true });\n\n**PARAMETER**\n\n**TYPE**\n\n**DESCRIPTION**\n\n**DEFAULT**\n\n`publishableKey`\n\nstring\n\nYour publishable API key.\n\nNone\n\n`accountId`\n\nstring\n\nYour account ID.\n\nNone\n\n`options`\n\nobject\n\nAdditional settings for the Tilled instance.\n\nNone\n\n`options.sandbox`\n\nboolean\n\nIndicates whether to use the sandbox environment.\n\n`false`\n\n### Create the Form[](#create-the-form)\n\nInitialize your main **Form** instance where you’ll add all the form fields. This form acts as the container for all subsequent fields.\n\n    const form = await tilled.form({ payment_method_type: 'card' });\n\n**PARAMETER**\n\n**TYPE**\n\n**DESCRIPTION**\n\n**DEFAULT**\n\n`payment_method_type`\n\nstring\n\nSpecifies the `payment_method_type`, either `card` or `ach_debit`.\n\n`card`\n\n### Create and inject Form Fields[](#create-and-inject-form-fields)\n\nCreate each **Form Field** individually using `form.createField()` and then inject them into your HTML using either a CSS selector or a DOM element.\n\n    const cardNumberField = form.createField('cardNumber');\n    cardNumberField.inject('#card-number-container');\n\n**PARAMETER**\n\n**TYPE**\n\n**REQUIRED**\n\n**DESCRIPTION**\n\n`selector`\n\nstring or DOM Element\n\nYes\n\nCSS selector or DOM element where the field should be injected.\n\n### Configure Field Styles (optional)[](#configure-field-styles-optional)\n\nCustomize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software.\n\n    const fieldOptions = {\n        styles: {\n          base: {\n            fontFamily: 'Helvetica Neue, Arial, sans-serif',\n            color: '#30416e',\n            fontWeight: '400',\n          }\n        }\n      };\n    const styledCardNumberField = form.createField('cardNumber', fieldOptions);\n    styledCardNumberField.inject('#card-number-container');\n\n**PARAMETER**\n\n**TYPE**\n\n**DESCRIPTION**\n\n**DEFAULT**\n\n`formFieldType`\n\nstring\n\nType of the form field (e.g., `cardNumber`, `cardExpiry`).\n\nNone\n\n`options`\n\nobject\n\nAdditional settings for the field's customization.\n\nNone\n\n`selector`\n\nstring/object\n\nCSS selector or DOM element for embedding the field.\n\nNone\n\n`styles`\n\nobject\n\nCSS styles to apply to the field.\n\nNone\n\n`placeholder`\n\nstring\n\nText hint that appears in the field.\n\nDepends on field type\n\n#### Form Field styles[](#form-field-styles)\n\n**CSS PROPERTY**\n\n**TYPE**\n\n**DESCRIPTION**\n\n`color`\n\nstring\n\nSets the text color.\n\n`opacity`\n\nstring\n\nSets the opacity level.\n\n`letterSpacing`\n\nstring\n\nControls spacing between characters.\n\n`textAlign`\n\nstring\n\nAligns text horizontally.\n\n`textIndent`\n\nstring\n\nIndents the first line of text.\n\n`textDecoration`\n\nstring\n\nApplies text decoration.\n\n`textShadow`\n\nstring\n\nAdds shadow to text.\n\n`font`\n\nstring\n\nSets the font style.\n\n`fontFamily`\n\nstring\n\nSpecifies the font family.\n\n`fontSize`\n\nstring\n\nSets the size of the font.\n\n`fontStyle`\n\nstring\n\nDefines the style of the font.\n\n`fontWeight`\n\nstring\n\nSets the weight of the font.\n\n`lineHeight`\n\nstring\n\nSpecifies the line height.\n\n`transition`\n\nstring\n\nDefines transition effects.\n\n### Add event listeners to handle user interactions[](#add-event-listeners-to-handle-user-interactions)\n\nAttach event listeners to your form fields to handle actions like input validation or dynamic updates.\n\n    cardNumberField.on('change', (event) => {\n    if (event.valid) {\n      console.log('Card number is valid');\n    } else {\n      console.log('Card number is invalid:', event.error);\n    }\n    });\n\n**EVENT**\n\n**TRIGGER CONDITION**\n\n**DESCRIPTION**\n\n`blur`\n\nFired when a field loses focus.\n\nUseful for validation and UI updates.\n\n`focus`\n\nFired when a field gains focus.\n\nUseful for highlighting and UI enhancements.\n\n`change`\n\nFired when the value of a field changes.\n\nUseful for real-time validation and feedback.\n\n`ready`\n\nFired when a field is fully rendered and ready for interaction.\n\nIndicates readiness for user input.\n\n### Build the Form[](#build-the-form)\n\nOnce all fields are created and configured, build the `Form`.\n\n    await form.build();\n\n#### Methods[](#methods)\n\n**METHOD**\n\n**DESCRIPTION**\n\n**PARAMETERS**\n\n**RETURNS**\n\n`tilled.form()`\n\nInitializes a new form instance.\n\n`payment_method_type`: Specifies the type of payment method\n\n`Form` object\n\n`form.createField(fieldType, options)`\n\nCreates a new form field of the specified type.\n\n`fieldType`: Type of field  \n`options`: { `selector`, `styles`, `placeholder` }\n\n`FormField` object\n\n`field.inject(selector)`\n\nInjects the form field into the specified DOM element.\n\n`selector`: CSS selector or DOM element\n\n`FormField` instance for chaining\n\n`form.build()`\n\nPrepares all fields within the form for user interaction.\n\nNone\n\nPromise (resolves when complete)\n\n`form.teardown()`\n\nRemoves all fields from the DOM and cleans up resources.\n\n`handler`: Optional callback to execute after teardown is complete.\n\nPromise (resolves to a boolean)\n\n### Create a payment intent[](#create-a-payment-intent)\n\nTo [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents), specify the necessary details such as `currency`, `payment_method_type`, and `amount`.\n\n    curl -L 'https://api.tilled.com/v1/payment-intents' \\\n    -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n    -H 'Content-Type: application/json' \\\n    -H 'tilled-api-key: {{SECRET_KEY}}' \\\n    -d '{\n      \"amount\": 1000,\n      \"currency\": \"usd\",\n      \"payment_method_types\": [\n        \"card\"\n      ],\n      \"confirm\": true,\n      \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\"\n    }'\n\nThis server-side step generates a `client_secret` which will be used to complete the transaction on the client side with Tilled.js.\n\n#### Collect payment method details using Tilled.js (optional)[](#collect-payment-method-details-using-tilledjs-optional)\n\nUse Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the [Attach the Payment Method to a CustomerAPI](/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) endpoint.\n\n    tilled\n    .createPaymentMethod({\n    type: 'card',\n    billing_details: {\n      name: 'John Doe',\n      address: {\n        zip: '80021',\n        country: 'US',\n      },\n    },\n    })\n    .then(\n    (paymentMethod) => {\n      // attach to customer before confirming the payment\n    \n      // confirm payment\n      tilled.confirmPayment(paymentIntentClientSecret, paymentMethod);\n    },\n    (error) => {\n      // An error with the request (>400 status code)\n    }\n    );\n\n### Confirm the payment intent[](#confirm-the-payment-intent)\n\nIn order to confirm a payment intent, the payment method details or a `payment_method_id` must be specified. You can confirm at creation by setting `confirm=true` in the request body.\n\nIf the payment intent status is `requires_payment_method`, you’ll need to attach a payment method using the [Confirm a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) endpoint.\n\n    tilled.confirmPayment(paymentIntentClientSecret, { \n    payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id)\n      type: 'card',\n      billing_details: {\n        name: 'John Doe',\n        address: {\n          zip: '80021',\n          country: 'US',\n        },\n      },\n    }\n    })\n    .then(\n    (paymentIntent) => {\n      // Be sure to check the 'status' and/or 'last_error_message'\n      // properties to know if the charge was successful\n    },\n    (error) => {\n      // Typically an error with the request (>400 status code)\n    }\n    );\n\n### Teardown when done[](#teardown-when-done)\n\nRemove your `Form` from the DOM and clean up resources when the `Form` is no longer needed.\n\n    await form.teardown();\n\n**PARAMETER**\n\n**TYPE**\n\n**REQUIRED**\n\n**DESCRIPTION**\n\n`handler`\n\nfunction\n\nNo\n\nOptional callback to execute after teardown is complete.\n\nExamples[](#examples)\n---------------------\n\n### Credit card form[](#credit-card-form)\n\n    /* Example assumptions:\n    * The card fields have divs defined in the DOM\n    * <div id=\"card-number-element\"></div>\n    * <div id=\"card-expiration-element\"></div>\n    * <div id=\"card-cvv-element\"></div>\n    * A submit button is defined\n    * <button id='submit-btn'></button>\n    */\n    const tilled = new Tilled('pk_...', 'acct_...');\n    const form = await tilled.form({\n    payment_method_type: 'card',\n    });\n    const fieldOptions = {\n    styles: {\n      base: {\n        fontFamily: 'Helvetica Neue, Arial, sans-serif',\n        color: '#304166',\n        fontWeight: '400',\n        fontSize: '16px',\n      },\n      invalid: {\n        ':hover': {\n          textDecoration: 'underline dotted red',\n        },\n      },\n      valid: {\n        color: '#00BDA5',\n      },\n    },\n    };\n    form.createField('cardNumber', fieldOptions).inject('#card-number-element');\n    form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'});\n    form.createField('cardCvv', fieldOptions).inject('#card-cvv-element');\n    await form.build();\n    const submitButton = document.getElementById('submit-btn');\n    submitButton.onclick = () => {\n    tilled.confirmPayment(paymentIntentClientSecret, {\n      payment_method: {\n        billing_details: {\n          name: 'John Doe',\n          address: {\n            zip: '80021',\n            country: 'US',\n          },\n        },\n      },\n    })\n    .then((paymentIntent) => {\n      if (paymentIntent.status === 'succeeded') {\n        alert('Payment successful');\n      } else {\n        const errMsg = paymentIntent.last_payment_error?.message;\n        alert('Payment failed: ' + errMsg);\n      }\n    })\n    .catch((error) => {\n      alert('An error occurred: ' + error.message);\n    });\n\n### ACH bank account form[](#ach-bank-account-form)\n\n    /**\n    * Example assumptions:\n    * The ach_debit fields have divs defined in the DOM\n    * <div id=\"bank-account-number-element\"></div>\n    * <div id=\"bank-routing-number-element\"></div>\n    *\n    * A submit button is defined\n    * <button id='submit-btn'></button>\n    */\n    const tilled = new Tilled('pk_…', 'acct_…');\n    \n    const form = await tilled.form({\n    payment_method_type: 'ach_debit',\n    });\n    \n    const fieldOptions = {\n    styles: {\n      base: {\n        fontFamily: 'Helvetica Neue, Arial, sans-serif',\n        color: '#304166',\n        fontWeight: '400',\n        fontSize: '16px',\n      },\n      invalid: {\n        ':hover': {\n          textDecoration: 'underline dotted red',\n        },\n      },\n      valid: {\n        color: '#00BDA5',\n      },\n    },\n    };\n    \n    form\n    .createField('bankAccountNumber', fieldOptions)\n    .inject('#bank-account-number-element');\n    form\n    .createField('bankRoutingNumber', fieldOptions)\n    .inject('#bank-routing-number-element');\n    \n    await form.build();\n    \n    const submitButton = document.getElementById('submit-btn');\n    submitButton.on('click', () => {\n    // A payment intent will be created on your backend server and the\n    // payment_intent.client_secret will be passed to your frontend to\n    // be used below.\n    tilled\n    .confirmPayment(paymentIntentClientSecret, {\n      payment_method: {\n        billing_details: {\n          name: 'John Doe',\n          address: {\n            street: '370 Interlocken Blvd',\n            city: 'Broomfield',\n            state: 'CO',\n            zip: '80021',\n            country: 'US',\n          },\n        },\n        ach_debit: {\n          account_type: 'checking',\n          account_holder_name: 'John Doe',\n        },\n      },\n    })\n    .then(\n      (paymentIntent) => {\n        // Be sure to check the `status` and/or `last_payment_error`\n        // properties to know if the charge was successful\n        if (\n          paymentIntent.status === 'succeeded' ||\n          paymentIntent.status === 'processing'\n        ) {\n          alert('Payment successful');\n        } else {\n          const errMsg = paymentIntent.last_payment_error?.message;\n          alert('Payment failed: ' + errMsg);\n        }\n      },\n      (err) => {\n        // Typically an error with the request (>400 status code)\n      }\n    );\n    });\n\n### EFT bank account form[](#eft-bank-account-form)\n\n    /**\n    * Example assumptions:\n    * The eft_debit fields have divs defined in the DOM\n    * <div id=\"bank-account-number-element\"></div>\n    * <div id=\"bank-routing-number-element\"></div>\n    *\n    * A submit button is defined\n    * <button id='submit-btn'></button>\n    */\n    const tilled = new Tilled(\"pk_…\", \"acct_…\");\n    \n    const form = await tilled.form({\n    payment_method_type: \"eft_debit\",\n    });\n    \n    const fieldOptions = {\n    styles: {\n      base: {\n        fontFamily: \"Helvetica Neue, Arial, sans-serif\",\n        color: \"#304166\",\n        fontWeight: \"400\",\n        fontSize: \"16px\",\n      },\n      invalid: {\n        \":hover\": {\n          textDecoration: \"underline dotted red\",\n        },\n      },\n      valid: {\n        color: \"#00BDA5\",\n      },\n    },\n    };\n    \n    form\n    .createField(\"bankAccountNumber\", fieldOptions)\n    .inject(\"#bank-account-number-element\");\n    form\n    .createField(\"bankRoutingNumber\", fieldOptions)\n    .inject(\"#bank-routing-number-element\");\n    \n    await form.build();\n    \n    const submitButton = document.getElementById(\"submit-btn\");\n    submitButton.on(\"click\", () => {\n    // A payment intent will be created on your backend server and the\n    // payment_intent.client_secret will be passed to your frontend to\n    // be used below.\n    tilled\n      .confirmPayment(paymentIntentClientSecret, {\n        payment_method: {\n          billing_details: {\n            name: \"John Doe\",\n            address: {\n              street: \"350 Wellington St\",\n              city: \"Ottawa\",\n              state: \"ON\",\n              zip: \"K1A 0N1\",\n              country: \"CA\",\n            },\n          },\n          eft_debit: {\n            account_holder_name: \"John Doe\",\n          },\n        },\n      })\n      .then(\n        (paymentIntent) => {\n          // Be sure to check the `status` and/or `last_payment_error`\n          // properties to know if the charge was successful\n          if (\n            paymentIntent.status === \"succeeded\" ||\n            paymentIntent.status === \"processing\"\n          ) {\n            alert(\"Payment successful\");\n          } else {\n            const errMsg = paymentIntent.last_payment_error?.message;\n            alert(\"Payment failed: \" + errMsg);\n          }\n        },\n        (err) => {\n          // Typically an error with the request (>400 status code)\n        }\n      );\n    });\n\n### Apple Pay[](#apple-pay)\n\n    /**\n    * Example assumptions:\n    * The paymentRequestButton field has a div defined in the DOM\n    * <div id=\"native-payment-element\"></div>\n    *\n    */\n    const form = tilled.form({\n    payment_method_type: 'card',\n    });\n    \n    const paymentRequest = tilled.paymentRequest({\n    total: {\n    \tlabel: 'Tilled tee',\n    \tamount: secretData.amount,\n    },\n    });\n    \n    const prButton = form.createField('paymentRequestButton', {\n    paymentRequest: paymentRequest,\n    });\n    \n    paymentRequest.canMakePayment().then((result) => {\n    if (result) {\n    \tprButton.inject('#native-payment-element');\n    } else {\n    \tdocument.getElementById('native-payment-element').style.display = 'none';\n    }\n    });\n    \n    paymentRequest.on('paymentmethod', (ev) => {\n    let paymentMethod = ev.paymentMethod;\n    tilled\n    \t.confirmPayment(paymentIntentClientSecret, {\n    \t\tpayment_method: paymentMethod.id,\n    \t})\n    \t.then(\n    \t\t(paymentIntent) => {\n    \t\t\t// The payment intent confirmation occurred, but the\n    \t\t\t// actual charge may still have failed. Check\n    \t\t\tif (\n    \t\t\t\tpaymentIntent.status === 'succeeded' ||\n    \t\t\t\tpaymentIntent.status === 'processing'\n    \t\t\t) {\n    \t\t\t\tev.complete('success');\n    \t\t\t\talert('Successul payment');\n    \t\t\t} else {\n    \t\t\t\tev.complete('fail');\n    \t\t\t\tconst errMsg = paymentIntent.last_payment_error?.message;\n    \t\t\t\talert('Payment failed: ' + errMsg);\n    \t\t\t}\n    \t\t},\n    \t\t(err) => {\n    \t\t\tev.complete('fail');\n    \t\t}\n    \t);\n    });\n\nLast updated on December 12, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/sdks-applications/example-applications",
    "title": "Example Applications",
    "content": "Example Applications\n====================\n\nIn addition to the examples featured in the [Tilled.jsJS](/docs/sdks-applications/tilledjs/) guide, we provide fully functional applications for you to clone or fork. This enables you to view Tilled's capabilities firsthand.\n\nAll of our examples, except for the [Simple Payment Example](https://github.com/gettilled/simple-payment-example), are housed within the [Tilled Example Monorepo](https://github.com/gettilled/tilled-example-monorepo).\n\n**EXAMPLE**\n\n**DESCRIPTION**\n\n[Simple Payment Example](https://github.com/gettilled/simple-payment-example)\n\nDemonstrates the quickest method to process payments using Tilled, utilizing HTML, CSS, and JavaScript to create a payment form, accompanied by a brief Express application to [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents).\n\n[React Payment Example](https://github.com/gettilled/tilled-example-monorepo/blob/master/react/react-payment-example)\n\nShows how to implement [Tilled.jsJS](/docs/sdks-applications/tilledjs/) within a React application, including a custom hook, [useTilled](https://github.com/gettilled/tilled-example-monorepo/tree/master/react/react-payment-example#usetilled), to accelerate development.\n\n[React TS Checkout](https://github.com/gettilled/tilled-example-monorepo/blob/master/react/react-ts-checkout)\n\nProvides a comprehensive checkout experience using [Tilled.jsJS](/docs/sdks-applications/tilledjs/) with additional features such as saving payment methods, utilizing TypeScript and MUI, and includes a TypeScript version of the [useTilled](https://github.com/gettilled/tilled-example-monorepo/tree/master/react/react-payment-example#usetilled) hook.\n\n[Android Checkout](https://github.com/gettilled/tilled-example-monorepo/tree/master/android/android-card-present-checkout)\n\nDemonstrates the use of Tilled's's API for [Card Present](/docs/payments/card-present/) payment methods via a POS checkout terminal built with Kotlin, intended for use on Android devices. A Tilled\\-provided terminal reader is required.\n\n[iOS Checkout](https://github.com/gettilled/tilled-example-monorepo/tree/master/ios/ios-checkout)\n\nShowcases a payment terminal built with SwiftUI for Apple mobile devices, incorporating a WebView to facilitate Tilled's [Checkout SessionsAPI](/api-reference#tag/checkout-sessions) or a custom [Tilled.jsJS](/docs/sdks-applications/tilledjs/) form.\n\n[Apple Pay Examples](https://github.com/gettilled/tilled-example-monorepo#apple-pay-examples)\n\nIncludes two Apple Pay examples adapted from our [Simple Payment Example](https://github.com/gettilled/simple-payment-example), requiring HTTPS and a valid SSL certificate. One is hosted on [Netlify](https://github.com/gettilled/tilled-example-monorepo/blob/master/apple-pay/apple-pay-example-netlify), and the other uses [ngrok](https://github.com/gettilled/tilled-example-monorepo/blob/master/apple-pay/apple-pay-example-ngrok).\n\n[Laravel PHP Checkout](https://github.com/gettilled/tilled-example-monorepo/tree/master/laravel/laravel-php-checkout)\n\nDemonstrates using [Tilled.jsJS](/docs/sdks-applications/tilledjs/) with Laravel's Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for the backend. This setup enables creating, retrieving, attaching, and reusing payment methods.\n\n[Laravel PHP Reporting](https://github.com/gettilled/tilled-example-monorepo/tree/master/laravel/laravel-php-reporting)\n\nA reporting dashboard using Laravel that leverages the Blade templating engine for the frontend and Laravel’s Controllers, Services, and Routing for backend interactions. It includes capabilities to retrieve and display data for [Balance TransactionsAPI](/api-reference#tag/balance-transactions), [PayoutsAPI](/api-reference#tag/payouts), [Payment IntentsAPI](/api-reference#tag/payment-intents), and [DisputesAPI](/api-reference#tag/disputes).\n\n[Simple Onboarding Form](https://github.com/gettilled/tilled-example-monorepo/blob/master/javascript/simple-onboarding-form)\n\nProvides basic forms to [Create a Connected AccountAPI](/api-reference#tag/accounts/post/v1/accounts/connected), [Update a Merchant ApplicationAPI](/api-reference#tag/onboarding/put/v1/applications/%7Baccount_id%7D), and [Submit a Merchant ApplicationAPI](/api-reference#tag/onboarding/post/v1/applications/%7Baccount_id%7D/submit).\n\nLast updated on July 15, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/integration-options#payments",
    "title": "Integration Options (Payments)",
    "content": "The table below compares your integration options for collecting online and in-person payments.\n\n**API-ONLY**\n\n**CHECKOUT SESSIONS**\n\n**PAYMENT LINKS**\n\nDescription\n\nDesign and build your own custom payment flow using the [Payment IntentsAPI](/api-reference#tag/payment-intents).\n\nLow-code option for software platforms to generate a [Checkout SessionsAPI](/api-reference#tag/checkout-sessions) that routes to a Tilled\\-hosted payment page.\n\nNo-code option for merchants to generate a unique link in the Dashboard.\n\nIntegration effort\n\nHighest effort\n\nMedium effort\n\nLowest effort\n\n**Customization**\n\nUI customization\n\nCustomize and build your own UI\n\nWhite-labeled\n\nWhite-labeled\n\nPre-fill customer data\n\n✓\n\n✓\n\n✗\n\nHosted payment page\n\n✗\n\n✓\n\n✓\n\nEmbed on your site\n\n✓\n\n✗\n\n✗\n\nRedirect upon successful payment\n\n✗\n\n✓\n\n✗\n\nMobile support\n\nDependent on implementation\n\nResponsive web\n\nResponsive web\n\n**Payment Capabilities**\n\nOne-time online payments\n\n✓\n\n✓\n\n✓\n\nIn-person payments\n\n✓\n\n✗\n\n✗\n\nSubscription payments\n\n✓\n\n✗\n\n✗\n\nPartial payments\n\n✓\n\n✗\n\n✗\n\nAdd multiple line items\n\n✓\n\n✓\n\n✗\n\nCollect platform fees\n\n✓\n\n✓\n\n✗\n\n**Security**\n\nPCI compliance\n\nVariable\\*\n\nMinimal\n\nMinimal\n\n\\*PCI compliance effort depends heavily on your infrastructure and other things such as transaction volume.",
    "referrerUrl": "https://docs.tilled.com"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/integration-options#documents",
    "title": "Integration Options (Documents)",
    "content": "The table below compares your integration options for managing document requests.\n\n**API-ONLY**\n\n**DASHBOARD**\n\nDescription\n\nBuild a custom onboarding flow using the [DocumentsAPI](/api-reference#tag/documents).\n\nNo-code option for software platforms and merchants to manage document requests.\n\nIntegration effort\n\nHighest effort\n\nLowest effort\n\nContinuous optimization\n\nRequires integration changes\n\nAutomatic\n\n**Customization**\n\nUI customization\n\nCustomize and build your own UI\n\nWhite-labeled\n\nFlow logic\n\nExtensive control\n\nLimited control\n\n**Features**\n\nSubmit multiple documents\n\n✓\n\n✓\n\nEmail notifications\n\n✓\n\n✓\n\nWebhook events\n\n✓\n\n✓",
    "referrerUrl": "https://docs.tilled.com"
  },
  {
    "url": "https://docs.tilled.com/docs/sdks-applications/tilledjs/",
    "title": "Tilled.js",
    "content": "Tilled.js\n=========\n\nTilled.js allows you to seamlessly integrate a payment form into your application and securely store payment information on Tilled’s remote servers, minimizing your PCI compliance burden.\n\nImplement Tilled.js[](#implement-tilledjs)\n------------------------------------------\n\n### Include Tilled.js in your webpage[](#include-tilledjs-in-your-webpage)\n\nTo start, embed the Tilled.js script directly in the `<head>` tag of your HTML to ensure it loads before your page content. You may use the `defer` attribute to avoid blocking the parser; however, use of the `async` attribute is discouraged. For PCI compliance, Tilled.js must be loaded directly from the URL provided and not included in any bundles.\n\n    <script src=\"https://js.tilled.com/v2\" defer></script>\n\n### Initialize Tilled.js[](#initialize-tilledjs)\n\nInstantiate Tilled.js using your publishable API key, the `account_id`, and the initialization options.\n\n    const tilled = new Tilled('pk_…', 'acct_…', { sandbox: true });\n\n**PARAMETER**\n\n**TYPE**\n\n**DESCRIPTION**\n\n**DEFAULT**\n\n`publishableKey`\n\nstring\n\nYour publishable API key.\n\nNone\n\n`accountId`\n\nstring\n\nYour account ID.\n\nNone\n\n`options`\n\nobject\n\nAdditional settings for the Tilled instance.\n\nNone\n\n`options.sandbox`\n\nboolean\n\nIndicates whether to use the sandbox environment.\n\n`false`\n\n### Create the Form[](#create-the-form)\n\nInitialize your main **Form** instance where you’ll add all the form fields. This form acts as the container for all subsequent fields.\n\n    const form = await tilled.form({ payment_method_type: 'card' });\n\n**PARAMETER**\n\n**TYPE**\n\n**DESCRIPTION**\n\n**DEFAULT**\n\n`payment_method_type`\n\nstring\n\nSpecifies the `payment_method_type`, either `card` or `ach_debit`.\n\n`card`\n\n### Create and inject Form Fields[](#create-and-inject-form-fields)\n\nCreate each **Form Field** individually using `form.createField()` and then inject them into your HTML using either a CSS selector or a DOM element.\n\n    const cardNumberField = form.createField('cardNumber');\n    cardNumberField.inject('#card-number-container');\n\n**PARAMETER**\n\n**TYPE**\n\n**REQUIRED**\n\n**DESCRIPTION**\n\n`selector`\n\nstring or DOM Element\n\nYes\n\nCSS selector or DOM element where the field should be injected.\n\n### Configure Field Styles (optional)[](#configure-field-styles-optional)\n\nCustomize the appearance of your form fields using CSS properties. This step is optional but recommended to maintain a consistent design across your software.\n\n    const fieldOptions = {\n        styles: {\n          base: {\n            fontFamily: 'Helvetica Neue, Arial, sans-serif',\n            color: '#30416e',\n            fontWeight: '400',\n          }\n        }\n      };\n    const styledCardNumberField = form.createField('cardNumber', fieldOptions);\n    styledCardNumberField.inject('#card-number-container');\n\n**PARAMETER**\n\n**TYPE**\n\n**DESCRIPTION**\n\n**DEFAULT**\n\n`formFieldType`\n\nstring\n\nType of the form field (e.g., `cardNumber`, `cardExpiry`).\n\nNone\n\n`options`\n\nobject\n\nAdditional settings for the field's customization.\n\nNone\n\n`selector`\n\nstring/object\n\nCSS selector or DOM element for embedding the field.\n\nNone\n\n`styles`\n\nobject\n\nCSS styles to apply to the field.\n\nNone\n\n`placeholder`\n\nstring\n\nText hint that appears in the field.\n\nDepends on field type\n\n#### Form Field styles[](#form-field-styles)\n\n**CSS PROPERTY**\n\n**TYPE**\n\n**DESCRIPTION**\n\n`color`\n\nstring\n\nSets the text color.\n\n`opacity`\n\nstring\n\nSets the opacity level.\n\n`letterSpacing`\n\nstring\n\nControls spacing between characters.\n\n`textAlign`\n\nstring\n\nAligns text horizontally.\n\n`textIndent`\n\nstring\n\nIndents the first line of text.\n\n`textDecoration`\n\nstring\n\nApplies text decoration.\n\n`textShadow`\n\nstring\n\nAdds shadow to text.\n\n`font`\n\nstring\n\nSets the font style.\n\n`fontFamily`\n\nstring\n\nSpecifies the font family.\n\n`fontSize`\n\nstring\n\nSets the size of the font.\n\n`fontStyle`\n\nstring\n\nDefines the style of the font.\n\n`fontWeight`\n\nstring\n\nSets the weight of the font.\n\n`lineHeight`\n\nstring\n\nSpecifies the line height.\n\n`transition`\n\nstring\n\nDefines transition effects.\n\n### Add event listeners to handle user interactions[](#add-event-listeners-to-handle-user-interactions)\n\nAttach event listeners to your form fields to handle actions like input validation or dynamic updates.\n\n    cardNumberField.on('change', (event) => {\n    if (event.valid) {\n      console.log('Card number is valid');\n    } else {\n      console.log('Card number is invalid:', event.error);\n    }\n    });\n\n**EVENT**\n\n**TRIGGER CONDITION**\n\n**DESCRIPTION**\n\n`blur`\n\nFired when a field loses focus.\n\nUseful for validation and UI updates.\n\n`focus`\n\nFired when a field gains focus.\n\nUseful for highlighting and UI enhancements.\n\n`change`\n\nFired when the value of a field changes.\n\nUseful for real-time validation and feedback.\n\n`ready`\n\nFired when a field is fully rendered and ready for interaction.\n\nIndicates readiness for user input.\n\n### Build the Form[](#build-the-form)\n\nOnce all fields are created and configured, build the `Form`.\n\n    await form.build();\n\n#### Methods[](#methods)\n\n**METHOD**\n\n**DESCRIPTION**\n\n**PARAMETERS**\n\n**RETURNS**\n\n`tilled.form()`\n\nInitializes a new form instance.\n\n`payment_method_type`: Specifies the type of payment method\n\n`Form` object\n\n`form.createField(fieldType, options)`\n\nCreates a new form field of the specified type.\n\n`fieldType`: Type of field  \n`options`: { `selector`, `styles`, `placeholder` }\n\n`FormField` object\n\n`field.inject(selector)`\n\nInjects the form field into the specified DOM element.\n\n`selector`: CSS selector or DOM element\n\n`FormField` instance for chaining\n\n`form.build()`\n\nPrepares all fields within the form for user interaction.\n\nNone\n\nPromise (resolves when complete)\n\n`form.teardown()`\n\nRemoves all fields from the DOM and cleans up resources.\n\n`handler`: Optional callback to execute after teardown is complete.\n\nPromise (resolves to a boolean)\n\n### Create a payment intent[](#create-a-payment-intent)\n\nTo [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents), specify the necessary details such as `currency`, `payment_method_type`, and `amount`.\n\n    curl -L 'https://api.tilled.com/v1/payment-intents' \\\n    -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n    -H 'Content-Type: application/json' \\\n    -H 'tilled-api-key: {{SECRET_KEY}}' \\\n    -d '{\n      \"amount\": 1000,\n      \"currency\": \"usd\",\n      \"payment_method_types\": [\n        \"card\"\n      ],\n      \"confirm\": true,\n      \"payment_method_id\": \"pm_wAv1DzFajFHS50zIoT2N1\"\n    }'\n\nThis server-side step generates a `client_secret` which will be used to complete the transaction on the client side with Tilled.js.\n\n#### Collect payment method details using Tilled.js (optional)[](#collect-payment-method-details-using-tilledjs-optional)\n\nUse Tilled.js to securely collect payment details on the client side. If the payment method will be reused in the future, you can store it using the [Attach the Payment Method to a CustomerAPI](/api-reference#tag/payment-methods/put/v1/payment-methods/%7Bid%7D/attach) endpoint.\n\n    tilled\n    .createPaymentMethod({\n    type: 'card',\n    billing_details: {\n      name: 'John Doe',\n      address: {\n        zip: '80021',\n        country: 'US',\n      },\n    },\n    })\n    .then(\n    (paymentMethod) => {\n      // attach to customer before confirming the payment\n    \n      // confirm payment\n      tilled.confirmPayment(paymentIntentClientSecret, paymentMethod);\n    },\n    (error) => {\n      // An error with the request (>400 status code)\n    }\n    );\n\n### Confirm the payment intent[](#confirm-the-payment-intent)\n\nIn order to confirm a payment intent, the payment method details or a `payment_method_id` must be specified. You can confirm at creation by setting `confirm=true` in the request body.\n\nIf the payment intent status is `requires_payment_method`, you’ll need to attach a payment method using the [Confirm a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) endpoint.\n\n    tilled.confirmPayment(paymentIntentClientSecret, { \n    payment_method: { // Can also be a PaymentMethod ID (paymentMethod.id)\n      type: 'card',\n      billing_details: {\n        name: 'John Doe',\n        address: {\n          zip: '80021',\n          country: 'US',\n        },\n      },\n    }\n    })\n    .then(\n    (paymentIntent) => {\n      // Be sure to check the 'status' and/or 'last_error_message'\n      // properties to know if the charge was successful\n    },\n    (error) => {\n      // Typically an error with the request (>400 status code)\n    }\n    );\n\n### Teardown when done[](#teardown-when-done)\n\nRemove your `Form` from the DOM and clean up resources when the `Form` is no longer needed.\n\n    await form.teardown();\n\n**PARAMETER**\n\n**TYPE**\n\n**REQUIRED**\n\n**DESCRIPTION**\n\n`handler`\n\nfunction\n\nNo\n\nOptional callback to execute after teardown is complete.\n\nExamples[](#examples)\n---------------------\n\n### Credit card form[](#credit-card-form)\n\n    /* Example assumptions:\n    * The card fields have divs defined in the DOM\n    * <div id=\"card-number-element\"></div>\n    * <div id=\"card-expiration-element\"></div>\n    * <div id=\"card-cvv-element\"></div>\n    * A submit button is defined\n    * <button id='submit-btn'></button>\n    */\n    const tilled = new Tilled('pk_...', 'acct_...');\n    const form = await tilled.form({\n    payment_method_type: 'card',\n    });\n    const fieldOptions = {\n    styles: {\n      base: {\n        fontFamily: 'Helvetica Neue, Arial, sans-serif',\n        color: '#304166',\n        fontWeight: '400',\n        fontSize: '16px',\n      },\n      invalid: {\n        ':hover': {\n          textDecoration: 'underline dotted red',\n        },\n      },\n      valid: {\n        color: '#00BDA5',\n      },\n    },\n    };\n    form.createField('cardNumber', fieldOptions).inject('#card-number-element');\n    form.createField('cardExpiry', {...fieldOptions, selector: '#card-expiration-element'});\n    form.createField('cardCvv', fieldOptions).inject('#card-cvv-element');\n    await form.build();\n    const submitButton = document.getElementById('submit-btn');\n    submitButton.onclick = () => {\n    tilled.confirmPayment(paymentIntentClientSecret, {\n      payment_method: {\n        billing_details: {\n          name: 'John Doe',\n          address: {\n            zip: '80021',\n            country: 'US',\n          },\n        },\n      },\n    })\n    .then((paymentIntent) => {\n      if (paymentIntent.status === 'succeeded') {\n        alert('Payment successful');\n      } else {\n        const errMsg = paymentIntent.last_payment_error?.message;\n        alert('Payment failed: ' + errMsg);\n      }\n    })\n    .catch((error) => {\n      alert('An error occurred: ' + error.message);\n    });\n\n### ACH bank account form[](#ach-bank-account-form)\n\n    /**\n    * Example assumptions:\n    * The ach_debit fields have divs defined in the DOM\n    * <div id=\"bank-account-number-element\"></div>\n    * <div id=\"bank-routing-number-element\"></div>\n    *\n    * A submit button is defined\n    * <button id='submit-btn'></button>\n    */\n    const tilled = new Tilled('pk_…', 'acct_…');\n    \n    const form = await tilled.form({\n    payment_method_type: 'ach_debit',\n    });\n    \n    const fieldOptions = {\n    styles: {\n      base: {\n        fontFamily: 'Helvetica Neue, Arial, sans-serif',\n        color: '#304166',\n        fontWeight: '400',\n        fontSize: '16px',\n      },\n      invalid: {\n        ':hover': {\n          textDecoration: 'underline dotted red',\n        },\n      },\n      valid: {\n        color: '#00BDA5',\n      },\n    },\n    };\n    \n    form\n    .createField('bankAccountNumber', fieldOptions)\n    .inject('#bank-account-number-element');\n    form\n    .createField('bankRoutingNumber', fieldOptions)\n    .inject('#bank-routing-number-element');\n    \n    await form.build();\n    \n    const submitButton = document.getElementById('submit-btn');\n    submitButton.on('click', () => {\n    // A payment intent will be created on your backend server and the\n    // payment_intent.client_secret will be passed to your frontend to\n    // be used below.\n    tilled\n    .confirmPayment(paymentIntentClientSecret, {\n      payment_method: {\n        billing_details: {\n          name: 'John Doe',\n          address: {\n            street: '370 Interlocken Blvd',\n            city: 'Broomfield',\n            state: 'CO',\n            zip: '80021',\n            country: 'US',\n          },\n        },\n        ach_debit: {\n          account_type: 'checking',\n          account_holder_name: 'John Doe',\n        },\n      },\n    })\n    .then(\n      (paymentIntent) => {\n        // Be sure to check the `status` and/or `last_payment_error`\n        // properties to know if the charge was successful\n        if (\n          paymentIntent.status === 'succeeded' ||\n          paymentIntent.status === 'processing'\n        ) {\n          alert('Payment successful');\n        } else {\n          const errMsg = paymentIntent.last_payment_error?.message;\n          alert('Payment failed: ' + errMsg);\n        }\n      },\n      (err) => {\n        // Typically an error with the request (>400 status code)\n      }\n    );\n    });\n\n### EFT bank account form[](#eft-bank-account-form)\n\n    /**\n    * Example assumptions:\n    * The eft_debit fields have divs defined in the DOM\n    * <div id=\"bank-account-number-element\"></div>\n    * <div id=\"bank-routing-number-element\"></div>\n    *\n    * A submit button is defined\n    * <button id='submit-btn'></button>\n    */\n    const tilled = new Tilled(\"pk_…\", \"acct_…\");\n    \n    const form = await tilled.form({\n    payment_method_type: \"eft_debit\",\n    });\n    \n    const fieldOptions = {\n    styles: {\n      base: {\n        fontFamily: \"Helvetica Neue, Arial, sans-serif\",\n        color: \"#304166\",\n        fontWeight: \"400\",\n        fontSize: \"16px\",\n      },\n      invalid: {\n        \":hover\": {\n          textDecoration: \"underline dotted red\",\n        },\n      },\n      valid: {\n        color: \"#00BDA5\",\n      },\n    },\n    };\n    \n    form\n    .createField(\"bankAccountNumber\", fieldOptions)\n    .inject(\"#bank-account-number-element\");\n    form\n    .createField(\"bankRoutingNumber\", fieldOptions)\n    .inject(\"#bank-routing-number-element\");\n    \n    await form.build();\n    \n    const submitButton = document.getElementById(\"submit-btn\");\n    submitButton.on(\"click\", () => {\n    // A payment intent will be created on your backend server and the\n    // payment_intent.client_secret will be passed to your frontend to\n    // be used below.\n    tilled\n      .confirmPayment(paymentIntentClientSecret, {\n        payment_method: {\n          billing_details: {\n            name: \"John Doe\",\n            address: {\n              street: \"350 Wellington St\",\n              city: \"Ottawa\",\n              state: \"ON\",\n              zip: \"K1A 0N1\",\n              country: \"CA\",\n            },\n          },\n          eft_debit: {\n            account_holder_name: \"John Doe\",\n          },\n        },\n      })\n      .then(\n        (paymentIntent) => {\n          // Be sure to check the `status` and/or `last_payment_error`\n          // properties to know if the charge was successful\n          if (\n            paymentIntent.status === \"succeeded\" ||\n            paymentIntent.status === \"processing\"\n          ) {\n            alert(\"Payment successful\");\n          } else {\n            const errMsg = paymentIntent.last_payment_error?.message;\n            alert(\"Payment failed: \" + errMsg);\n          }\n        },\n        (err) => {\n          // Typically an error with the request (>400 status code)\n        }\n      );\n    });\n\n### Apple Pay[](#apple-pay)\n\n    /**\n    * Example assumptions:\n    * The paymentRequestButton field has a div defined in the DOM\n    * <div id=\"native-payment-element\"></div>\n    *\n    */\n    const form = tilled.form({\n    payment_method_type: 'card',\n    });\n    \n    const paymentRequest = tilled.paymentRequest({\n    total: {\n    \tlabel: 'Tilled tee',\n    \tamount: secretData.amount,\n    },\n    });\n    \n    const prButton = form.createField('paymentRequestButton', {\n    paymentRequest: paymentRequest,\n    });\n    \n    paymentRequest.canMakePayment().then((result) => {\n    if (result) {\n    \tprButton.inject('#native-payment-element');\n    } else {\n    \tdocument.getElementById('native-payment-element').style.display = 'none';\n    }\n    });\n    \n    paymentRequest.on('paymentmethod', (ev) => {\n    let paymentMethod = ev.paymentMethod;\n    tilled\n    \t.confirmPayment(paymentIntentClientSecret, {\n    \t\tpayment_method: paymentMethod.id,\n    \t})\n    \t.then(\n    \t\t(paymentIntent) => {\n    \t\t\t// The payment intent confirmation occurred, but the\n    \t\t\t// actual charge may still have failed. Check\n    \t\t\tif (\n    \t\t\t\tpaymentIntent.status === 'succeeded' ||\n    \t\t\t\tpaymentIntent.status === 'processing'\n    \t\t\t) {\n    \t\t\t\tev.complete('success');\n    \t\t\t\talert('Successul payment');\n    \t\t\t} else {\n    \t\t\t\tev.complete('fail');\n    \t\t\t\tconst errMsg = paymentIntent.last_payment_error?.message;\n    \t\t\t\talert('Payment failed: ' + errMsg);\n    \t\t\t}\n    \t\t},\n    \t\t(err) => {\n    \t\t\tev.complete('fail');\n    \t\t}\n    \t);\n    });\n\nLast updated on December 12, 2024",
    "referrerUrl": "https://docs.tilled.com/docs/get-started/launch-checklist"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-preferences#payments",
    "title": "Merchant Preferences (Payments)",
    "content": "Software platforms can restrict merchants from collecting payments through the Merchant Dashboard. This functionality is especially useful for software platforms who rely on platform fees or metadata to track payments, as payments initiated through the Merchant Dashboard can bypass platform fee logic and lack critical metadata, leading to data synchronization issues across systems.\n\nIf the **New payments** toggle is disabled, merchant users will lose the ability to:\n\n*   Create new payment links\n*   Collect manual payments\n\n### Configure payment preferences\n\nTo configure payments in the Merchant Dashboard:\n\n1.  Navigate to **Accounts**\n2.  Locate the **Merchant Dashboard Preferences** card\n3.  Toggle the **New payments** option on or off",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-preferences#notifications",
    "title": "Merchant Preferences (Notifications)",
    "content": "Email notification preferences can be customized for the following categories: Disputes, Additional Information Requests, and Onboarding. By default, these notifications are enabled, which means emails are automatically sent to your merchants. Notifications for password resets and user invitations are not customizable.\n\nMerchant users have the flexibility to override these default settings and adjust their notification preferences according to their needs.\n\nThe table below outlines all email notifications that can be turned on or off.\n\n**EMAIL TYPE**\n\n**EMAIL TRIGGER**\n\nOnboarding\n\nMerchant application is approved or rejected.\n\nAdditional information requests\n\nAdditional information is requested from a merchant account. Information can be requested during onboarding or from active merchants.\n\nDisputes\n\nPayment is disputed by a customer or a dispute is resolved.\n\nRefer to the [Notifications guide](/docs/account-configuration/notifications) for more details.\n\n### Configure merchant email preferences\n\nTo configure the default email preferences for your merchants:\n\n1.  Navigate to **Account**\n2.  Locate the **Merchant Email Preferences** card\n3.  Toggle **Dispute**, **Additional information requests**, and **Onboarding updates** emails on or off\n\n  \nMerchant email preferences can also be configured using the [Update an AccountAPI](/api-reference#tag/accounts/patch/v1/accounts) endpoint.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/onboard-new-merchants#api",
    "title": "Merchant Onboarding (API)",
    "content": "Tilled's [OnboardingAPI](/api-reference#tag/onboarding) allows you to build a custom onboarding flow for maximum customization.\n\n### Create a Connected Account\n\nTo [Create a Connected AccountAPI](/api-reference#tag/accounts/POST/v1/accounts/connected), specify the primary user’s email address. To prevent duplicates, store the `account_id` from the response, along with the AccountCapability `status`.\n\n**Create a Connected Account sample request**\n\n    curl -L  'https://api.tilled.com/v1/accounts/connected' \\\n      -H 'tilled-account: {{PARTNER_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"name\": \"Merchant Account\",\n      \"email\": \"merchant@email.test\"\n      }'\n\n### Update an onboarding application\n\nTo update an onboarding application, use the [Update an Onboarding ApplicationAPI](/api-reference#tag/onboarding/POST/v1/onboarding) endpoint. Each time you make a call to this endpoint, you will need to include the full body of data for the onboarding application.\n\n**Update an onboarding application sample request**\n\n    curl -L 'https://api.tilled.com/v1/onboarding/{{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"accept_terms_and_conditions\": true,\n      \"business_legal_entity\": {\n      \"name\": \"name\",\n      \"legal_name\": \"legal_name\",\n      \"tax_identification_number\": \"123456789\",\n      \"type\": \"LLC\",\n      \"category\": \"BEAUTY\",\n      \"yearly_volume_range\": \"MEDIUM\",\n      \"annual_revenue\": \"HIGH\",\n      \"monthly_volume_amount\": 1000,\n      \"average_transaction_amount\": 1000,\n      \"average_transaction_amount_card\": 1000,\n      \"average_transaction_amount_debit\": 1000,\n      \"average_transactions_per_month\": 1000,\n      \"statement_descriptor\": \"statement_descriptor\",\n      \"phone\": \"1234567890\",\n      \"currency\": \"usd\",\n      \"locale\": \"en_US\",\n      \"region\": \"US\",\n      \"company_email\": \"test@email.test\",\n      \"country_of_incorporation\": \"US\",\n      \"description\": \"description\",\n      \"incorporation_year\": 2023,\n      \"website\": \"https://test.test\",\n      \"naics_code\": \"BEAUTY_SALONS\",\n      \"address\": {\n          \"street\": \"123 Main Street\",\n          \"street2\": \"1\",\n          \"city\": \"NYC\",\n          \"state\": \"NY\",\n          \"zip\": \"11004\",\n          \"country\": \"US\"\n      },\n      \"principals\": [\n          {\n              \"first_name\": \"FirstName\",\n              \"middle_name\": \"MiddleName\",\n              \"last_name\": \"LastName\",\n              \"date_of_birth\": \"2000-01-01\",\n              \"job_title\": \"CEO\",\n              \"percentage_shareholding\": 100,\n              \"ssn\": \"123456789\",\n              \"phone\": \"1234567890\",\n              \"email\": \"test@test.test\",\n              \"nationality\": \"US\",\n              \"type\": \"director\",\n              \"is_applicant\": true,\n              \"is_control_prong\": true,\n              \"address\": {\n                  \"street\": \"123 Main Street\",\n                  \"street2\": \"1\",\n                  \"city\": \"NYC\",\n                  \"state\": \"NY\",\n                  \"zip\": \"11004\",\n                  \"country\": \"US\"\n              }\n          }\n      ],\n      \"bank_account\": {\n          \"account_number\": \"12345678\",\n          \"routing_number\": \"021000021\",\n          \"account_holder_name\": \"Account Holder\",\n          \"bank_name\": \"Bank Name\",\n          \"type\": \"checking\"\n      }\n      }\n        }'\n\n### Resolve validation errors\n\nBefore submitting the application, ensure all validation errors are resolved. Errors are provided as an array within a JSON object, as seen below.\n\n    {\n    \"validation_errors\": [\n    \"accept_terms_and_conditions must be equal to true\",\n    \"business_legal_entity.locale must be one of the following values: en_US, en_CA, fr_CA, en_GB\",\n    \"business_legal_entity.statement_descriptor must not contain any of the special characters: < >\",\n    \"business_legal_entity.statement_descriptor must be a string\",\n    \"business_legal_entity.statement_descriptor must be shorter than or equal to 20 characters\",\n    \"business_legal_entity.bank_account should not be null or undefined\",\n    \"business_legal_entity.is_applicant must be true for exactly one of the principals\",\n    \"business_legal_entity.is_control_prong must be true for exactly one of the principals\",\n    \"business_legal_entity.principals should not be empty\"\n    ],\n    }\n\n### Submit the application\n\nOnce all validation errors are resolved, submit the application using the [Submit an Onboarding ApplicationAPI](/api-reference#tag/onboarding/POST/v1/onboarding/submit) endpoint. If you attempt to submit an application with incomplete information, you will receive the same array as shown above with the error `\"error”: “The application cannot be submitted because it contains validation errors.\"`Applications cannot be edited after submission.\n\n    curl -L -X POST 'https://api.tilled.com/v1/onboarding/{{MERCHANT_ACCOUNT_ID}}/submit' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/document-requests#api",
    "title": "Document Requests (API)",
    "content": "Tilled's [DocumentsAPI](/api-reference#tag/documents) allows you to build a custom document management flow for maximum customization.\n\n### Configure webhooks\n\n[Configure webhooks](/docs/webhooks/how-to-set-up-webhooks) and listen for the `account.updated` event. Once a new document is requested, the document status will update to `requested`.\n\n### Collect documents from merchant\n\nCollect requested documents from the merchant and [Create a FileAPI](/api-reference#tag/files/post/v1/files).\n\n### Submit documents to Tilled\n\nUse the [Submit a DocumentAPI](/api-reference#tag/accounts/post/v1/accounts/connected) endpoint to submit files for a single document request or the [Bulk Submit DocumentsAPI](/api-reference#tag/documents/post/v1/documents/bulk-submit) endpoint to submit files for multiple document requests at once.\n\n    curl -L 'https://api.tilled.com/v1/documents/DOCUMENT_ID/submit' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"file_ids\": [\"file_id\", \"file_id\"]\n\nAfter a document is submitted, the document status will update to `submitted`. Once reviewed, the status will update to `verified`or `rejected`. If rejected, a reason will be provided.\n\nRefer to the [Document Request States](/docs/merchants/document-requests#document-request-states) for detailed information on each status.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#checkout-sessions",
    "title": "Online Payments (Checkout Sessions)",
    "content": "[Checkout SessionsAPI](/api-reference#tag/checkout-sessions) are a low-code option for software platforms to generate a `checkout_session_url` that routes the customer to a Tilled\\-hosted payments page.\n\n### Features\n\n*   Responsive mobile design\n*   PCI compliance\n*   Card validation\n*   Error messaging\n\n### Customization options\n\n*   Custom branding and subdomain\n*   Payment method options\n*   Adjustable line items and quantities\n*   Custom success page\n*   Associate new or existing customer\n*   Add metadata\n\n### Checkout lifecycle\n\n1.  When a customer decides to finalize their purchase, your application initiates a new [Checkout SessionAPI](/api-reference#tag/CheckoutSessions).\n2.  The [Checkout SessionAPI](/api-reference#tag/checkout-sessions) generates a URL that redirects the customer to a Tilled-hosted payment page. If configured, this URL will use your white-label subdomain.\n3.  Customers enter their payment details on this page to complete the transaction.\n4.  Upon successful payment:\n    *   If a `success_url` is provided, customers are redirected back to the provided URL. The receipt can be accessed by re-visiting the `checkout_session_url`. The redirect to the `success_url` only occurs the first time a payment is successful.\n    *   If a `success_url` is not provided, a receipt will be presented to the customer upon payment. If a `success_url` is provided, the receipt can be accessed by re-visiting the `checkout_session_url`. The redirect to the `success_url` only occurs the first time a payment is successful.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#payment-links",
    "title": "Online Payments (Payment Links)",
    "content": "Payment links are a no-code option for merchants to generate a unique payment link from the Dashboard that routes the customer to a Tilled\\-hosted payments page.\n\n  \n![Create payment link](/_next/image?url=%2Fimages%2Fpayment-link.png&w=3840&q=75)\n\n### Create a payment link\n\nTo create a payment link through the Dashboard:\n\n1.  Navigate to **Payments**, click the **New Payment** button, and select the **Payment Link** option\n2.  Select the payment method options and enter the payment description and amount\n3.  Click the **Generate Payment Link** button\n4.  Copy the payment link to your clipboard and share with the customer\n\nThe customer will be routed to a Tilled\\-hosted payments page where they can enter their payment details. A receipt will be presented to the customer upon payment.\n\nBy default, payment links expire 2 weeks from creation. If the payment link expired prior to the customer completing the payment, a new payment link will need to be created.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#manual-payment",
    "title": "Online Payments (Manual Payment)",
    "content": "The Virtual Terminal allows users to collect payments manually by entering customer payment details. This is useful for handling payments over the phone, email, or in situations where in-person payments are not possible.\n\n  \n![Collect manual payment](/_next/image?url=%2Fimages%2Fvirtual-terminal.png&w=3840&q=75)\n\n### Collect a payment manually\n\nTo collect a payment manually through the Dashboard:\n\n1.  Navigate to **Payments**, click the **New Payment** button, and select the **Manual Payment** option\n2.  Select the payment method and amount\n3.  Click the **Enter Payment Method Details** button\n4.  Enter the payment method details and click the **Collect Payment** button",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/refunds#api",
    "title": "Refunds (API)",
    "content": "To issue a refund, use the [Create a RefundAPI](/api-reference#tag/refunds/POST/v1/refunds) endpoint.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment",
    "title": "/docs/payments/collect-a-payment",
    "content": "Application error: a client-side exception has occurred (see the browser console for more information).",
    "referrerUrl": "https://docs.tilled.com/docs/payments/refunds"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/card-account-updater#api",
    "title": "Card Account Updater (API)",
    "content": "A `payment_method.updated` event is triggered each time a card is checked for updates. The payment method will be updated with the latest response from the Card Account Updater service and the `last_updated_at` timestamp.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/on-device-tipping#api",
    "title": "On-Device Tipping (API)",
    "content": "To configure on-device tipping, use the [Update a Terminal ReaderAPI](/api-reference#tag/terminal-readers/post/v1/terminal-readers/%7Bid%7D) endpoint.\n\n    curl -L 'https://api.tilled.com/v1/terminal-readers' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"settings\": {\n          \"tipping_enabled\": true,\n          \"print_receipt\": false\n      }\n      }'",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/receipts#api",
    "title": "Receipts (API)",
    "content": "To configure receipt printing for TSYS terminals, use the [Update a Terminal ReaderAPI](/api-reference#tag/terminal-readers/post/v1/terminal-readers/%7Bid%7D) endpoint.\n\n    curl -L 'https://api.tilled.com/v1/terminal-readers' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"settings\": {\n          \"tipping_enabled\": false,\n          \"print_receipt\": true\n        }\n      }'",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/receipts#terminal",
    "title": "Receipts (Terminal)",
    "content": "To configure receipt printing for Paysafe terminals directly on the terminal:\n\n1.  Open the **Payments** app on your terminal reader\n2.  Tap the **Settings** cog\n3.  Tap **Printing Options**\n4.  Toggle to your preferred printed receipt setting",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/reporting#api",
    "title": "Reporting (API)",
    "content": "To generate a preconfigured report via the API, use the [Create a Report RunAPI](/api-reference#tag/report-runs/POST/v1/report-runs) endpoint.\n\n    curl -L 'https://api.tilled.com/v1/report-runs' \\\n      -H 'tilled-account: {{ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n          \"parameters\": {\n              \"account_id\": \"{{ACCOUNT_ID}}\",\n              \"start_at\": \"2022-05-21\",\n              \"end_at\": \"2022-10-19\",\n              \"time_zone\": \"America/New_York\"\n          },\n          \"type\": \"payments_summary_1\",\n          \"reportName\": \"Report name\"\n                }'",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/users#api",
    "title": "Users (API)",
    "content": "To manage users via the API, use the [UsersAPI](/api-reference#tag/users).",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card-present/",
    "title": "In-Person Payments",
    "content": "In-Person Payments\n==================\n\nTilled supports in-person payments on both TSYS and Paysafe, giving you the flexibility to choose the processor and terminal setup that best suits your business needs. This guide will walk you through the process of setting up your integration, from selecting your processor and terminals to handling key payment scenarios.\n\nℹ️\n\nPaysafe’s in-person payments solution is in its beta phase. If you are interested in joining the beta, please reach out to [support@tilled.com](mailto:support@tilled.com).\n\nDesign Your Integration[](#design-your-integration)\n---------------------------------------------------\n\n### Choose your processor[](#choose-your-processor)\n\nTilled offers an in-person payments solution on each of our processors. If you haven’t already, consider which [processor](/docs/get-started/processor-comparison) you will use.\n\n### Choose your terminals[](#choose-your-terminals)\n\nThe terminal options available to you depend on the processor you are using for in-person payments.\n\n**Valor terminals with TSYS**\n\n*   **VL100:** Best for countertop use\n*   **VL110:** Best for handheld use\n\n**PAX terminals with Paysafe**\n\n*   **A920**\n*   **A920 Pro**\n*   **A80**\n\nCheck out our [online store](https://f1e839.myshopify.com/) for more information.\n\n### Identify required functionality[](#identify-required-functionality)\n\nThere are several in-person payments features to choose from which you can implement during your integration.\n\n[Manual capture](/docs/payments/card/manual-capture)[On-device tipping](/docs/payments/card/on-device-tipping)[Receipts](/docs/payments/card/receipts)\n\nOrder Developer Terminals[](#order-developer-terminals)\n-------------------------------------------------------\n\nTo test your integration, you’ll need a developer terminal. The easiest and most convenient option is to [order a developer terminal](https://f1e839.myshopify.com/) from Tilled. The terminal will arrive within a few business days, fully activated and ready to use. Simply connect it to Wi-Fi to get started.\n\nIf you already own a developer terminal, you can use it as long as it is a VL100 or VL110 model and suitable for test environments. To use your own terminal:\n\n1.  Email support to request an Activation Code.\n2.  Enter the Activation Code onto the terminal to associate it with your test account.\n\nCollect an In-Person Payment[](#collect-an-in-person-payment)\n-------------------------------------------------------------\n\nIf you are already familiar with collecting online payments using Tilled, the process for in-person payments will be similar.\n\n### Retrieve the terminal id[](#retrieve-the-terminal-id)\n\nWhen a merchant orders a terminal, Tilled associates the device’s serial number with the merchant’s account and assigns a unique `terminal_reader_id`. Before processing a payment, [List all Terminal ReadersAPI](/api-reference#tag/terminal-readers/get/v1/terminal-readers) linked to the merchant’s account to specify the device from which the payment will be collected.\n\n    curl -L https://api.tilled.com/v1/terminal-readers/{{TERMINAL_ID}} \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n\n### Create a card-present payment method[](#create-a-card-present-payment-method)\n\nTo [Create a Payment MethodAPI](/api-reference#tag/payment-methods/post/v1/payment-methods) for an in-person payment, set the `type=card_present` and include the `terminal_reader_id` of the intended device.\n\n**Create a Payment Method sample request**\n\n    curl -L 'https://api.tilled.com/v1/payment-methods' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"type\": \"card_present\",\n      \"terminal_reader_id\": \"{{TERMINAL_READER_ID}}\"\n    }'\n\n### Collect the payment[](#collect-the-payment)\n\nBegin by creating a payment intent. Specify the `payment_method_type` property as `card_present` and use the `payment_method_id` obtained from the previous step. Confirming the payment intent transitions its status to `requires_action`, indicating that the payment intent has been sent to the terminal, prompting the customer to complete the payment.\n\n**Create a payment intent sample request**\n\n    curl -L 'https://api.tilled.com/v1/payment-intents' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n      \"amount\": 1000,\n      \"currency\": \"usd\",\n      \"payment_method_types\": [\n        \"card_present\"\n      ],\n      \"confirm\": true,\n      \"capture_method\": \"automatic\",\n      \"payment_method_id\": \"pm_oeWN5ipwtWkF0N2n7t1zs\"\n      }'\n\n### Complete the payment[](#complete-the-payment)\n\nSwipe or tap a payment method on the terminal to complete the payment.\n\n### Confirm payment intent success[](#confirm-payment-intent-success)\n\n[Create a Webhook EndpointAPI](/api-reference#tag/webhook-endpoints/post/v1/webhook-endpoints) for `payment_intent_events` to receive updates about the success of the payment intent and the associated payment details.\n\nKey Scenarios to Handle[](#key-scenarios-to-handle)\n---------------------------------------------------\n\n### Partial authorizations[](#partial-authorizations)\n\nA Partial Authorization occurs when a payment is attempted for the full amount, but there are insufficient funds to cover it. Only the available amount is captured. It’s important that your software handles this flow, so that the merchant is aware when the full amount is not captured and can choose to create another payment for the difference.\n\nWhen there is a partial authorization, the API status for the charge is `succeeded`. Developers should compare either `charge.amount_captured` or `payment_intent.amount_received` to the original charge amount to determine how much was actually received.\n\n### Same-day refunds[](#same-day-refunds)\n\nAll refunds are initiated through the [Create a RefundAPI](/api-reference#tag/refunds/POST/v1/refunds) endpoint.\n\nFor same-day refunds on payments made via a Paysafe terminal reader, the refund must be initiated through the terminal reader, which needs to be powered on and connected to the internet. If the terminal is offline, the same-day refund will not go through. Next-day or later refunds can be processed without the terminal being powered on or connected. Make sure your software is set up to handle these refund events: `charge.refund.pending` and `charge.refunded`.\n\nSame-day refunds for payments made through TSYS terminal readers are not processed through the terminal.\n\nCertify Your Integration[](#certify-your-integration)\n-----------------------------------------------------\n\nAfter completing your integration, you need to certify it by handling specific payment scenarios. If you’ve implemented additional in-person features such as tip settings or card saving, ensure you test those flows as well.\n\nThe developer tasks below are required to be completed in [sandbox](https://sandbox-app.tilled.com/) before launching your card-present solution with Tilled:\n\n*   **Process payments:**Create and complete 20 card-present payments.\n*   **Configure webhooks:**Configure and listen to refund webhooks.\n*   **Process same-day refund:**Process a same-day refund for 5 card-present payments. For Paysafe terminal readers, ensure that your software can handle `charge.refund.pending` and `charge.refunded` webhooks.\n*   **Process next-day or later refund:**Process a next-day or later refund for 5 card-present payments.\n*   **Process next-day partial refunds:**Partially refund 5 card-present payments.\n*   **Create a partial authorization:**Create at least one partial authorization. Trigger amount = $37.57 and only works for Paysafe terminal readers.\n*   **Cancel a payment:**Cancel at least one card-present payment by canceling the payment on the terminal reader and process the result.\n*   **Cancel an incomplete payment:**Cancel at least one incomplete card-present payment with the [Cancel a Payment IntentAPI](/api-reference#tag/payment-intents/POST/v1/payment-intents/%7Bid%7D/cancel) endpoint and process the result.\n*   **Handle lost webhooks:**Ensure that your software can handle lost `payment_intent.succeeded` webhooks.\n\nFAQs\n----\n\nHow do I calculate the tip amount?[](#faq-how-do-i-calculate-the-tip-amount)To calculate the tip amount when tips are enabled, subtract the `payment_intent.amount` from the `payment_intent.amount_received`.What payment methods are supported?[](#faq-what-payment-methods-are-supported)Card, Apple Pay, Google Pay, and Samsung Pay are supported for in-person payments. HSA/FSA cards are not supported at this time.Can I switch in-person payment providers?[](#faq-can-i-switch-in-person-payment-providers)Yes, you can switch between in-person payment providers. If you're moving from TSYS to Paysafe for in-person payments, keep in mind these key differences:\n\n*   **Manual capture:** Manual capture is not supported by the Paysafe in-person payments solution.\n*   **Same-day refunds:** Same-day refunds for Paysafe are processed directly on the terminal reader. Your software will need to handle refund webhooks to track the final status of each refund.\n*   **Printed receipts:** Printed receipts cannot be controlled via the API with Paysafe’s terminals. If you’ve used this feature with TSYS, make sure to disable it in your software and provide merchants with instructions to manage receipts directly from their terminal reader.\n\nLast updated on March 10, 2025",
    "referrerUrl": "https://docs.tilled.com/docs/sdks-applications/example-applications"
  },
  {
    "url": "https://docs.tilled.com/docs/get-started/integration-options#onboarding",
    "title": "Integration Options (Onboarding)",
    "content": "The table below compares your integration options for onboarding new merchants.\n\n**API-ONLY**\n\n**HOSTED APPLICATION**\n\nDescription\n\nBuild a custom onboarding flow using the [OnboardingAPI](/api-reference#tag/onboarding).\n\nNo-code option for software platforms to onboard a merchant.\n\nIntegration effort\n\nHighest effort\n\nLowest effort\n\nContinuous optimization\n\nRequires integration changes\n\nAutomatic\n\n**Customization**\n\nUI customization\n\nCustomize and build your own UI\n\nWhite-labeled\n\nFlow logic\n\nExtensive control\n\nLimited control\n\nPre-fill merchant data\n\n✓\n\n✓\n\nMobile support\n\nDependent on implementation\n\nResponsive web\n\n**Features**\n\nDocument upload\n\nDependent on implementation\n\n✓\n\nInvite a collaborator\n\nDependent on implementation\n\n✓\n\nPlaid for bank verification\n\n✗\n\n✓\n\nEmail notifications\n\n✓\n\n✓\n\nWebhook events\n\n✓\n\n✓",
    "referrerUrl": "https://docs.tilled.com"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/merchant-preferences#onboarding",
    "title": "Merchant Preferences (Onboarding)",
    "content": "Tailor the hosted merchant application to your software's vertical by customizing key fields, helping merchants complete their applications more quickly and accurately.\n\nThe table below outlines all customizable fields in the hosted merchant application.\n\n**APPLICATION FIELD**\n\n**CUSTOMIZATION**\n\nIndustry\n\nSelect all applicable industries for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all industries will be shown. If one is selected, it will pre-fill for the merchant.\n\nBusiness type\n\nSelect all applicable business types for your merchant portfolio. These will be displayed to the merchant in a dropdown. If none are selected, all business types will be shown. If one is selected, it will pre-fill for the merchant.\n\nDescription of products and services\n\nEnter an example of a typical product or service supported by your software. It will be displayed to your merchants as placeholder text.\n\nProcessing volumes\n\nEnter minimum and maximum values for Monthly Processing Volumes and Average Transaction Amounts. Merchants will be required to enter a value within this range to proceed with the application.\n\n### Configure hosted application preferences\n\nTo configure the hosted merchant application:\n\n1.  Navigate to **Accounts**\n2.  Locate the **Merchant Application Preferences** card and click the **Edit** icon\n3.  Configure your preferences, including the industry, business type, and processing volumes\n4.  Click the **Save Application Preferences** button",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/onboard-new-merchants#dashboard",
    "title": "Merchant Onboarding (Dashboard)",
    "content": "The merchant onboarding process can be fully managed through the Partner Dashboard.\n\n### Create merchant application\n\nApplications created through the Dashboard utilize the Tilled\\-hosted merchant application. To create a merchant application:\n\n1.  Navigate to **Merchants** and click the **Add Merchant** button\n2.  Enter the business name and business owner’s email\n3.  Select the region, payment methods, and merchant pricing\n4.  Click the **Add Merchant** button\n\n### Pre-fill merchant application (optional)\n\nMerchant applications with the `created` or `started` status can be pre-filled and edited on behalf of the merchant. To edit the merchant application:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Merchant App** tab and click the **Edit** button\n3.  Edit the respective fields and click the **Save and Continue** button\n4.  Click **Done Editing**\n\n### Share merchant application\n\nTo share the merchant application with a business representative:\n\n1.  Navigate to **Merchants**, locate the merchant, and click the **Share** icon\n2.  Enter the business representative’s email address\n3.  Click the **Copy URL** or **Share Via Email** button\n\nOnce shared, the merchant will be navigated to the Tilled\\-hosted application.\n\n### Complete merchant application\n\nThe business owner will be required set up a merchant account, fill out the merchant application, and upload any required documentation.\n\nTo monitor the progress of a merchant application:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Merchant App** tab\n\n  \n![Merchant application](/_next/image?url=%2Fimages%2Fmerchant-application.png&w=3840&q=75)",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/merchants/document-requests#dashboard",
    "title": "Document Requests (Dashboard)",
    "content": "Documents can be fully managed through the Partner Dashboard. When documentation is requested, an email notification is sent to all software platform and merchant users who have email notifications enabled for **Additional information requests**.\n\nTo manage merchant email notifications for document requests, refer to our [Merchant Preferences guide](/docs/merchants/merchant-preferences).\n\n### Upload merchant documentation\n\nTo upload documentation on behalf of a merchant:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Documents** tab\n3.  Click the **Submit Requested Information** button\n4.  Upload the requested information and click the **Submit Additional Information** button\n\n### View request status\n\nTo view the status of a documentation request:\n\n1.  Navigate to **Merchants** and select the desired merchant\n2.  Navigate to the **Documents** tab\n3.  Refer to the `status` code of the respective request\n\nRefer to the [Document Request States](/docs/merchants/document-requests#document-request-states) for detailed information on each status.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/collect-a-payment/payment-intents#api-only",
    "title": "Online Payments (API-Only)",
    "content": "Asynchronous payment flows are complex to manage because they depend on customer interactions that happen outside of your application. [Payment IntentsAPI](/api-reference#tag/payment-intents) simplify this by tracking the payment status, serving as the source of truth throughout the payment lifecycle.\n\n### Create a payment intent\n\nTo [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents), specify the necessary details such as currency, payment method, and amount.\n\n    curl -L 'https://api.tilled.com/v1/payment-intents' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"amount\": 1000,\n        \"currency\": \"usd\",\n        \"payment_method_types\": [\n          \"card\"\n        ],\n        \"confirm\": true,\n        \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\"\n                }'\n\n**Best practices when creating a payment intent**\n\n*   [Create a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents) at the beginning of the checkout process, once you know the total amount. If the amount changes, you can [Update a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) as needed.\n*   If the checkout process is interrupted and later resumed, reuse the existing payment intent instead of creating a new one. Reusing the payment intent helps in monitoring any failed payment attempts and keeps the transaction history organized for each cart or session.\n\n### Confirm the payment\n\nIn order to confirm a payment intent, the payment method details or a `payment_method_id` must be specified. You can confirm at creation by setting `confirm=true` in the request body.\n\nIf the payment intent status is `requires_payment_method`, you'll need to attach a payment method using the [Confirm a Payment IntentAPI](/api-reference#tag/payment-intents/post/v1/payment-intents/%7Bid%7D/confirm) endpoint.\n\n    curl -L 'https://api.tilled.com/v1/payment-intents/{{PAYMENT_INTENT_ID}}/confirm' \\\n      -H 'tilled-account: {{MERCHANT_ACCOUNT_ID}}' \\\n      -H 'Content-Type: application/json' \\\n      -H 'tilled-api-key: {{SECRET_KEY}}' \\\n      -d '{\n        \"payment_method_id\": \"{{PAYMENT_METHOD_ID}}\"\n            }'\n\nPayment Intent States\n---------------------\n\n**STATUS**\n\n**DESCRIPTION**\n\n**ADDITIONAL INFORMATION**\n\n`requires_payment_method`\n\nPayment requires a payment method\n\nIf a payment attempt fails, it reverts to this status.\n\n`requires_confirmation`\n\nPayment method has been provided but the payment requires confirmation\n\nThis status is set after the customer provides payment information and before the payment intent is confirmed. Often bypassed in integrations where payment information and confirmation occur simultaneously.\n\n`requires_capture`\n\nPayment has been authorized but not captured\n\nUsed when authorization and capture are separate actions.\n\n`requires_action`\n\nPayment requires additional action\n\nFor example, action needs to be taken on the terminal reader to complete the payment.\n\n`processing`\n\nPayment is processing\n\nProcessing time varies by payment method.\n\n`succeeded`\n\nPayment has succeeded\n\nA [ChargeAPI](/api-reference#tag/charges) object has been created and funds are in the merchant’s account. If several payment attempts were made, several charges would exist.\n\n`canceled`\n\nPayment has been canceled\n\nA payment intent can be canceled before it reaches `processing` or `succeeded` status, making it invalid for future attempts. This action is irreversible. Any held funds will be reversed.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/refunds#dashboard",
    "title": "Refunds (Dashboard)",
    "content": "To issue a refund:\n\n1.  Navigate to the **Payments** page\n2.  Select the payment you wish to refund\n3.  Click the **Issue Refund** button\n4.  Enter the refund amount and reason",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/card-account-updater#dashboard",
    "title": "Card Account Updater (Dashboard)",
    "content": "To view Card Account Updater responses via the Dashboard:\n\n1.  Navigate to the **Payment** page\n2.  Select the payment you wish to review\n3.  Locate the **Payment Method** card\n\nIn the **Payment Method** card, you'll see a row displaying the **Last Updater Response** and the **Last Updated At** timestamp.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/on-device-tipping#dashboard",
    "title": "On-Device Tipping (Dashboard)",
    "content": "To configure on-device tipping:\n\n1.  Navigate to the **Terminals** page\n2.  Select the terminal you wish to configure\n3.  Toggle the **Tips** option to **On**",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/payments/card/receipts#dashboard",
    "title": "Receipts (Dashboard)",
    "content": "To configure receipt printing for TSYS terminals via the Dashboard:\n\n1.  Navigate to the **Terminals** page\n2.  Select the terminal you wish to configure\n3.  Toggle the **Receipts** option to “On”",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/reporting#dashboard",
    "title": "Reporting (Dashboard)",
    "content": "To download a preconfigured report via the Dashboard:\n\n1.  Navigate to the **Reports** page\n2.  Locate the report you wish to download and click the **Generate Report** button\n3.  Apply report filters and click the **Generate Report** button\n4.  Click the **Download** icon once the report has completed downloading\n\n### Report customization\n\nReports can be filtered by account, timezone, and date range. Column selection options are also available for certain reports.\n\n**Account filter**\n\nReports can be downloaded for a single account or across your entire portfolio.\n\n**Timezone filter** - _coming soon_\n\nReports downloaded through the Dashboard default to the user's local timezone. Soon, users will have the ability to adjust the timezone to Pacific, Mountain, Central, or Eastern time.\n\n**Date range filter**\n\nReports can be filtered on predefined date ranges or a custom date selection. The selected dates are inclusive. For example, selecting a date range of January 1, 2025 – January 31, 2025 will include data from 12:00 a.m. on January 1 through 11:59 p.m. on January 31 in the respective time zone.\n\n**Custom columns** - _coming soon_\n\nUsers can customize the columns in the Payments and Payout Details reports. Available options include default columns, all columns, or custom columns. If custom columns are selected, users can choose which data to include in the report. Selected columns will be saved and automatically applied the next time the report is downloaded.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  },
  {
    "url": "https://docs.tilled.com/docs/account-configuration/users#dashboard",
    "title": "Users (Dashboard)",
    "content": "You can manage users for your account and connected accounts, such as software platforms or merchants. To manage users for your account, navigate to **Account** > **Users**.\n\nTo manage users for a connected account, navigate to the list of connected accounts, locate the respective account, and proceed to the **Users** tab.\n\n  \n![Invite account user](/_next/image?url=%2Fimages%2Finvite-account-user.png&w=3840&q=75)\n\n### Invite user\n\nTo invite a user:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Invite User** button\n3.  Enter the user’s email address and select their role\n\nThe user will receive an email notification to set up their account.\n\n### Resend user invitation\n\nTo resend a user invitation:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Kebab Menu** icon\n3.  Select **Resend Invitation**\n\nThe user will receive an email notification to set up their account.\n\n### Update a user's role\n\nTo update a user's role:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Kebab Menu** icon\n3.  Select **Edit Role**\n4.  Select the user's new role\n5.  Click the **Save User** button\n\nThe user's role will be updated immediately.\n\n### Reassign account owner\n\nTo reassign the account's owner, reach out to [support@tilled.com](mailto:support@tilled.com).\n\n### Delete user\n\nTo delete a user:\n\n1.  Navigate the **Users** tab and locate the respective user\n2.  Click the **Kebab Menu** icon\n3.  Select **Revoke Access**\n\nThe user's access will be revoked immediately.",
    "referrerUrl": "https://docs.tilled.com/docs/quick-start"
  }
]
